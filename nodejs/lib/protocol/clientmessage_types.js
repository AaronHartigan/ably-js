//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.TAction = {
'HEARTBEAT' : 0,
'CONNECT' : 1,
'CONNECTED' : 2,
'ERROR' : 3,
'ATTACH' : 4,
'ATTACHED' : 5,
'DETACH' : 6,
'DETACHED' : 7,
'PRESENCE' : 8,
'MESSAGE' : 9
};
ttypes.TType = {
'NONE' : 0,
'TRUE' : 1,
'FALSE' : 2,
'INT32' : 3,
'INT64' : 4,
'DOUBLE' : 5,
'STRING' : 6,
'BUFFER' : 7,
'JSONARRAY' : 8,
'JSONOBJECT' : 9
};
ttypes.TPresenceState = {
'ENTER' : 0,
'LEAVE' : 1
};
var TData = module.exports.TData = function(args) {
  this.type = null;
  this.i32Data = null;
  this.i64Data = null;
  this.doubleData = null;
  this.stringData = null;
  this.binaryData = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.i32Data !== undefined) {
      this.i32Data = args.i32Data;
    }
    if (args.i64Data !== undefined) {
      this.i64Data = args.i64Data;
    }
    if (args.doubleData !== undefined) {
      this.doubleData = args.doubleData;
    }
    if (args.stringData !== undefined) {
      this.stringData = args.stringData;
    }
    if (args.binaryData !== undefined) {
      this.binaryData = args.binaryData;
    }
  }
};
TData.prototype = {};
TData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.i32Data = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.i64Data = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.doubleData = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.stringData = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.binaryData = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TData.prototype.write = function(output) {
  output.writeStructBegin('TData');
  if (this.type !== null) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.i32Data !== null) {
    output.writeFieldBegin('i32Data', Thrift.Type.I32, 2);
    output.writeI32(this.i32Data);
    output.writeFieldEnd();
  }
  if (this.i64Data !== null) {
    output.writeFieldBegin('i64Data', Thrift.Type.I64, 3);
    output.writeI64(this.i64Data);
    output.writeFieldEnd();
  }
  if (this.doubleData !== null) {
    output.writeFieldBegin('doubleData', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.doubleData);
    output.writeFieldEnd();
  }
  if (this.stringData !== null) {
    output.writeFieldBegin('stringData', Thrift.Type.STRING, 5);
    output.writeString(this.stringData);
    output.writeFieldEnd();
  }
  if (this.binaryData !== null) {
    output.writeFieldBegin('binaryData', Thrift.Type.STRING, 6);
    output.writeString(this.binaryData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TPresence = module.exports.TPresence = function(args) {
  this.state = null;
  this.clientId = null;
  this.connectionId = null;
  this.clientData = null;
  if (args) {
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.clientId !== undefined) {
      this.clientId = args.clientId;
    }
    if (args.connectionId !== undefined) {
      this.connectionId = args.connectionId;
    }
    if (args.clientData !== undefined) {
      this.clientData = args.clientData;
    }
  }
};
TPresence.prototype = {};
TPresence.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.clientId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.connectionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientData = new ttypes.TData();
        this.clientData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPresence.prototype.write = function(output) {
  output.writeStructBegin('TPresence');
  if (this.state !== null) {
    output.writeFieldBegin('state', Thrift.Type.I32, 1);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.clientId !== null) {
    output.writeFieldBegin('clientId', Thrift.Type.STRING, 2);
    output.writeString(this.clientId);
    output.writeFieldEnd();
  }
  if (this.connectionId !== null) {
    output.writeFieldBegin('connectionId', Thrift.Type.STRING, 3);
    output.writeString(this.connectionId);
    output.writeFieldEnd();
  }
  if (this.clientData !== null) {
    output.writeFieldBegin('clientData', Thrift.Type.STRUCT, 4);
    this.clientData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TPresenceArray = module.exports.TPresenceArray = function(args) {
  this.items = null;
  if (args) {
    if (args.items !== undefined) {
      this.items = args.items;
    }
  }
};
TPresenceArray.prototype = {};
TPresenceArray.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.items = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.TPresence();
          elem6.read(input);
          this.items.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPresenceArray.prototype.write = function(output) {
  output.writeStructBegin('TPresenceArray');
  if (this.items !== null) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter7 in this.items)
    {
      if (this.items.hasOwnProperty(iter7))
      {
        iter7 = this.items[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TMessage = module.exports.TMessage = function(args) {
  this.name = null;
  this.clientId = null;
  this.timestamp = null;
  this.data = null;
  this.tags = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.clientId !== undefined) {
      this.clientId = args.clientId;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
  }
};
TMessage.prototype = {};
TMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.clientId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.TData();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.tags = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.tags.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMessage.prototype.write = function(output) {
  output.writeStructBegin('TMessage');
  if (this.name !== null) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.clientId !== null) {
    output.writeFieldBegin('clientId', Thrift.Type.STRING, 2);
    output.writeString(this.clientId);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.data !== null) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 4);
    this.data.write(output);
    output.writeFieldEnd();
  }
  if (this.tags !== null) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.tags.length);
    for (var iter15 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter15))
      {
        iter15 = this.tags[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TMessageArray = module.exports.TMessageArray = function(args) {
  this.items = null;
  if (args) {
    if (args.items !== undefined) {
      this.items = args.items;
    }
  }
};
TMessageArray.prototype = {};
TMessageArray.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.items = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.TMessage();
          elem22.read(input);
          this.items.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMessageArray.prototype.write = function(output) {
  output.writeStructBegin('TMessageArray');
  if (this.items !== null) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter23 in this.items)
    {
      if (this.items.hasOwnProperty(iter23))
      {
        iter23 = this.items[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TChannelMessage = module.exports.TChannelMessage = function(args) {
  this.action = null;
  this.statusCode = null;
  this.code = null;
  this.reason = null;
  this.applicationId = null;
  this.connectionId = null;
  this.connectionSerial = null;
  this.channel = null;
  this.channelSerial = null;
  this.publisherSerial = null;
  this.timestamp = null;
  this.size = null;
  this.messages = null;
  this.presence = null;
  if (args) {
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.statusCode !== undefined) {
      this.statusCode = args.statusCode;
    }
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.reason !== undefined) {
      this.reason = args.reason;
    }
    if (args.applicationId !== undefined) {
      this.applicationId = args.applicationId;
    }
    if (args.connectionId !== undefined) {
      this.connectionId = args.connectionId;
    }
    if (args.connectionSerial !== undefined) {
      this.connectionSerial = args.connectionSerial;
    }
    if (args.channel !== undefined) {
      this.channel = args.channel;
    }
    if (args.channelSerial !== undefined) {
      this.channelSerial = args.channelSerial;
    }
    if (args.publisherSerial !== undefined) {
      this.publisherSerial = args.publisherSerial;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
    if (args.messages !== undefined) {
      this.messages = args.messages;
    }
    if (args.presence !== undefined) {
      this.presence = args.presence;
    }
  }
};
TChannelMessage.prototype = {};
TChannelMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.statusCode = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.code = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.applicationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.connectionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.connectionSerial = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.channel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.channelSerial = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.publisherSerial = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.messages = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.TMessage();
          elem30.read(input);
          this.messages.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.SET) {
        var _size31 = 0;
        var _rtmp335;
        this.presence = [];
        var _etype34 = 0;
        _rtmp335 = input.readSetBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          elem37 = new ttypes.TPresence();
          elem37.read(input);
          this.presence.push(elem37);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TChannelMessage.prototype.write = function(output) {
  output.writeStructBegin('TChannelMessage');
  if (this.action !== null) {
    output.writeFieldBegin('action', Thrift.Type.I32, 1);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.statusCode !== null) {
    output.writeFieldBegin('statusCode', Thrift.Type.I16, 2);
    output.writeI16(this.statusCode);
    output.writeFieldEnd();
  }
  if (this.code !== null) {
    output.writeFieldBegin('code', Thrift.Type.I16, 3);
    output.writeI16(this.code);
    output.writeFieldEnd();
  }
  if (this.reason !== null) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 4);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.applicationId !== null) {
    output.writeFieldBegin('applicationId', Thrift.Type.STRING, 5);
    output.writeString(this.applicationId);
    output.writeFieldEnd();
  }
  if (this.connectionId !== null) {
    output.writeFieldBegin('connectionId', Thrift.Type.STRING, 6);
    output.writeString(this.connectionId);
    output.writeFieldEnd();
  }
  if (this.connectionSerial !== null) {
    output.writeFieldBegin('connectionSerial', Thrift.Type.I64, 7);
    output.writeI64(this.connectionSerial);
    output.writeFieldEnd();
  }
  if (this.channel !== null) {
    output.writeFieldBegin('channel', Thrift.Type.STRING, 8);
    output.writeString(this.channel);
    output.writeFieldEnd();
  }
  if (this.channelSerial !== null) {
    output.writeFieldBegin('channelSerial', Thrift.Type.STRING, 9);
    output.writeString(this.channelSerial);
    output.writeFieldEnd();
  }
  if (this.publisherSerial !== null) {
    output.writeFieldBegin('publisherSerial', Thrift.Type.I64, 10);
    output.writeI64(this.publisherSerial);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 11);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.size !== null) {
    output.writeFieldBegin('size', Thrift.Type.I32, 12);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.messages !== null) {
    output.writeFieldBegin('messages', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.messages.length);
    for (var iter38 in this.messages)
    {
      if (this.messages.hasOwnProperty(iter38))
      {
        iter38 = this.messages[iter38];
        iter38.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.presence !== null) {
    output.writeFieldBegin('presence', Thrift.Type.SET, 14);
    output.writeSetBegin(Thrift.Type.STRUCT, this.presence.length);
    for (var iter39 in this.presence)
    {
      if (this.presence.hasOwnProperty(iter39))
      {
        iter39 = this.presence[iter39];
        iter39.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TMessageSet = module.exports.TMessageSet = function(args) {
  this.items = null;
  if (args) {
    if (args.items !== undefined) {
      this.items = args.items;
    }
  }
};
TMessageSet.prototype = {};
TMessageSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.items = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.TChannelMessage();
          elem46.read(input);
          this.items.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMessageSet.prototype.write = function(output) {
  output.writeStructBegin('TMessageSet');
  if (this.items !== null) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter47 in this.items)
    {
      if (this.items.hasOwnProperty(iter47))
      {
        iter47 = this.items[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SMessageCount = module.exports.SMessageCount = function(args) {
  this.count = null;
  this.data = null;
  if (args) {
    if (args.count !== undefined) {
      this.count = args.count;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
SMessageCount.prototype = {};
SMessageCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.count = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.data = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SMessageCount.prototype.write = function(output) {
  output.writeStructBegin('SMessageCount');
  if (this.count !== null) {
    output.writeFieldBegin('count', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.count);
    output.writeFieldEnd();
  }
  if (this.data !== null) {
    output.writeFieldBegin('data', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SMessageTypes = module.exports.SMessageTypes = function(args) {
  this.all = null;
  this.messages = null;
  this.presence = null;
  if (args) {
    if (args.all !== undefined) {
      this.all = args.all;
    }
    if (args.messages !== undefined) {
      this.messages = args.messages;
    }
    if (args.presence !== undefined) {
      this.presence = args.presence;
    }
  }
};
SMessageTypes.prototype = {};
SMessageTypes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.all = new ttypes.SMessageCount();
        this.all.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.messages = new ttypes.SMessageCount();
        this.messages.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.presence = new ttypes.SMessageCount();
        this.presence.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SMessageTypes.prototype.write = function(output) {
  output.writeStructBegin('SMessageTypes');
  if (this.all !== null) {
    output.writeFieldBegin('all', Thrift.Type.STRUCT, 1);
    this.all.write(output);
    output.writeFieldEnd();
  }
  if (this.messages !== null) {
    output.writeFieldBegin('messages', Thrift.Type.STRUCT, 2);
    this.messages.write(output);
    output.writeFieldEnd();
  }
  if (this.presence !== null) {
    output.writeFieldBegin('presence', Thrift.Type.STRUCT, 3);
    this.presence.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SResourceCount = module.exports.SResourceCount = function(args) {
  this.opened = null;
  this.peak = null;
  this.mean = null;
  this.min = null;
  this.refused = null;
  this.sample_count = null;
  this.sample_sum = null;
  if (args) {
    if (args.opened !== undefined) {
      this.opened = args.opened;
    }
    if (args.peak !== undefined) {
      this.peak = args.peak;
    }
    if (args.mean !== undefined) {
      this.mean = args.mean;
    }
    if (args.min !== undefined) {
      this.min = args.min;
    }
    if (args.refused !== undefined) {
      this.refused = args.refused;
    }
    if (args.sample_count !== undefined) {
      this.sample_count = args.sample_count;
    }
    if (args.sample_sum !== undefined) {
      this.sample_sum = args.sample_sum;
    }
  }
};
SResourceCount.prototype = {};
SResourceCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.opened = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.peak = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.mean = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.min = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.refused = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.sample_count = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.sample_sum = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SResourceCount.prototype.write = function(output) {
  output.writeStructBegin('SResourceCount');
  if (this.opened !== null) {
    output.writeFieldBegin('opened', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.opened);
    output.writeFieldEnd();
  }
  if (this.peak !== null) {
    output.writeFieldBegin('peak', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.peak);
    output.writeFieldEnd();
  }
  if (this.mean !== null) {
    output.writeFieldBegin('mean', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.mean);
    output.writeFieldEnd();
  }
  if (this.min !== null) {
    output.writeFieldBegin('min', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.min);
    output.writeFieldEnd();
  }
  if (this.refused !== null) {
    output.writeFieldBegin('refused', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.refused);
    output.writeFieldEnd();
  }
  if (this.sample_count !== null) {
    output.writeFieldBegin('sample_count', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.sample_count);
    output.writeFieldEnd();
  }
  if (this.sample_sum !== null) {
    output.writeFieldBegin('sample_sum', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.sample_sum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SConnectionTypes = module.exports.SConnectionTypes = function(args) {
  this.all = null;
  this.plain = null;
  this.tls = null;
  if (args) {
    if (args.all !== undefined) {
      this.all = args.all;
    }
    if (args.plain !== undefined) {
      this.plain = args.plain;
    }
    if (args.tls !== undefined) {
      this.tls = args.tls;
    }
  }
};
SConnectionTypes.prototype = {};
SConnectionTypes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.all = new ttypes.SResourceCount();
        this.all.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.plain = new ttypes.SResourceCount();
        this.plain.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tls = new ttypes.SResourceCount();
        this.tls.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SConnectionTypes.prototype.write = function(output) {
  output.writeStructBegin('SConnectionTypes');
  if (this.all !== null) {
    output.writeFieldBegin('all', Thrift.Type.STRUCT, 1);
    this.all.write(output);
    output.writeFieldEnd();
  }
  if (this.plain !== null) {
    output.writeFieldBegin('plain', Thrift.Type.STRUCT, 2);
    this.plain.write(output);
    output.writeFieldEnd();
  }
  if (this.tls !== null) {
    output.writeFieldBegin('tls', Thrift.Type.STRUCT, 3);
    this.tls.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SMessageTraffic = module.exports.SMessageTraffic = function(args) {
  this.all = null;
  this.realtime = null;
  this.rest = null;
  this.post = null;
  this.httpStream = null;
  if (args) {
    if (args.all !== undefined) {
      this.all = args.all;
    }
    if (args.realtime !== undefined) {
      this.realtime = args.realtime;
    }
    if (args.rest !== undefined) {
      this.rest = args.rest;
    }
    if (args.post !== undefined) {
      this.post = args.post;
    }
    if (args.httpStream !== undefined) {
      this.httpStream = args.httpStream;
    }
  }
};
SMessageTraffic.prototype = {};
SMessageTraffic.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.all = new ttypes.SMessageTypes();
        this.all.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.realtime = new ttypes.SMessageTypes();
        this.realtime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.rest = new ttypes.SMessageTypes();
        this.rest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.post = new ttypes.SMessageTypes();
        this.post.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.httpStream = new ttypes.SMessageTypes();
        this.httpStream.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SMessageTraffic.prototype.write = function(output) {
  output.writeStructBegin('SMessageTraffic');
  if (this.all !== null) {
    output.writeFieldBegin('all', Thrift.Type.STRUCT, 1);
    this.all.write(output);
    output.writeFieldEnd();
  }
  if (this.realtime !== null) {
    output.writeFieldBegin('realtime', Thrift.Type.STRUCT, 2);
    this.realtime.write(output);
    output.writeFieldEnd();
  }
  if (this.rest !== null) {
    output.writeFieldBegin('rest', Thrift.Type.STRUCT, 3);
    this.rest.write(output);
    output.writeFieldEnd();
  }
  if (this.post !== null) {
    output.writeFieldBegin('post', Thrift.Type.STRUCT, 4);
    this.post.write(output);
    output.writeFieldEnd();
  }
  if (this.httpStream !== null) {
    output.writeFieldBegin('httpStream', Thrift.Type.STRUCT, 5);
    this.httpStream.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SRequestCount = module.exports.SRequestCount = function(args) {
  this.succeeded = null;
  this.failed = null;
  this.refused = null;
  if (args) {
    if (args.succeeded !== undefined) {
      this.succeeded = args.succeeded;
    }
    if (args.failed !== undefined) {
      this.failed = args.failed;
    }
    if (args.refused !== undefined) {
      this.refused = args.refused;
    }
  }
};
SRequestCount.prototype = {};
SRequestCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.succeeded = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.failed = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.refused = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SRequestCount.prototype.write = function(output) {
  output.writeStructBegin('SRequestCount');
  if (this.succeeded !== null) {
    output.writeFieldBegin('succeeded', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.succeeded);
    output.writeFieldEnd();
  }
  if (this.failed !== null) {
    output.writeFieldBegin('failed', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.failed);
    output.writeFieldEnd();
  }
  if (this.refused !== null) {
    output.writeFieldBegin('refused', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.refused);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SStats = module.exports.SStats = function(args) {
  this.all = null;
  this.inbound = null;
  this.outbound = null;
  this.persisted = null;
  this.connections = null;
  this.channels = null;
  this.apiRequests = null;
  this.tokenRequests = null;
  if (args) {
    if (args.all !== undefined) {
      this.all = args.all;
    }
    if (args.inbound !== undefined) {
      this.inbound = args.inbound;
    }
    if (args.outbound !== undefined) {
      this.outbound = args.outbound;
    }
    if (args.persisted !== undefined) {
      this.persisted = args.persisted;
    }
    if (args.connections !== undefined) {
      this.connections = args.connections;
    }
    if (args.channels !== undefined) {
      this.channels = args.channels;
    }
    if (args.apiRequests !== undefined) {
      this.apiRequests = args.apiRequests;
    }
    if (args.tokenRequests !== undefined) {
      this.tokenRequests = args.tokenRequests;
    }
  }
};
SStats.prototype = {};
SStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.all = new ttypes.SMessageTypes();
        this.all.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.inbound = new ttypes.SMessageTraffic();
        this.inbound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.outbound = new ttypes.SMessageTraffic();
        this.outbound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.persisted = new ttypes.SMessageTypes();
        this.persisted.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.connections = new ttypes.SConnectionTypes();
        this.connections.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.channels = new ttypes.SResourceCount();
        this.channels.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.apiRequests = new ttypes.SRequestCount();
        this.apiRequests.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokenRequests = new ttypes.SRequestCount();
        this.tokenRequests.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SStats.prototype.write = function(output) {
  output.writeStructBegin('SStats');
  if (this.all !== null) {
    output.writeFieldBegin('all', Thrift.Type.STRUCT, 1);
    this.all.write(output);
    output.writeFieldEnd();
  }
  if (this.inbound !== null) {
    output.writeFieldBegin('inbound', Thrift.Type.STRUCT, 2);
    this.inbound.write(output);
    output.writeFieldEnd();
  }
  if (this.outbound !== null) {
    output.writeFieldBegin('outbound', Thrift.Type.STRUCT, 3);
    this.outbound.write(output);
    output.writeFieldEnd();
  }
  if (this.persisted !== null) {
    output.writeFieldBegin('persisted', Thrift.Type.STRUCT, 4);
    this.persisted.write(output);
    output.writeFieldEnd();
  }
  if (this.connections !== null) {
    output.writeFieldBegin('connections', Thrift.Type.STRUCT, 5);
    this.connections.write(output);
    output.writeFieldEnd();
  }
  if (this.channels !== null) {
    output.writeFieldBegin('channels', Thrift.Type.STRUCT, 6);
    this.channels.write(output);
    output.writeFieldEnd();
  }
  if (this.apiRequests !== null) {
    output.writeFieldBegin('apiRequests', Thrift.Type.STRUCT, 7);
    this.apiRequests.write(output);
    output.writeFieldEnd();
  }
  if (this.tokenRequests !== null) {
    output.writeFieldBegin('tokenRequests', Thrift.Type.STRUCT, 8);
    this.tokenRequests.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SStatsArray = module.exports.SStatsArray = function(args) {
  this.items = null;
  if (args) {
    if (args.items !== undefined) {
      this.items = args.items;
    }
  }
};
SStatsArray.prototype = {};
SStatsArray.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.items = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.SStats();
          elem54.read(input);
          this.items.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SStatsArray.prototype.write = function(output) {
  output.writeStructBegin('SStatsArray');
  if (this.items !== null) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter55 in this.items)
    {
      if (this.items.hasOwnProperty(iter55))
      {
        iter55 = this.items[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

