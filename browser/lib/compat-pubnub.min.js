(function() {
  function q(b) {
    var e = m[b];
    e || (e = c.ably.channels.get(b), c.ablyCipherParams && e.setOptions({encrypted:!0, cipherParams:c.ablyCipherParams}), m[b] = e);
    return e
  }
  function x(b, e) {
    delete c.ablyCipherParamsPending;
    if(b) {
      return h("Unable to set up encryption parameters for secure messaging")
    }
    c.ablyCipherParams = e;
    for(var a in m) {
      m[a].setOptions({encrypted:!0, cipherParams:c.ablyCipherParams})
    }
    for(a = 0;a < p.length;a++) {
      var d = p[a];
      c.publish({channel:d.channel, callback:d.callback, error:d.error, message:d.message})
    }
    p = []
  }
  var g = "undefined" === typeof document ? null : document.getElementById("pubnub"), t, u, v;
  g && g.getAttribute("publish_key");
  g && g.getAttribute("subscribe_key");
  t = g && g.getAttribute("origin") || "";
  u = g && g.getAttribute("uuid") || "";
  v = g && "on" == g.getAttribute("ssl");
  var m = {}, n = {}, p = [], c = {}, k = function() {
  }, h = console && console.log.bind(console) || k;
  c.Ably = "undefined" !== typeof window ? window.Ably : "undefined" !== typeof Ably ? Ably : require("../..");
  var r = function(b, e) {
    for(var a in n) {
      var d = n[a];
      "connect" == b ? d.hasConnectedOnce ? d.reconnect && d.reconnect(a) : (d.connect && d.connect(a), d.hasConnectedOnce = !0) : d[b] && d[b](a)
    }
  };
  c.secure = function(b, e) {
    return!b.cipher_key ? h("Missing cipher_key") : c.init(b, e)
  };
  c.init = function(b, e) {
    var a = b.ably_key, d = b.ssl || v, f = b.origin || t, l = b.tlsorigin || "", s = b.uuid || u;
    if(!a) {
      return h("Missing ably_key")
    }
    a = {key:a, encrypted:d};
    s && 0 != s.length && (a.clientId = s);
    f && 0 != f.length && (f = f.split(":"), a.host = a.wsHost = f[0], 1 < f.length && (a.port = f[1]));
    l && 0 != l.length && (f = l.split(":"), 1 < f.length && (a.tlsPort = f[1]));
    c.ablyOptions = a;
    c.ably = new c.Ably.Realtime(a);
    b.cipher_key && (c.ablyCipherParamsPending = !0, c.Ably.Realtime.Crypto.getDefaultParams(b.cipher_key, x));
    c.ably.connection.on(function(a) {
      switch(a.current) {
        case "connected":
          r("connect");
          break;
        case "disconnected":
        ;
        case "suspended":
        ;
        case "closed":
          r("disconnect", a.reason);
          break;
        case "failed":
          r("error", a.reason)
      }
    });
    return c
  };
  c.get_uuid = function() {
    return c.ablyOptions ? c.ablyOptions.clientId : null
  };
  c.shutdown = function(b) {
    var e = c.ably.connection, a = function(d) {
      e.off("closed", a);
      b(d.current)
    };
    c.ably.connection.on("closed", a);
    c.ably.close();
    delete c.ably;
    delete c.ablyOptions;
    delete c.ablyCipherParams;
    n = {};
    m = {};
    p = []
  };
  c.history = function(b, e) {
    e = b.callback || e;
    var a = b.count || 100, d = b.channel, c = b.error || k, l = b.reverse || !1;
    if(!d) {
      return h("Missing Channel")
    }
    if(!e) {
      return h("Missing Callback")
    }
    d = q(d);
    a = {direction:l ? "backwards" : "forwards", limit:a};
    b.start && (a.start = Number(b.start) / 1E4);
    b.end && (a.end = Number(b.end) / 1E4);
    d.history(a, function(a, b) {
      if(null != a) {
        0 != Object.keys(a).length && c(a)
      }else {
        for(var d = [], l = null, h = null, k = 0;k < b.length;k++) {
          var w = b[k];
          l || (l = h = w.timestamp);
          d.push(w.data)
        }
        e([d, l, h])
      }
    })
  };
  c.time = function(b) {
    c.ably.time(function(e, a) {
      e ? (h("PUBNUB.time: Error: " + e), b(0)) : b(1E4 * Number(a))
    })
  };
  c.publish = function(b, e) {
    e = e || b.callback || k;
    var a = b.message, d = b.channel, f = b.error || k, l = Date.now();
    if(!a) {
      return h("Missing Message")
    }
    if(!d) {
      return h("Missing Channel")
    }
    c.ablyCipherParamsPending ? p.push({channel:d, message:a, error:f, callback:e}) : q(d).publish("", a, function(a) {
      null != a ? f({error:a}) : e([1, "Sent", (1E4 * l).toString()])
    })
  };
  c.here_now = function(b, e) {
    e = e || b.callback;
    var a = b.error || k, d = b.channel;
    if(d) {
      if(e) {
        if(d = n[d]) {
          if(d = d.ablyChannel.presence.get()) {
            for(var a = Array(d.length), c = 0;c < d.length;c++) {
              a[c] = d[c].clientId
            }
            e({uuids:a, occupancy:a.length})
          }else {
            a("Presence not available for channel")
          }
        }else {
          a("Not subscribed to channel")
        }
      }else {
        a("Missing callback")
      }
    }else {
      a("Missing channel")
    }
  };
  c.uuid = function(b) {
    function c(a) {
      for(var b = "", e = 0;e < a;e++) {
        b += "abcdef0123456789".charAt(Math.floor(16 * Math.random()))
      }
      return b
    }
    var a = c(8) + "-" + c(4) + "-" + c(4) + "-" + c(4) + "-" + c(12);
    b && b(a);
    return a
  };
  c.subscribe = function(b, e) {
    e = e || b.callback || b.message;
    var a = b.channel;
    if(!a) {
      return h("Missing Channel")
    }
    if(!e) {
      return h("Missing Callback")
    }
    "[object Array]" != Object.prototype.toString.call(a) && (a = a.split(","));
    for(var d = function(a, b, d) {
      if(n[a]) {
        return h("Already Connected")
      }
      var e = function(a) {
        b(a.data)
      }, f = q(a), g = d.presence;
      if(g) {
        var m = function(a) {
          "update" != a.action && g({action:"enter" == a.action ? "join" : "leave", uuid:a.clientId, timestamp:1E4 * Date.now(), occupancy:f.presence.get().length})
        };
        f.presence.on("enter", function(a) {
          a.action = "enter";
          m(a)
        });
        f.presence.on("leave", function(a) {
          a.action = "leave";
          m(a)
        })
      }
      f.subscribe(e);
      d = {callback:e, ablyChannel:f, error:d.error || k, connect:d.connect || k, reconnect:d.reconnect || k, disconnect:d.disconnect || k, presence:d.presence || k, hasConnectedOnce:!1};
      n[a] = d;
      "connected" == c.ably.connection.state && (d.hasConnectedOnce = !0, d.connect && d.connect(a));
      c.ablyOptions.clientId && f.presence.enter(function(a) {
      })
    }, f = 0;f < a.length;f++) {
      d(a[f], e, b)
    }
  };
  c.unsubscribe = function(b, c) {
    c = c || b.callback || k;
    var a = b.channel;
    if(a) {
      "[object Array]" != Object.prototype.toString.call(a) && (a = a.split(","));
      for(var d = 0;d < a.length;d++) {
        var f = a[d], h = c, g = f && n[f];
        g && (g.ablyChannel.unsubscribe(g.callback), delete n[f], h({action:"leave"}))
      }
    }
  };
  "undefined" === typeof window ? module.exports = c : window.PUBNUB = c
})();
