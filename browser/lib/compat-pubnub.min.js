(function() {
  function q(b) {
    var c = m[b];
    c || (c = d.ably.channels.get(b), d.ablyCipherParams && c.setOptions({encrypted:!0, cipherParams:d.ablyCipherParams}), m[b] = c);
    return c;
  }
  function x(b, c) {
    delete d.ablyCipherParamsPending;
    if (b) {
      return h("Unable to set up encryption parameters for secure messaging");
    }
    d.ablyCipherParams = c;
    for (var a in m) {
      m[a].setOptions({encrypted:!0, cipherParams:d.ablyCipherParams});
    }
    for (a = 0;a < p.length;a++) {
      var e = p[a];
      d.publish({channel:e.channel, callback:e.callback, error:e.error, message:e.message});
    }
    p = [];
  }
  var g = "undefined" === typeof document ? null : document.getElementById("pubnub"), t, u, v;
  g && g.getAttribute("publish_key");
  g && g.getAttribute("subscribe_key");
  t = g && g.getAttribute("origin") || "";
  u = g && g.getAttribute("uuid") || "";
  v = g && "on" == g.getAttribute("ssl");
  var m = {}, n = {}, p = [], d = {}, k = function() {
  }, h = console && console.log || k;
  d.Ably = "undefined" !== typeof window ? window.Ably : "undefined" !== typeof Ably ? Ably : require("../..");
  var r = function(b, c) {
    for (var a in n) {
      var e = n[a];
      "connect" == b ? e.hasConnectedOnce ? e.reconnect && e.reconnect(a) : (e.connect && e.connect(a), e.hasConnectedOnce = !0) : e[b] && e[b](a);
    }
  };
  d.secure = function(b, c) {
    return b.cipher_key ? d.init(b, c) : h("Missing cipher_key");
  };
  d.init = function(b, c) {
    var a = b.ably_key, e = b.ssl || v, f = b.origin || t, l = b.tlsorigin || "", s = b.uuid || u;
    if (!a) {
      return h("Missing ably_key");
    }
    a = {key:a, encrypted:e};
    s && 0 != s.length && (a.clientId = s);
    f && 0 != f.length && (f = f.split(":"), a.host = a.wsHost = f[0], 1 < f.length && (a.port = f[1]));
    l && 0 != l.length ? (f = l.split(":"), a.tlsPort = 1 < f.length ? f[1] : 8081) : a.tlsPort = 8081;
    d.ablyOptions = a;
    d.ably = new d.Ably.Realtime(a);
    b.cipher_key && (d.ablyCipherParamsPending = !0, d.Ably.Realtime.Crypto.getDefaultParams(b.cipher_key, x));
    d.ably.connection.on(function(a) {
      switch(a.current) {
        case "connected":
          r("connect");
          break;
        case "disconnected":
        ;
        case "suspended":
        ;
        case "closed":
          r("disconnect", a.reason);
          break;
        case "failed":
          r("error", a.reason);
      }
    });
    return d;
  };
  d.shutdown = function(b) {
    var c = d.ably.connection, a = function(e) {
      c.off("closed", a);
      b(e.current);
    };
    d.ably.connection.on("closed", a);
    d.ably.close();
    delete d.ably;
    delete d.ablyOptions;
    delete d.ablyCipherParams;
    n = {};
    m = {};
    p = [];
  };
  d.history = function(b, c) {
    c = b.callback || c;
    var a = b.count || 100, e = b.channel, d = b.error || k, l = b.reverse || !1;
    if (!e) {
      return h("Missing Channel");
    }
    if (!c) {
      return h("Missing Callback");
    }
    e = q(e);
    a = {direction:l ? "backwards" : "forwards", limit:a};
    b.start && (a.start = Number(b.start) / 1E4);
    b.end && (a.end = Number(b.end) / 1E4);
    e.history(a, function(a, b) {
      if (null != a) {
        0 != Object.keys(a).length && d(a);
      } else {
        for (var e = [], l = null, h = null, k = 0;k < b.length;k++) {
          var w = b[k];
          l || (l = h = w.timestamp);
          e.push(w.data);
        }
        c([e, l, h]);
      }
    });
  };
  d.time = function(b) {
    d.ably.time(function(c, a) {
      c ? (h("PUBNUB.time: Error: " + c), b(0)) : b(1E4 * Number(a));
    });
  };
  d.publish = function(b, c) {
    c = c || b.callback || k;
    var a = b.message, e = b.channel, f = b.error || k, l = Date.now();
    if (!a) {
      return h("Missing Message");
    }
    if (!e) {
      return h("Missing Channel");
    }
    d.ablyCipherParamsPending ? p.push({channel:e, message:a, error:f, callback:c}) : q(e).publish("", a, function(a) {
      null != a ? f({error:a}) : c([1, "Sent", (1E4 * l).toString()]);
    });
  };
  d.here_now = function(b, c) {
    c = c || b.callback;
    var a = b.error || k, e = b.channel;
    if (e) {
      if (c) {
        if (e = n[e]) {
          if (e = e.ablyChannel.presence.get()) {
            for (var a = Array(e.length), d = 0;d < e.length;d++) {
              a[d] = e[d].clientId;
            }
            c({uuids:a, occupancy:a.length});
          } else {
            a("Presence not available for channel");
          }
        } else {
          a("Not subscribed to channel");
        }
      } else {
        a("Missing callback");
      }
    } else {
      a("Missing channel");
    }
  };
  d.uuid = function(b) {
    function c(a) {
      for (var b = "", c = 0;c < a;c++) {
        b += "abcdef0123456789".charAt(Math.floor(16 * Math.random()));
      }
      return b;
    }
    var a = c(8) + "-" + c(4) + "-" + c(4) + "-" + c(4) + "-" + c(12);
    b && b(a);
    return a;
  };
  d.subscribe = function(b, c) {
    c = c || b.callback || b.message;
    var a = b.channel;
    if (!a) {
      return h("Missing Channel");
    }
    if (!c) {
      return h("Missing Callback");
    }
    "[object Array]" != Object.prototype.toString.call(a) && (a = a.split(","));
    for (var e = function(a, b, c) {
      if (n[a]) {
        return h("Already Connected");
      }
      var e = function(a) {
        b(a.data);
      }, f = q(a), g = c.presence;
      if (g) {
        var m = function(a) {
          "update" != a.action && g({action:"enter" == a.action ? "join" : "leave", uuid:a.clientId, timestamp:1E4 * Date.now(), occupancy:f.presence.get().length});
        };
        f.presence.on("enter", function(a) {
          a.action = "enter";
          m(a);
        });
        f.presence.on("leave", function(a) {
          a.action = "leave";
          m(a);
        });
      }
      f.subscribe(e);
      c = {callback:e, ablyChannel:f, error:c.error || k, connect:c.connect || k, reconnect:c.reconnect || k, disconnect:c.disconnect || k, presence:c.presence || k, hasConnectedOnce:!1};
      n[a] = c;
      "connected" == d.ably.connection.state && (c.hasConnectedOnce = !0, c.connect && c.connect(a));
      d.ablyOptions.clientId && f.presence.enter(function(a) {
      });
    }, f = 0;f < a.length;f++) {
      e(a[f], c, b);
    }
  };
  d.unsubscribe = function(b, c) {
    c = c || b.callback || k;
    var a = b.channel;
    if (a) {
      "[object Array]" != Object.prototype.toString.call(a) && (a = a.split(","));
      for (var e = 0;e < a.length;e++) {
        var d = a[e], h = c, g = d && n[d];
        g && (g.ablyChannel.unsubscribe(g.callback), delete n[d], h({action:"leave"}));
      }
    }
  };
  "undefined" === typeof window ? module.exports = d : window.PUBNUB = d;
})();
