(function() {
  var l = function() {
    function a() {
      this.any = [];
      this.events = {};
      this.anyOnce = [];
      this.eventsOnce = {}
    }
    a.prototype.on = function(a, c) {
      1 == arguments.length && "function" == typeof a ? this.any.push(a) : null === a ? this.any.push(c) : (this.events[a] = this.events[a] || []).push(c)
    };
    a.prototype.off = function(a, c) {
      if(0 == arguments.length) {
        this.any = [], this.events = {}, this.anyOnce = [], this.eventsOnce = {}
      }else {
        1 == arguments.length && "function" == typeof a && (c = a, a = null);
        var d, b = -1;
        if(null === a) {
          if(c) {
            if(!(d = this.any) || -1 == (b = d.indexOf(c))) {
              if(d = this.anyOnce) {
                b = d.indexOf(c)
              }
            }
            -1 < b && d.splice(b, 1)
          }else {
            this.any = [], this.anyOnce = []
          }
        }else {
          if(c) {
            b = -1;
            if(!(d = this.events[a]) || -1 == (b = d.indexOf(c))) {
              if(d = this.eventsOnce[a]) {
                b = d.indexOf(c)
              }
            }
            -1 < b && d.splice(b, 1)
          }else {
            delete this.events[a], delete this.eventsOnce[a]
          }
        }
      }
    };
    a.prototype.listeners = function(a) {
      if(a) {
        var c = this.events[a] || [];
        this.eventsOnce[a] && Array.prototype.push.apply(c, this.eventsOnce[a]);
        return c.length ? c : null
      }
      return this.any.length ? this.any : null
    };
    a.prototype.emit = function(a) {
      var c = Array.prototype.slice.call(arguments, 1), d = {event:a};
      if(this.anyOnce.length) {
        var b = this.anyOnce;
        this.anyOnce = [];
        for(var e = 0;e < b.length;e++) {
          b[e].apply(d, c)
        }
      }
      for(e = 0;e < this.any.length;e++) {
        this.any[e].apply(d, c)
      }
      if(b = this.eventsOnce[a]) {
        delete this.eventsOnce[a];
        for(e = 0;e < b.length;e++) {
          b[e].apply(d, c)
        }
      }
      if(b = this.events[a]) {
        for(e = 0;e < b.length;e++) {
          b[e].apply(d, c)
        }
      }
    };
    a.prototype.once = function(a, c) {
      1 == arguments.length && "function" == typeof a ? this.anyOnce.push(a) : null === a ? this.anyOnce.push(c) : (this.eventsOnce[a] = this.eventsOnce[a] || []).push(c)
    };
    return a
  }(), m = function() {
    function a() {
    }
    var h = "object" == typeof window;
    a.addProperties = a.mixin = function(c, a) {
      for(var b in a) {
        c[b] = a[b]
      }
      return c
    };
    a.copy = function(c) {
      return a.mixin({}, c)
    };
    a.isArray = function(c) {
      return"[object Array]" == Object.prototype.toString.call(c)
    };
    a.isEmpty = function(c) {
      for(var a in c) {
        return!1
      }
      return!0
    };
    a.shallowClone = function(c) {
      var a = {}, b;
      for(b in c) {
        a[b] = c[b]
      }
      return a
    };
    a.prototypicalClone = function(c, d) {
      function b() {
      }
      b.prototype = c;
      var e = new b;
      d && a.mixin(e, d);
      return e
    };
    a.inherits = function(c, a) {
      c.super_ = a;
      c.prototype = Object.create(a.prototype, {constructor:{value:c, enumerable:!1, writable:!0, configurable:!0}})
    };
    a.containsValue = function(a, d) {
      for(var b in a) {
        if(a[b] == d) {
          return!0
        }
      }
      return!1
    };
    a.intersect = function(c, d) {
      return Array.isArray(d) ? a.arrIntersect(c, d) : a.arrIntersectOb(c, d)
    };
    a.arrIntersect = function(a, d) {
      for(var b = [], e = 0;e < a.length;e++) {
        var g = a[e];
        -1 != d.indexOf(g) && b.push(g)
      }
      return b
    };
    a.arrIntersectOb = function(a, d) {
      for(var b = [], e = 0;e < a.length;e++) {
        var g = a[e];
        g in d && b.push(g)
      }
      return b
    };
    a.arrSubtract = function(a, d) {
      for(var b = [], e = 0;e < a.length;e++) {
        var g = a[e];
        -1 == d.indexOf(g) && b.push(g)
      }
      return b
    };
    a.keysArray = function(a, d) {
      var b = [], e;
      for(e in a) {
        (!d || a.hasOwnProperty(e)) && b.push(e)
      }
      return b.length ? b : void 0
    };
    a.valuesArray = function(a, d) {
      var b = [], e;
      for(e in a) {
        (!d || a.hasOwnProperty(e)) && b.push(a[e])
      }
      return b.length ? b : void 0
    };
    a.nextTick = h ? function(a) {
      setTimeout(a, 0)
    } : process.nextTick;
    a.defaultGetHeaders = function(a) {
      return{accept:a ? "application/x-thrift,application/json" : "application/json"}
    };
    a.defaultPostHeaders = function(a) {
      return{accept:a ? "application/x-thrift,application/json" : "application/json", "content-type":a ? "application/x-thrift" : "application/json"}
    };
    a.arrRandomElement = function(a) {
      return a.splice(Math.floor(Math.random() * a.length))
    };
    a.parseQueryString = function(a) {
      for(var d, b = /([^&=]+)=?([^&]*)/g, e = {};d = b.exec(a);) {
        e[decodeURIComponent(d[1])] = decodeURIComponent(d[2])
      }
      return e
    };
    return a
  }();
  (function() {
    function a(a) {
      q && console.log(a)
    }
    function h(a, f) {
      var b = f.host || "", e = f.tlshost || "", d = {key:a, encrypted:f.encrypted || !1};
      f.ablyClientId && (d.clientId = f.ablyClientId);
      f.authEndpoint && (d.authUrl = f.authEndpoint);
      f.auth && f.auth.params && (d.authParams = f.auth.params);
      f.auth && f.auth.headers && (d.authHeaders = f.auth.headers);
      b && 0 != b.length && (b = b.split(":"), d.host = d.wsHost = b[0], 1 < b.length && (d.port = b[1]));
      e && 0 != e.length ? (b = e.split(":"), d.tlsPort = 1 < b.length ? b[1] : 8081) : d.tlsPort = 8081;
      e = this.ably = new g.Realtime(d);
      this.clientId = d.clientId;
      this.connection = new c(e.connection);
      this.channels = {}
    }
    function c(a) {
      l.call(this);
      this.connection = a;
      var b = this;
      a.on(function(a) {
        var d = n[a.previous], e = b.state = n[a.current];
        b.emit(e);
        b.emit("state_change", {previous:d, current:e});
        a.retryIn && b.emit("connecting_in", a.retryIn)
      })
    }
    function d(b, d) {
      var c = this;
      this.active = !0;
      this.channel = b.ably.channels.get(d);
      this.name = d;
      if(this.isPresence = 0 == d.indexOf("presence-")) {
        this.members = new e(this, b.clientId)
      }
      this.channel.subscribe(function(b) {
        a("PusherChannel::message callback: Event object " + JSON.stringify(this) + ", message " + JSON.stringify(b));
        c.channel.emit(b.name, b.data)
      });
      this.bindings = {};
      this.bind_alls = [];
      if(this.isPresence) {
        var k = this.channel.presence;
        this.entered = !1;
        k.on("enter", function(a) {
          c.entered && a.clientId !== c.members.myID && (a = c.members.addMember(a.clientId, a.clientInfo)) && c.channel.emit("pusher:member_added", a)
        });
        k.on("leave", function(a) {
          c.entered && (a = c.members.removeMember(a.clientId)) && c.channel.emit("pusher:member_removed", a)
        });
        k.enter(function(a) {
          if(a = k.get()) {
            for(var b = 0;b < a.length;b++) {
              c.members.addMember(a[b].clientId, a[b].clientData)
            }
          }
          c.entered = !0;
          c._sendEvent("pusher:subscription_succeeded", c.members)
        })
      }
      this.channel.on(function(a) {
        "attached" === this.event && c.isPresence || ("undefined" === typeof a && (a = {}), c._sendEvent(r[this.event] || this.event, a))
      })
    }
    function b(a, b) {
      this.id = a;
      this.info = b
    }
    function e(a, b, c) {
      this.count = 0;
      this.members = {};
      b && (this.myID = b, this.me = this.addMember(b, c))
    }
    if("undefined" !== typeof window) {
      var g = window.Ably
    }else {
      if("undefined" === typeof g) {
        var g = require("../.."), s = require("fs"), t = require("path"), u = require("vm"), p = function(a) {
          a = t.resolve(__dirname, a);
          return u.runInThisContext(s.readFileSync(a, "utf8"), a)
        };
        "undefined" === typeof m && p("../../common/lib/util/utils.js");
        "undefined" === typeof l && p("../../common/lib/util/eventemitter.js")
      }
    }
    var q = !1, n = {initialized:"initialized", connecting:"connecting", connected:"connected", disconnected:"disconnected", suspended:"unavailable", closed:"disconnected", failed:"failed"}, r = {attached:"pusher:subscription_succeeded", failed:"pusher:subscription_error"};
    h.prototype.disconnect = function() {
      this.ably.close();
      delete this.ably
    };
    h.prototype.channel = function(a) {
      return this.channels[a]
    };
    h.prototype.subscribe = function(a) {
      return this.channels[a] = new d(this, a)
    };
    h.prototype.unsubscribe = function(a) {
      var b = this.channels[a];
      b && (b.channel.detach(), b.active = !1, delete this.channels[a])
    };
    m.inherits(c, l);
    c.prototype.bind = function() {
      this.on.apply(this, arguments)
    };
    c.prototype.unbind = function() {
      this.off.apply(this, arguments)
    };
    d.prototype._sendEvent = function(a, b) {
      for(var c = 0;c < this.bind_alls.length;c++) {
        this.bind_alls[c](a, b)
      }
      var d = this.bindings[a];
      if(d) {
        for(c = 0;c < d.length;c++) {
          d[c](b)
        }
      }
    };
    d.prototype.bind_all = function(a) {
      this.bind_alls.push(a)
    };
    d.prototype.unbind = function(b, c) {
      var d = this.bindings[b];
      a("PusherChannel::unbind: Unbinding callback from event " + b);
      if(d) {
        for(var e = 0;e < d.length;e++) {
          if(d[e] === c) {
            a("PusherChannel::unbind: Found callback record to remove");
            d.splice(e, 1);
            0 == d.length && (a("PusherChannel::unbind: All bindings for this event have been removed"), this.channel.off(b, this.channelBindCallback), delete this.bindings[b]);
            break
          }
        }
      }
    };
    d.prototype.bind = function(a, b) {
      this.bindings[a] ? this.bindings[a].push(b) : this.bindings[a] = [b]
    };
    d.prototype.trigger = function(b, c) {
      a("PusherChannel::trigger: Event " + b + ", data " + JSON.stringify(c));
      if(!this.active) {
        return a("PusherChannel::trigger: Inactive"), !0
      }
      this.channel.publish(b, c);
      return!0
    };
    e.prototype.addMember = function(a, c) {
      "undefined" === typeof c && (c = {});
      a in this.members ? this.members[a] = c : (this.members[a] = c, this.count++);
      return new b(a, c)
    };
    e.prototype.removeMember = function(a) {
      if(a in this.members) {
        var c = this.members[a];
        delete this.members[a];
        this.count--;
        return new b(a, c)
      }
    };
    e.prototype.each = function(a) {
      for(var c in this.members) {
        a(new b(c, this.members[c]))
      }
    };
    e.prototype.get = function(a) {
      return this.members[a]
    };
    "undefined" === typeof window ? module.exports = h : window.Pusher = h
  })()
})();
