(function() {
  for(var mb = ["web_socket", "flash_socket", "xhr", "jsonp"], ma = {disconnected:{statusCode:408, code:80003, reason:"Connection to server temporarily unavailable"}, suspended:{statusCode:408, code:80002, reason:"Connection to server unavailable"}, failed:{statusCode:408, code:8E4, reason:"Connection failed or disconnected by server"}}, Ba = function(a, b, c) {
    function f() {
    }
    f.prototype = b.prototype;
    a.prototype = new f;
    if(c) {
      for(var h in c) {
        a.prototype[h] = c[h]
      }
    }
  }, Ta = [], ea = 0;256 > ea;ea++) {
    Ta[ea] = (15 < ea ? "" : "0") + ea.toString(16)
  }
  var Z = function(a, b) {
    a instanceof Array ? (this.buffer = a, this.offset = b || 0) : (this.buffer = this.buffer || Array(8), this.offset = 0, this.setValue.apply(this, arguments))
  };
  Z.MAX_INT = Math.pow(2, 53);
  Z.MIN_INT = -Math.pow(2, 53);
  Z.prototype = {_2scomp:function() {
    for(var a = this.buffer, b = this.offset, c = 1, f = b + 7;f >= b;f--) {
      c = (a[f] ^ 255) + c, a[f] = c & 255, c >>= 8
    }
  }, setValue:function(a, b) {
    var c = !1;
    if(1 == arguments.length) {
      if("number" == typeof a) {
        c = 0 > a;
        a = Math.abs(a);
        b = a % 4294967296;
        a /= 4294967296;
        if(4294967296 < a) {
          throw new RangeError(a + " is outside Int64 range");
        }
        a |= 0
      }else {
        if("string" == typeof a) {
          a = (a + "").replace(/^0x/, ""), b = a.substr(-8), a = 8 < a.length ? a.substr(0, a.length - 8) : "", a = parseInt(a, 16), b = parseInt(b, 16)
        }else {
          throw Error(a + " must be a Number or String");
        }
      }
    }
    for(var f = this.buffer, h = this.offset, d = 7;0 <= d;d--) {
      f[h + d] = b & 255, b = 4 == d ? a : b >>> 8
    }
    c && this._2scomp()
  }, toNumber:function(a) {
    for(var b = this.buffer, c = this.offset, f = b[0] & 128, h = 0, d = 1, e = 7, q = 1;0 <= e;e--, q *= 256) {
      var l = b[c + e];
      f && (l = (l ^ 255) + d, d = l >> 8, l &= 255);
      h += l * q
    }
    return!a && h >= Z.MAX_INT ? f ? -Infinity : Infinity : f ? -h : h
  }, valueOf:function() {
    return this.toNumber(!1)
  }, toString:function(a) {
    return this.valueOf().toString(a || 10)
  }, toOctetString:function(a) {
    for(var b = Array(8), c = this.buffer, f = this.offset, h = 0;8 > h;h++) {
      b[h] = Ta[c[f + h]]
    }
    return b.join(a || "")
  }, inspect:function() {
    return"[Int64 value:" + this + " octets:" + this.toOctetString(" ") + "]"
  }};
  var d = {Version:"0.8.0", Type:{STOP:0, VOID:1, BOOL:2, BYTE:3, I08:3, DOUBLE:4, I16:6, I32:8, I64:10, STRING:11, UTF7:11, STRUCT:12, MAP:13, SET:14, LIST:15, UTF8:16, UTF16:17}, MessageType:{CALL:1, REPLY:2, EXCEPTION:3}, objectLength:function(a) {
    var b = 0, c;
    for(c in a) {
      a.hasOwnProperty(c) && b++
    }
    return b
  }, inherits:function(a, b) {
    function c() {
    }
    c.prototype = b.prototype;
    a.prototype = new c
  }, TException:function(a) {
    this.message = a
  }};
  d.inherits(d.TException, Error);
  d.TException.prototype.name = "TException";
  d.TApplicationExceptionType = {UNKNOWN:0, UNKNOWN_METHOD:1, INVALID_MESSAGE_TYPE:2, WRONG_METHOD_NAME:3, BAD_SEQUENCE_ID:4, MISSING_RESULT:5, INTERNAL_ERROR:6, PROTOCOL_ERROR:7};
  d.TApplicationException = function(a, b) {
    this.message = a;
    this.code = null === b ? 0 : b
  };
  d.inherits(d.TApplicationException, d.TException);
  d.TApplicationException.prototype.name = "TApplicationException";
  d.TApplicationException.prototype.read = function(a) {
    for(;;) {
      var b = a.readFieldBegin();
      if(b.ftype == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          b.ftype == d.Type.STRING ? (b = a.readString(), this.message = b.value) : a.skip(b.ftype);
          break;
        case 2:
          b.ftype == d.Type.I32 ? (b = a.readI32(), this.code = b.value) : a.skip(b.ftype);
          break;
        default:
          a.skip(b.ftype)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  d.TApplicationException.prototype.write = function(a) {
    a.writeStructBegin("TApplicationException");
    this.message && (a.writeFieldBegin("message", d.Type.STRING, 1), a.writeString(this.getMessage()), a.writeFieldEnd());
    this.code && (a.writeFieldBegin("type", d.Type.I32, 2), a.writeI32(this.code), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  d.TApplicationException.prototype.getCode = function() {
    return this.code
  };
  d.TApplicationException.prototype.getMessage = function() {
    return this.message
  };
  d.TXHRTransport = function(a) {
    this.url = a;
    this.rpos = this.wpos = 0;
    this.recv_buf = this.send_buf = ""
  };
  d.TXHRTransport.prototype = {getXmlHttpRequestObject:function() {
    try {
      return new XMLHttpRequest
    }catch(a) {
    }
    try {
      return new ActiveXObject("Msxml2.XMLHTTP")
    }catch(b) {
    }
    try {
      return new ActiveXObject("Microsoft.XMLHTTP")
    }catch(c) {
    }
    throw"Your browser doesn't support the XmlHttpRequest object.";
  }, flush:function(a) {
    if(a || void 0 === this.url || "" === this.url) {
      return this.send_buf
    }
    a = this.getXmlHttpRequestObject();
    a.overrideMimeType && a.overrideMimeType("application/json");
    a.open("POST", this.url, !1);
    a.send(this.send_buf);
    if(4 != a.readyState) {
      throw"encountered an unknown ajax ready state: " + a.readyState;
    }
    if(200 != a.status) {
      throw"encountered a unknown request status: " + a.status;
    }
    this.recv_buf = a.responseText;
    this.wpos = this.recv_buf_sz = this.recv_buf.length;
    this.rpos = 0
  }, jqRequest:function(a, b, c, f) {
    if("undefined" === typeof jQuery || "undefined" === typeof jQuery.Deferred) {
      throw"Thrift.js requires jQuery 1.5+ to use asynchronous requests";
    }
    var h = jQuery.Deferred(), d = jQuery._Deferred(), e = h.promise();
    e.success = e.done;
    e.error = e.fail;
    e.complete = d.done;
    b = jQuery.ajax({url:this.url, data:b, type:"POST", cache:!1, dataType:"text", context:this, success:this.jqResponse, error:function(b, c, f) {
      h.rejectWith(a, jQuery.merge([f], b.tArgs))
    }, complete:function(b, c) {
      d.resolveWith(a, [b, c])
    }});
    h.done(jQuery.makeArray(c).pop());
    b.tArgs = c;
    b.tClient = a;
    b.tRecvFn = f;
    b.tDfd = h;
    return e
  }, jqResponse:function(a, b, c) {
    this.setRecvBuffer(a);
    try {
      var f = c.tRecvFn.call(c.tClient);
      c.tDfd.resolveWith(c, jQuery.merge([f], c.tArgs))
    }catch(h) {
      c.tDfd.rejectWith(c, jQuery.merge([h], c.tArgs))
    }
  }, setRecvBuffer:function(a) {
    this.recv_buf = a;
    this.wpos = this.recv_buf_sz = this.recv_buf.length;
    this.rpos = 0
  }, isOpen:function() {
    return!0
  }, open:function() {
  }, close:function() {
  }, read:function(a) {
    var b = this.wpos - this.rpos;
    if(0 === b) {
      return""
    }
    var c = a;
    b < a && (c = b);
    a = this.read_buf.substr(this.rpos, c);
    this.rpos += c;
    return a
  }, readAll:function() {
    return this.recv_buf
  }, write:function(a) {
    this.send_buf = a
  }, getSendBuffer:function() {
    return this.send_buf
  }};
  d.TStringTransport = function(a, b) {
    this.send_buf = "";
    this.recv_buf = a || "";
    this.onFlush = b
  };
  d.TStringTransport.prototype = {flush:function() {
    if(this.onFlush) {
      this.onFlush(this.send_buf)
    }
  }, isOpen:function() {
    return!0
  }, open:function() {
  }, close:function() {
  }, read:function() {
    return this.recv_buf
  }, readAll:function() {
    return this.recv_buf
  }, write:function(a) {
    this.send_buf = a
  }};
  d.Protocol = function(a) {
    this.transport = a
  };
  d.Protocol.Type = {};
  d.Protocol.Type[d.Type.BOOL] = '"tf"';
  d.Protocol.Type[d.Type.BYTE] = '"i8"';
  d.Protocol.Type[d.Type.I16] = '"i16"';
  d.Protocol.Type[d.Type.I32] = '"i32"';
  d.Protocol.Type[d.Type.I64] = '"i64"';
  d.Protocol.Type[d.Type.DOUBLE] = '"dbl"';
  d.Protocol.Type[d.Type.STRUCT] = '"rec"';
  d.Protocol.Type[d.Type.STRING] = '"str"';
  d.Protocol.Type[d.Type.MAP] = '"map"';
  d.Protocol.Type[d.Type.LIST] = '"lst"';
  d.Protocol.Type[d.Type.SET] = '"set"';
  d.Protocol.RType = {};
  d.Protocol.RType.tf = d.Type.BOOL;
  d.Protocol.RType.i8 = d.Type.BYTE;
  d.Protocol.RType.i16 = d.Type.I16;
  d.Protocol.RType.i32 = d.Type.I32;
  d.Protocol.RType.i64 = d.Type.I64;
  d.Protocol.RType.dbl = d.Type.DOUBLE;
  d.Protocol.RType.rec = d.Type.STRUCT;
  d.Protocol.RType.str = d.Type.STRING;
  d.Protocol.RType.map = d.Type.MAP;
  d.Protocol.RType.lst = d.Type.LIST;
  d.Protocol.RType.set = d.Type.SET;
  d.Protocol.Version = 1;
  d.Protocol.prototype = {getTransport:function() {
    return this.transport
  }, writeMessageBegin:function(a, b, c) {
    this.tstack = [];
    this.tpos = [];
    this.tstack.push([d.Protocol.Version, '"' + a + '"', b, c])
  }, writeMessageEnd:function() {
    var a = this.tstack.pop();
    this.wobj = this.tstack.pop();
    this.wobj.push(a);
    this.wbuf = "[" + this.wobj.join(",") + "]";
    this.transport.write(this.wbuf)
  }, writeStructBegin:function() {
    this.tpos.push(this.tstack.length);
    this.tstack.push({})
  }, writeStructEnd:function() {
    var a = this.tpos.pop(), b = this.tstack[a], c = "{", f = !0, h;
    for(h in b) {
      f ? f = !1 : c += ",", c += h + ":" + b[h]
    }
    this.tstack[a] = c + "}"
  }, writeFieldBegin:function(a, b, c) {
    this.tpos.push(this.tstack.length);
    this.tstack.push({fieldId:'"' + c + '"', fieldType:d.Protocol.Type[b]})
  }, writeFieldEnd:function() {
    var a = this.tstack.pop(), b = this.tstack.pop();
    this.tstack[this.tstack.length - 1][b.fieldId] = "{" + b.fieldType + ":" + a + "}";
    this.tpos.pop()
  }, writeFieldStop:function() {
  }, writeMapBegin:function(a, b) {
    this.tpos.push(this.tstack.length);
    this.tstack.push([d.Protocol.Type[a], d.Protocol.Type[b], 0])
  }, writeMapEnd:function() {
    var a = this.tpos.pop();
    if(a != this.tstack.length) {
      0 !== (this.tstack.length - a - 1) % 2 && this.tstack.push("");
      this.tstack[a][this.tstack[a].length - 1] = (this.tstack.length - a - 1) / 2;
      for(var b = "}", c = !0;this.tstack.length > a + 1;) {
        var f = this.tstack.pop(), h = this.tstack.pop();
        c ? c = !1 : b = "," + b;
        isNaN(h) || (h = '"' + h + '"');
        b = h + ":" + f + b
      }
      this.tstack[a].push("{" + b);
      this.tstack[a] = "[" + this.tstack[a].join(",") + "]"
    }
  }, writeListBegin:function(a, b) {
    this.tpos.push(this.tstack.length);
    this.tstack.push([d.Protocol.Type[a], b])
  }, writeListEnd:function() {
    for(var a = this.tpos.pop();this.tstack.length > a + 1;) {
      var b = this.tstack[a + 1];
      this.tstack.splice(a + 1, 1);
      this.tstack[a].push(b)
    }
    this.tstack[a] = "[" + this.tstack[a].join(",") + "]"
  }, writeSetBegin:function(a, b) {
    this.tpos.push(this.tstack.length);
    this.tstack.push([d.Protocol.Type[a], b])
  }, writeSetEnd:function() {
    for(var a = this.tpos.pop();this.tstack.length > a + 1;) {
      var b = this.tstack[a + 1];
      this.tstack.splice(a + 1, 1);
      this.tstack[a].push(b)
    }
    this.tstack[a] = "[" + this.tstack[a].join(",") + "]"
  }, writeBool:function(a) {
    this.tstack.push(a ? 1 : 0)
  }, writeByte:function(a) {
    this.tstack.push(a)
  }, writeI16:function(a) {
    this.tstack.push(a)
  }, writeI32:function(a) {
    this.tstack.push(a)
  }, writeI64:function(a) {
    this.tstack.push(a)
  }, writeDouble:function(a) {
    this.tstack.push(a)
  }, writeString:function(a) {
    if(null === a) {
      this.tstack.push(null)
    }else {
      for(var b = "", c = 0;c < a.length;c++) {
        var f = a.charAt(c), b = '"' === f ? b + '\\"' : "\\" === f ? b + "\\\\" : "\b" === f ? b + "\\b" : "\f" === f ? b + "\\f" : "\n" === f ? b + "\\n" : "\r" === f ? b + "\\r" : "\t" === f ? b + "\\t" : b + f
      }
      this.tstack.push('"' + b + '"')
    }
  }, writeBinary:function(a) {
    this.writeString(a)
  }, readMessageBegin:function() {
    this.rstack = [];
    this.rpos = [];
    this.robj = "undefined" !== typeof jQuery ? jQuery.parseJSON(this.transport.readAll()) : eval(this.transport.readAll());
    var a = {}, b = this.robj.shift();
    if(b != d.Protocol.Version) {
      throw"Wrong thrift protocol version: " + b;
    }
    a.fname = this.robj.shift();
    a.mtype = this.robj.shift();
    a.rseqid = this.robj.shift();
    this.rstack.push(this.robj.shift());
    return a
  }, readMessageEnd:function() {
  }, readStructBegin:function() {
    this.rstack[this.rstack.length - 1] instanceof Array && this.rstack.push(this.rstack[this.rstack.length - 1].shift());
    return{fname:""}
  }, readStructEnd:function() {
    this.rstack[this.rstack.length - 2] instanceof Array && this.rstack.pop()
  }, readFieldBegin:function() {
    var a = {}, b = -1, c = d.Type.STOP, f;
    for(f in this.rstack[this.rstack.length - 1]) {
      if(null !== f) {
        b = parseInt(f, 10);
        this.rpos.push(this.rstack.length);
        f = this.rstack[this.rstack.length - 1][b];
        delete this.rstack[this.rstack.length - 1][b];
        this.rstack.push(f);
        break
      }
    }
    if(-1 != b) {
      for(var h in this.rstack[this.rstack.length - 1]) {
        null !== d.Protocol.RType[h] && (c = d.Protocol.RType[h], this.rstack[this.rstack.length - 1] = this.rstack[this.rstack.length - 1][h])
      }
    }
    a.fname = "";
    a.ftype = c;
    a.fid = b;
    return a
  }, readFieldEnd:function() {
    for(var a = this.rpos.pop();this.rstack.length > a;) {
      this.rstack.pop()
    }
  }, readMapBegin:function() {
    var a = this.rstack.pop(), b = {};
    b.ktype = d.Protocol.RType[a.shift()];
    b.vtype = d.Protocol.RType[a.shift()];
    b.size = a.shift();
    this.rpos.push(this.rstack.length);
    this.rstack.push(a.shift());
    return b
  }, readMapEnd:function() {
    this.readFieldEnd()
  }, readListBegin:function() {
    var a = this.rstack[this.rstack.length - 1], b = {};
    b.etype = d.Protocol.RType[a.shift()];
    b.size = a.shift();
    this.rpos.push(this.rstack.length);
    this.rstack.push(a);
    return b
  }, readListEnd:function() {
    this.readFieldEnd()
  }, readSetBegin:function(a, b) {
    return this.readListBegin(a, b)
  }, readSetEnd:function() {
    return this.readListEnd()
  }, readBool:function() {
    var a = this.readI32();
    a.value = null !== a && "1" == a.value ? !0 : !1;
    return a
  }, readByte:function() {
    return this.readI32()
  }, readI16:function() {
    return this.readI32()
  }, readI32:function(a) {
    void 0 === a && (a = this.rstack[this.rstack.length - 1]);
    var b = {};
    if(a instanceof Array) {
      b.value = 0 === a.length ? void 0 : a.shift()
    }else {
      if(a instanceof Object) {
        for(var c in a) {
          if(null !== c) {
            this.rstack.push(a[c]);
            delete a[c];
            b.value = c;
            break
          }
        }
      }else {
        b.value = a, this.rstack.pop()
      }
    }
    return b
  }, readI64:function() {
    return this.readI32()
  }, readDouble:function() {
    return this.readI32()
  }, readString:function() {
    return this.readI32()
  }, readBinary:function() {
    return this.readString()
  }, skip:function() {
    throw"skip not supported yet";
  }};
  d.TJSONProtocol = function(a) {
    this.transport = a;
    this.reset()
  };
  d.TJSONProtocol.Type = {};
  d.TJSONProtocol.Type[d.Type.BOOL] = "tf";
  d.TJSONProtocol.Type[d.Type.BYTE] = "i8";
  d.TJSONProtocol.Type[d.Type.I16] = "i16";
  d.TJSONProtocol.Type[d.Type.I32] = "i32";
  d.TJSONProtocol.Type[d.Type.I64] = "i64";
  d.TJSONProtocol.Type[d.Type.DOUBLE] = "dbl";
  d.TJSONProtocol.Type[d.Type.STRUCT] = "rec";
  d.TJSONProtocol.Type[d.Type.STRING] = "str";
  d.TJSONProtocol.Type[d.Type.MAP] = "map";
  d.TJSONProtocol.Type[d.Type.LIST] = "lst";
  d.TJSONProtocol.Type[d.Type.SET] = "set";
  d.TJSONProtocol.getValueFromScope = function(a) {
    var b = a.listvalue;
    return b ? b.shift() : a.value
  };
  d.TJSONProtocol.getScopeFromScope = function(a) {
    var b = a.listvalue;
    b && (a = {value:b.shift()});
    return a
  };
  d.TJSONProtocol.prototype = {reset:function() {
    this.elementStack = []
  }, writeMessageBegin:function() {
    throw Error("TJSONProtocol: Message not supported");
  }, writeMessageEnd:function() {
  }, writeStructBegin:function() {
    this.elementStack.unshift({})
  }, writeStructEnd:function() {
    var a = this.elementStack.shift();
    0 == this.elementStack.length ? this.transport.write(JSON.stringify(a)) : this.elementStack[0].value.push(a)
  }, writeFieldBegin:function(a, b, c) {
    this.elementStack.unshift({name:a, fieldType:d.TJSONProtocol.Type[b], fieldId:c, value:[]})
  }, writeFieldEnd:function() {
    var a = this.elementStack.shift(), b = {};
    b[a.fieldType] = a.value[0];
    this.elementStack[0][a.fieldId] = b
  }, writeFieldStop:function() {
  }, writeMapBegin:function(a, b, c) {
    this.elementStack.unshift({value:[d.TJSONProtocol.Type[a], d.TJSONProtocol.Type[b], c]})
  }, writeMapEnd:function() {
    var a = this.elementStack.shift();
    this.elementStack[0].value.push(a.value)
  }, writeListBegin:function(a, b) {
    this.elementStack.unshift({name:name, value:[d.TJSONProtocol.Type[a], b]})
  }, writeListEnd:function() {
    var a = this.elementStack.shift();
    this.elementStack[0].value.push(a.value)
  }, writeSetBegin:function(a, b) {
    this.elementStack.unshift({name:name, value:[d.TJSONProtocol.Type[a], b]})
  }, writeSetEnd:function() {
    var a = this.elementStack.shift();
    this.elementStack[0].value.push(a.value)
  }, writeBool:function(a) {
    this.elementStack[0].value.push(a ? 1 : 0)
  }, writeByte:function(a) {
    this.elementStack[0].value.push(a)
  }, writeI16:function(a) {
    this.elementStack[0].value.push(a)
  }, writeI32:function(a) {
    this.elementStack[0].value.push(a)
  }, writeI64:function(a) {
    this.elementStack[0].value.push(a)
  }, writeDouble:function(a) {
    this.elementStack[0].value.push(a)
  }, writeString:function(a) {
    this.elementStack[0].value.push(a)
  }, writeBinary:function(a) {
    this.elementStack[0].value.push(a)
  }, readMessageBegin:function() {
    throw Error("TJSONProtocol: Message not supported");
  }, readMessageEnd:function() {
  }, readStructBegin:function() {
    var a;
    a = 0 == this.elementStack.length ? JSON.parse(this.transport.readAll()) : d.TJSONProtocol.getValueFromScope(this.elementStack[0]);
    var b = [], c;
    for(c in a) {
      b.push(c)
    }
    this.elementStack.unshift({fields:b, value:a});
    return{fname:""}
  }, readStructEnd:function() {
    this.elementStack.shift()
  }, readFieldBegin:function() {
    var a = this.elementStack[0], b = d.TJSONProtocol.getValueFromScope(a), a = a.fields.shift();
    if(!a) {
      return{fname:"", ftype:d.Type.STOP}
    }
    var b = b[a], c;
    for(c in b) {
      return this.elementStack.unshift({value:b[c]}), {fname:"", fid:Number(a), ftype:d.Protocol.RType[c]}
    }
    throw Error("TJSONProtocol: parse error reading field value");
  }, readFieldEnd:function() {
    this.elementStack.shift()
  }, readMapBegin:function() {
    var a = d.TJSONProtocol.getValueFromScope(this.elementStack[0]), b = {ktype:d.Protocol.RType[a.shift()], vtype:d.Protocol.RType[a.shift()], size:a.shift()};
    this.elementStack.unshift({listvalue:a});
    return b
  }, readMapEnd:function() {
    this.elementStack.shift()
  }, readListBegin:function() {
    var a = d.TJSONProtocol.getValueFromScope(this.elementStack[0]), b = {etype:d.Protocol.RType[a.shift()], size:a.shift()};
    this.elementStack.unshift({listvalue:a});
    return b
  }, readListEnd:function() {
    this.elementStack.shift()
  }, readSetBegin:function() {
    var a = d.TJSONProtocol.getValueFromScope(this.elementStack[0]), b = {etype:d.Protocol.RType[a.shift()], size:a.shift()};
    this.elementStack.unshift({listvalue:a});
    return b
  }, readSetEnd:function() {
    this.elementStack.shift()
  }, readBool:function() {
    return!!d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readByte:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readI16:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readI32:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readI64:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readDouble:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readString:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readBinary:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, flush:function() {
    this.transport.flush()
  }};
  var Ca = {encode:function(a, b, c) {
    for(var f = c, h = 0;h < a.length;h++) {
      var d = a.charCodeAt(h);
      128 > d ? b.setInt8(f++, d) : (127 < d && 2048 > d ? b.setInt8(f++, d >> 6 | 192) : (b.setInt8(f++, d >> 12 | 224), b.setInt8(f++, d >> 6 & 63 | 128)), b.setInt8(f++, d & 63 | 128))
    }
    return f - c
  }, decode:function(a, b, c) {
    for(var f = "", d = b, c = c + b, b = c1 = c2 = 0;d < c;) {
      b = a.getInt8(d++), 128 > b ? f += String.fromCharCode(b) : 191 < b && 224 > b ? (c2 = a.getInt8(d++), f += String.fromCharCode((b & 31) << 6 | c2 & 63)) : (c2 = a.getInt8(d++), c3 = a.getInt8(d++), f += String.fromCharCode((b & 15) << 12 | (c2 & 63) << 6 | c3 & 63))
    }
    return f
  }}, B = function(a) {
    this.offset = 0;
    if(this.length = a) {
      a = this.buf = new ArrayBuffer(a), this.view = new DataView(a)
    }
  };
  B.prototype = {getArray:function() {
    this.array || (this.array = new Uint8Array(this.buf, this.offset, this.length));
    return this.array
  }, slice:function(a, b) {
    var a = a || 0, b = b || this.length, c = new B, f = c.length = b - a, d = c.offset = this.offset + a, e = c.buf = this.buf;
    c.view = new DataView(e, d, f);
    return c
  }, getInt8:function(a) {
    return this.view.getInt8(a)
  }, getInt16:function(a) {
    return this.view.getInt16(a, !1)
  }, getInt32:function(a) {
    return this.view.getInt32(a, !1)
  }, getInt64:function(a) {
    var b = this.view.getInt32(a, !1), a = this.view.getUint32(a + 4, !1);
    return new Z(b, a)
  }, getFloat64:function(a) {
    return this.view.getFloat64(a, !1)
  }, getUtf8String:function(a, b) {
    return Ca.decode(this.view, a, b)
  }, setInt8:function(a, b) {
    this.view.setInt8(a, b)
  }, setInt16:function(a, b) {
    this.view.setInt16(a, b, !1)
  }, setInt32:function(a, b) {
    this.view.setInt32(a, b, !1)
  }, setInt64:function(a, b) {
    this.getArray().set(b.buffer, a)
  }, setFloat64:function(a, b) {
    this.view.setFloat64(a, b, !1)
  }, setBuffer:function(a, b) {
    this.getArray().set(b.getArray(), a)
  }, setUtf8String:function(a, b) {
    return Ca.encode(b, this.view, a)
  }, inspect:function() {
    for(var a = "length: " + this.length + "\n", b = 0;b < this.length;) {
      for(var c = 0;b < this.length && 32 > c;c++) {
        a += this.view.getInt8(b++).toString(16) + " "
      }
      a += "\n"
    }
    return a
  }};
  var nb = d.CheckedBuffer = function(a) {
    B.call(this, a)
  };
  Ba(nb, B, {grow:function(a) {
    var a = this.length + Math.max(a || 0, 0.41 * this.length), b = getArray();
    this.buf = new ArrayBuffer(a);
    this.view = new DataView(this.buf);
    this.getArray().set(b);
    this.offset = 0;
    this.length = a
  }, checkAvailable:function(a, b) {
    a + b >= this.length && this.grow(b)
  }, setInt8:function(a, b) {
    this.checkAvailable(1);
    this.view.setInt8(a, b)
  }, setInt16:function(a, b) {
    this.checkAvailable(2);
    this.view.setInt16(a, b, !1)
  }, setInt32:function(a, b) {
    this.checkAvailable(4);
    this.view.setInt32(a, b, !1)
  }, setInt64:function(a, b) {
    this.checkAvailable(8);
    this.getArray().set(b.buffer, a)
  }, setFloat64:function(a, b) {
    this.checkAvailable(8);
    this.view.setFloat64(a, b, !1)
  }, setBuffer:function(a, b) {
    this.checkAvailable(b.length);
    this.getArray().set(b.getArray(), a)
  }, setUtf8String:function(a, b) {
    for(;;) {
      try {
        return Ca.encode(b, this.view, a)
      }catch(c) {
        this.grow()
      }
    }
  }});
  var y = d.Type, Da = function(a, b) {
    Error.call(this, b);
    this.name = "TProtocolException";
    this.type = a
  };
  Ba(Da, Error);
  var j = d.TBinaryProtocol = function(a, b, c) {
    this.trans = a;
    this.strictRead = void 0 !== b ? b : !1;
    this.strictWrite = void 0 !== c ? c : !0
  };
  j.prototype.flush = function() {
    return this.trans.flush()
  };
  j.prototype.writeMessageBegin = function(a, b, c) {
    this.strictWrite ? (this.writeI32(-2147418112 | b), this.writeString(a)) : (this.writeString(a), this.writeByte(b));
    this.writeI32(c)
  };
  j.prototype.writeMessageEnd = function() {
  };
  j.prototype.writeStructBegin = function() {
  };
  j.prototype.writeStructEnd = function() {
  };
  j.prototype.writeFieldBegin = function(a, b, c) {
    this.writeByte(b);
    this.writeI16(c)
  };
  j.prototype.writeFieldEnd = function() {
  };
  j.prototype.writeFieldStop = function() {
    this.writeByte(y.STOP)
  };
  j.prototype.writeMapBegin = function(a, b, c) {
    this.writeByte(a);
    this.writeByte(b);
    this.writeI32(c)
  };
  j.prototype.writeMapEnd = function() {
  };
  j.prototype.writeListBegin = function(a, b) {
    this.writeByte(a);
    this.writeI32(b)
  };
  j.prototype.writeListEnd = function() {
  };
  j.prototype.writeSetBegin = function(a, b) {
    this.writeByte(a);
    this.writeI32(b)
  };
  j.prototype.writeSetEnd = function() {
  };
  j.prototype.writeBool = function(a) {
    this.writeByte(a ? 1 : 0)
  };
  j.prototype.writeByte = function(a) {
    this.trans.writeByte(a)
  };
  j.prototype.writeI16 = function(a) {
    this.trans.writeI16(a)
  };
  j.prototype.writeI32 = function(a) {
    this.trans.writeI32(a)
  };
  j.prototype.writeI64 = function(a) {
    a.buffer ? this.trans.writeI64(a) : this.trans.writeI64(new Z(a))
  };
  j.prototype.writeDouble = function(a) {
    this.trans.writeDouble(a)
  };
  j.prototype.writeString = function(a) {
    this.trans.writeWithLength(a)
  };
  j.prototype.writeBinary = function(a) {
    this.trans.writeWithLength(a)
  };
  j.prototype.readMessageBegin = function() {
    var a = this.readI32(), b, c;
    if(0 > a) {
      b = a & -65536;
      if(-2147418112 != b) {
        throw console.log("BAD: " + b), Da(4, "Bad version in readMessageBegin: " + a);
      }
      a &= 255;
      b = this.readString()
    }else {
      if(this.strictRead) {
        throw Da(4, "No protocol version header");
      }
      b = this.trans.read(a);
      a = this.readByte()
    }
    c = this.readI32();
    return{fname:b, mtype:a, rseqid:c}
  };
  j.prototype.readMessageEnd = function() {
  };
  j.prototype.readStructBegin = function() {
    return{fname:""}
  };
  j.prototype.readStructEnd = function() {
  };
  j.prototype.readFieldBegin = function() {
    var a = this.readByte();
    if(a == y.STOP) {
      return{fname:null, ftype:a, fid:0}
    }
    var b = this.readI16();
    return{fname:null, ftype:a, fid:b}
  };
  j.prototype.readFieldEnd = function() {
  };
  j.prototype.readMapBegin = function() {
    var a = this.readByte(), b = this.readByte(), c = this.readI32();
    return{ktype:a, vtype:b, size:c}
  };
  j.prototype.readMapEnd = function() {
  };
  j.prototype.readListBegin = function() {
    var a = this.readByte(), b = this.readI32();
    return{etype:a, size:b}
  };
  j.prototype.readListEnd = function() {
  };
  j.prototype.readSetBegin = function() {
    var a = this.readByte(), b = this.readI32();
    return{etype:a, size:b}
  };
  j.prototype.readSetEnd = function() {
  };
  j.prototype.readBool = function() {
    return 0 == this.readByte() ? !1 : !0
  };
  j.prototype.readByte = function() {
    return this.trans.readByte()
  };
  j.prototype.readI16 = function() {
    return this.trans.readI16()
  };
  j.prototype.readI32 = function() {
    return this.trans.readI32()
  };
  j.prototype.readI64 = function() {
    return this.trans.readI64()
  };
  j.prototype.readDouble = function() {
    return this.trans.readDouble()
  };
  j.prototype.readBinary = function() {
    var a = this.readI32();
    return this.trans.read(a)
  };
  j.prototype.readString = function() {
    var a = this.readI32();
    return this.trans.readString(a)
  };
  j.prototype.getTransport = function() {
    return this.trans
  };
  j.prototype.skip = function(a) {
    switch(a) {
      case y.STOP:
        break;
      case y.BOOL:
        this.readBool();
        break;
      case y.BYTE:
        this.readByte();
        break;
      case y.I16:
        this.readI16();
        break;
      case y.I32:
        this.readI32();
        break;
      case y.I64:
        this.readI64();
        break;
      case y.DOUBLE:
        this.readDouble();
        break;
      case y.STRING:
        this.readString();
        break;
      case y.STRUCT:
        for(this.readStructBegin();;) {
          a = this.readFieldBegin();
          if(a.ftype === y.STOP) {
            break
          }
          this.skip(a.ftype);
          this.readFieldEnd()
        }
        this.readStructEnd();
        break;
      case y.MAP:
        for(var a = this.readMapBegin(), b = 0;b < a.size;++b) {
          this.skip(a.ktype), this.skip(a.vtype)
        }
        this.readMapEnd();
        break;
      case y.SET:
        a = this.readSetBegin();
        for(b = 0;b < a.size;++b) {
          this.skip(a.etype)
        }
        this.readSetEnd();
        break;
      case y.LIST:
        a = this.readListBegin();
        for(b = 0;b < a.size;++b) {
          this.skip(a.etype)
        }
        this.readListEnd();
        break;
      default:
        throw Error("Invalid type: " + a);
    }
  };
  var ob = new B(0), $ = d.TTransport = function(a, b) {
    this.buf = a || ob;
    this.onFlush = b;
    this.reset()
  };
  $.receiver = function(a) {
    return function(b) {
      a(new $(b))
    }
  };
  $.prototype = {commitPosition:function() {
  }, rollbackPosition:function() {
  }, reset:function() {
    this.pos = 0
  }, isOpen:function() {
    return!0
  }, open:function() {
  }, close:function() {
  }, read:function(a) {
    var b = this.pos + a;
    if(this.buf.length < b) {
      throw Error("read(" + a + ") failed - not enough data");
    }
    a = this.buf.slice(this.pos, b);
    this.pos = b;
    return a
  }, readByte:function() {
    return this.buf.getInt8(this.pos++)
  }, readI16:function() {
    var a = this.buf.getInt16(this.pos);
    this.pos += 2;
    return a
  }, readI32:function() {
    var a = this.buf.getInt32(this.pos);
    this.pos += 4;
    return a
  }, readDouble:function() {
    var a = this.buf.getFloat64(this.pos);
    this.pos += 8;
    return a
  }, readString:function(a) {
    var b = this.buf.getUtf8String(this.pos, a);
    this.pos += a;
    return b
  }, readAll:function() {
    return this.buf
  }, writeByte:function(a) {
    this.buf.setInt8(this.pos++, a)
  }, writeI16:function(a) {
    this.buf.setInt16(this.pos, a);
    this.pos += 2
  }, writeI32:function(a) {
    this.buf.setInt32(this.pos, a);
    this.pos += 4
  }, writeI64:function(a) {
    this.buf.setInt64(this.pos, a);
    this.pos += 8
  }, writeDouble:function(a) {
    this.buf.setFloat64(this.pos, a);
    this.pos += 8
  }, write:function(a) {
    "string" === typeof a ? this.pos += this.setUtf8String(this.pos, a) : (this.setBuffer(this.pos, a), this.pos += a.length)
  }, writeWithLength:function(a) {
    "string" === typeof a ? a = this.buf.setUtf8String(this.pos + 4, a) : (this.setBuffer(this.pos + 4, a), a = a.length);
    this.buf.setInt32(this.pos, a);
    this.pos += a + 4
  }, flush:function(a) {
    if(a = a || this.onFlush) {
      var b = this.buf.slice(0, this.pos);
      a(b)
    }
  }};
  var Ea = d.TFramedTransport = function(a, b) {
    $.call(this, a, b)
  };
  Ea.receiver = function(a) {
    var b = 0, c = 0, f = null, d = null;
    return function(e) {
      if(d) {
        var n = new B(e.length + d.length);
        d.copy(n, 0, 0);
        e.copy(n, d.length, 0);
        d = null
      }
      for(;e.length;) {
        if(0 === b) {
          if(4 > e.length) {
            console.log("Expecting > 4 bytes, found only " + e.length);
            d = e;
            break
          }
          b = binary.readI32(e, 0);
          f = new B(b);
          c = 0;
          e = e.slice(4, e.length)
        }
        e.length >= b ? (e.copy(f, c, 0, b), e = e.slice(b, e.length), b = 0, a(new Ea(f))) : e.length && (e.copy(f, c, 0, e.length), b -= e.length, c += e.length, e = e.slice(e.length, e.length))
      }
    }
  };
  Ba(Ea, $, {flush:function() {
    var a = this;
    $.prototype.flush.call(this, function(b) {
      if(a.onFlush) {
        var c = new B(b.length + 4);
        binary.writeI32(c, b.length);
        b.copy(c, 4, 0, b.length);
        a.onFlush(c)
      }
    })
  }});
  var R, S, T, aa, fa;
  TAction = {HEARTBEAT:0, CONNECT:1, CONNECTED:2, ERROR:3, ATTACH:4, ATTACHED:5, DETACH:6, DETACHED:7, SUBSCRIBE:8, SUBSCRIBED:9, UNSUBSCRIBE:10, UNSUBSCRIBED:11, PRESENCE:12, EVENT:13};
  TType = {NONE:0, TRUE:1, FALSE:2, INT32:3, INT64:4, DOUBLE:5, STRING:6, BUFFER:7, JSONARRAY:8, JSONOBJECT:9};
  TPresenceState = {ENTER:0, LEAVE:1};
  R = function(a) {
    this.binaryData = this.stringData = this.doubleData = this.i64Data = this.i32Data = this.type = null;
    a && (void 0 !== a.type && (this.type = a.type), void 0 !== a.i32Data && (this.i32Data = a.i32Data), void 0 !== a.i64Data && (this.i64Data = a.i64Data), void 0 !== a.doubleData && (this.doubleData = a.doubleData), void 0 !== a.stringData && (this.stringData = a.stringData), void 0 !== a.binaryData && (this.binaryData = a.binaryData))
  };
  R.prototype = {};
  R.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.I32 ? this.type = a.readI32() : a.skip(c);
          break;
        case 2:
          c == d.Type.I32 ? this.i32Data = a.readI32() : a.skip(c);
          break;
        case 3:
          c == d.Type.I64 ? this.i64Data = a.readI64() : a.skip(c);
          break;
        case 4:
          c == d.Type.DOUBLE ? this.doubleData = a.readDouble() : a.skip(c);
          break;
        case 5:
          c == d.Type.STRING ? this.stringData = a.readString() : a.skip(c);
          break;
        case 6:
          c == d.Type.STRING ? this.binaryData = a.readBinary() : a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  R.prototype.write = function(a) {
    a.writeStructBegin("TData");
    null !== this.type && (a.writeFieldBegin("type", d.Type.I32, 1), a.writeI32(this.type), a.writeFieldEnd());
    null !== this.i32Data && (a.writeFieldBegin("i32Data", d.Type.I32, 2), a.writeI32(this.i32Data), a.writeFieldEnd());
    null !== this.i64Data && (a.writeFieldBegin("i64Data", d.Type.I64, 3), a.writeI64(this.i64Data), a.writeFieldEnd());
    null !== this.doubleData && (a.writeFieldBegin("doubleData", d.Type.DOUBLE, 4), a.writeDouble(this.doubleData), a.writeFieldEnd());
    null !== this.stringData && (a.writeFieldBegin("stringData", d.Type.STRING, 5), a.writeString(this.stringData), a.writeFieldEnd());
    null !== this.binaryData && (a.writeFieldBegin("binaryData", d.Type.STRING, 6), a.writeString(this.binaryData), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  S = function(a) {
    this.clientData = this.clientId = this.state = null;
    a && (void 0 !== a.state && (this.state = a.state), void 0 !== a.clientId && (this.clientId = a.clientId), void 0 !== a.clientData && (this.clientData = a.clientData))
  };
  S.prototype = {};
  S.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.I32 ? this.state = a.readI32() : a.skip(c);
          break;
        case 2:
          c == d.Type.STRING ? this.clientId = a.readString() : a.skip(c);
          break;
        case 3:
          c == d.Type.STRUCT ? (this.clientData = new R, this.clientData.read(a)) : a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  S.prototype.write = function(a) {
    a.writeStructBegin("TPresence");
    null !== this.state && (a.writeFieldBegin("state", d.Type.I32, 1), a.writeI32(this.state), a.writeFieldEnd());
    null !== this.clientId && (a.writeFieldBegin("clientId", d.Type.STRING, 2), a.writeString(this.clientId), a.writeFieldEnd());
    null !== this.clientData && (a.writeFieldBegin("clientData", d.Type.STRUCT, 3), this.clientData.write(a), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  T = function(a) {
    this.tags = this.data = this.timestamp = this.clientId = this.name = null;
    a && (void 0 !== a.name && (this.name = a.name), void 0 !== a.clientId && (this.clientId = a.clientId), void 0 !== a.timestamp && (this.timestamp = a.timestamp), void 0 !== a.data && (this.data = a.data), void 0 !== a.tags && (this.tags = a.tags))
  };
  T.prototype = {};
  T.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.STRING ? this.name = a.readString() : a.skip(c);
          break;
        case 2:
          c == d.Type.STRING ? this.clientId = a.readString() : a.skip(c);
          break;
        case 4:
          c == d.Type.I64 ? this.timestamp = a.readI64() : a.skip(c);
          break;
        case 5:
          c == d.Type.STRUCT ? (this.data = new R, this.data.read(a)) : a.skip(c);
          break;
        case 6:
          if(c == d.Type.LIST) {
            b = 0;
            this.tags = [];
            b = a.readListBegin().size;
            for(c = 0;c < b;++c) {
              var f = null, f = a.readString();
              this.tags.push(f)
            }
            a.readListEnd()
          }else {
            a.skip(c)
          }
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  T.prototype.write = function(a) {
    a.writeStructBegin("TMessage");
    null !== this.name && (a.writeFieldBegin("name", d.Type.STRING, 1), a.writeString(this.name), a.writeFieldEnd());
    null !== this.clientId && (a.writeFieldBegin("clientId", d.Type.STRING, 2), a.writeString(this.clientId), a.writeFieldEnd());
    null !== this.timestamp && (a.writeFieldBegin("timestamp", d.Type.I64, 4), a.writeI64(this.timestamp), a.writeFieldEnd());
    null !== this.data && (a.writeFieldBegin("data", d.Type.STRUCT, 5), this.data.write(a), a.writeFieldEnd());
    if(null !== this.tags) {
      a.writeFieldBegin("tags", d.Type.LIST, 6);
      a.writeListBegin(d.Type.STRING, this.tags.length);
      for(var b in this.tags) {
        this.tags.hasOwnProperty(b) && (b = this.tags[b], a.writeString(b))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  aa = function(a) {
    this.presence = this.messages = this.size = this.timestamp = this.name = this.channelSerial = this.channel = this.connectionSerial = this.connectionId = this.clientId = this.applicationId = this.reason = this.code = this.statusCode = this.action = null;
    a && (void 0 !== a.action && (this.action = a.action), void 0 !== a.statusCode && (this.statusCode = a.statusCode), void 0 !== a.code && (this.code = a.code), void 0 !== a.reason && (this.reason = a.reason), void 0 !== a.applicationId && (this.applicationId = a.applicationId), void 0 !== a.clientId && (this.clientId = a.clientId), void 0 !== a.connectionId && (this.connectionId = a.connectionId), void 0 !== a.connectionSerial && (this.connectionSerial = a.connectionSerial), void 0 !== a.channel && 
    (this.channel = a.channel), void 0 !== a.channelSerial && (this.channelSerial = a.channelSerial), void 0 !== a.name && (this.name = a.name), void 0 !== a.timestamp && (this.timestamp = a.timestamp), void 0 !== a.size && (this.size = a.size), void 0 !== a.messages && (this.messages = a.messages), void 0 !== a.presence && (this.presence = a.presence))
  };
  aa.prototype = {};
  aa.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.I32 ? this.action = a.readI32() : a.skip(c);
          break;
        case 2:
          c == d.Type.I16 ? this.statusCode = a.readI16() : a.skip(c);
          break;
        case 3:
          c == d.Type.I16 ? this.code = a.readI16() : a.skip(c);
          break;
        case 4:
          c == d.Type.STRING ? this.reason = a.readString() : a.skip(c);
          break;
        case 5:
          c == d.Type.STRING ? this.applicationId = a.readString() : a.skip(c);
          break;
        case 6:
          c == d.Type.STRING ? this.clientId = a.readString() : a.skip(c);
          break;
        case 7:
          c == d.Type.STRING ? this.connectionId = a.readString() : a.skip(c);
          break;
        case 8:
          c == d.Type.I32 ? this.connectionSerial = a.readI32() : a.skip(c);
          break;
        case 9:
          c == d.Type.STRING ? this.channel = a.readString() : a.skip(c);
          break;
        case 10:
          c == d.Type.STRING ? this.channelSerial = a.readString() : a.skip(c);
          break;
        case 11:
          c == d.Type.STRING ? this.name = a.readString() : a.skip(c);
          break;
        case 12:
          c == d.Type.I64 ? this.timestamp = a.readI64() : a.skip(c);
          break;
        case 13:
          c == d.Type.I32 ? this.size = a.readI32() : a.skip(c);
          break;
        case 14:
          if(c == d.Type.LIST) {
            b = 0;
            this.messages = [];
            b = a.readListBegin().size;
            for(c = 0;c < b;++c) {
              var f = null, f = new T;
              f.read(a);
              this.messages.push(f)
            }
            a.readListEnd()
          }else {
            a.skip(c)
          }
          break;
        case 15:
          if(c == d.Type.SET) {
            b = 0;
            this.presence = [];
            b = a.readSetBegin().size;
            for(c = 0;c < b;++c) {
              f = null, f = new S, f.read(a), this.presence.push(f)
            }
            a.readSetEnd()
          }else {
            a.skip(c)
          }
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  aa.prototype.write = function(a) {
    a.writeStructBegin("TChannelMessage");
    null !== this.action && (a.writeFieldBegin("action", d.Type.I32, 1), a.writeI32(this.action), a.writeFieldEnd());
    null !== this.statusCode && (a.writeFieldBegin("statusCode", d.Type.I16, 2), a.writeI16(this.statusCode), a.writeFieldEnd());
    null !== this.code && (a.writeFieldBegin("code", d.Type.I16, 3), a.writeI16(this.code), a.writeFieldEnd());
    null !== this.reason && (a.writeFieldBegin("reason", d.Type.STRING, 4), a.writeString(this.reason), a.writeFieldEnd());
    null !== this.applicationId && (a.writeFieldBegin("applicationId", d.Type.STRING, 5), a.writeString(this.applicationId), a.writeFieldEnd());
    null !== this.clientId && (a.writeFieldBegin("clientId", d.Type.STRING, 6), a.writeString(this.clientId), a.writeFieldEnd());
    null !== this.connectionId && (a.writeFieldBegin("connectionId", d.Type.STRING, 7), a.writeString(this.connectionId), a.writeFieldEnd());
    null !== this.connectionSerial && (a.writeFieldBegin("connectionSerial", d.Type.I32, 8), a.writeI32(this.connectionSerial), a.writeFieldEnd());
    null !== this.channel && (a.writeFieldBegin("channel", d.Type.STRING, 9), a.writeString(this.channel), a.writeFieldEnd());
    null !== this.channelSerial && (a.writeFieldBegin("channelSerial", d.Type.STRING, 10), a.writeString(this.channelSerial), a.writeFieldEnd());
    null !== this.name && (a.writeFieldBegin("name", d.Type.STRING, 11), a.writeString(this.name), a.writeFieldEnd());
    null !== this.timestamp && (a.writeFieldBegin("timestamp", d.Type.I64, 12), a.writeI64(this.timestamp), a.writeFieldEnd());
    null !== this.size && (a.writeFieldBegin("size", d.Type.I32, 13), a.writeI32(this.size), a.writeFieldEnd());
    if(null !== this.messages) {
      a.writeFieldBegin("messages", d.Type.LIST, 14);
      a.writeListBegin(d.Type.STRUCT, this.messages.length);
      for(var b in this.messages) {
        this.messages.hasOwnProperty(b) && (b = this.messages[b], b.write(a))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    if(null !== this.presence) {
      a.writeFieldBegin("presence", d.Type.SET, 15);
      a.writeSetBegin(d.Type.STRUCT, this.presence.length);
      for(var c in this.presence) {
        this.presence.hasOwnProperty(c) && (c = this.presence[c], c.write(a))
      }
      a.writeSetEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  fa = function(a) {
    this.items = null;
    a && void 0 !== a.items && (this.items = a.items)
  };
  fa.prototype = {};
  fa.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          if(c == d.Type.LIST) {
            b = 0;
            this.items = [];
            b = a.readListBegin().size;
            for(c = 0;c < b;++c) {
              var f = null, f = new aa;
              f.read(a);
              this.items.push(f)
            }
            a.readListEnd()
          }else {
            a.skip(c)
          }
          break;
        case 0:
          a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  fa.prototype.write = function(a) {
    a.writeStructBegin("TMessageSet");
    if(null !== this.items) {
      a.writeFieldBegin("items", d.Type.LIST, 1);
      a.writeListBegin(d.Type.STRUCT, this.items.length);
      for(var b in this.items) {
        this.items.hasOwnProperty(b) && (b = this.items[b], b.write(a))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  CTraffic = function(a) {
    this.messageSize = this.messageCount = null;
    a && (void 0 !== a.messageCount && (this.messageCount = a.messageCount), void 0 !== a.messageSize && (this.messageSize = a.messageSize))
  };
  CTraffic.prototype = {};
  CTraffic.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.I32 ? this.messageCount = a.readI32() : a.skip(c);
          break;
        case 2:
          c == d.Type.DOUBLE ? this.messageSize = a.readDouble() : a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  CTraffic.prototype.write = function(a) {
    a.writeStructBegin("CTraffic");
    null !== this.messageCount && (a.writeFieldBegin("messageCount", d.Type.I32, 1), a.writeI32(this.messageCount), a.writeFieldEnd());
    null !== this.messageSize && (a.writeFieldBegin("messageSize", d.Type.DOUBLE, 2), a.writeDouble(this.messageSize), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  CConnections = function(a) {
    this.tls = this.plain = null;
    a && (void 0 !== a.plain && (this.plain = a.plain), void 0 !== a.tls && (this.tls = a.tls))
  };
  CConnections.prototype = {};
  CConnections.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.I32 ? this.plain = a.readI32() : a.skip(c);
          break;
        case 2:
          c == d.Type.I32 ? this.tls = a.readI32() : a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  CConnections.prototype.write = function(a) {
    a.writeStructBegin("CConnections");
    null !== this.plain && (a.writeFieldBegin("plain", d.Type.I32, 1), a.writeI32(this.plain), a.writeFieldEnd());
    null !== this.tls && (a.writeFieldBegin("tls", d.Type.I32, 2), a.writeI32(this.tls), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  CTimelineStats = function(a) {
    this.connections = this.deliveredHttpStream = this.deliveredPost = this.deliveredRest = this.deliveredRealtime = this.deliveredAll = this.published = null;
    a && (void 0 !== a.published && (this.published = a.published), void 0 !== a.deliveredAll && (this.deliveredAll = a.deliveredAll), void 0 !== a.deliveredRealtime && (this.deliveredRealtime = a.deliveredRealtime), void 0 !== a.deliveredRest && (this.deliveredRest = a.deliveredRest), void 0 !== a.deliveredPost && (this.deliveredPost = a.deliveredPost), void 0 !== a.deliveredHttpStream && (this.deliveredHttpStream = a.deliveredHttpStream), void 0 !== a.connections && (this.connections = a.connections))
  };
  CTimelineStats.prototype = {};
  CTimelineStats.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.STRUCT ? (this.published = new CTraffic, this.published.read(a)) : a.skip(c);
          break;
        case 2:
          c == d.Type.STRUCT ? (this.deliveredAll = new CTraffic, this.deliveredAll.read(a)) : a.skip(c);
          break;
        case 3:
          c == d.Type.STRUCT ? (this.deliveredRealtime = new CTraffic, this.deliveredRealtime.read(a)) : a.skip(c);
          break;
        case 4:
          c == d.Type.STRUCT ? (this.deliveredRest = new CTraffic, this.deliveredRest.read(a)) : a.skip(c);
          break;
        case 5:
          c == d.Type.STRUCT ? (this.deliveredPost = new CTraffic, this.deliveredPost.read(a)) : a.skip(c);
          break;
        case 6:
          c == d.Type.STRUCT ? (this.deliveredHttpStream = new CTraffic, this.deliveredHttpStream.read(a)) : a.skip(c);
          break;
        case 7:
          c == d.Type.STRUCT ? (this.connections = new CConnections, this.connections.read(a)) : a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  CTimelineStats.prototype.write = function(a) {
    a.writeStructBegin("CTimelineStats");
    null !== this.published && (a.writeFieldBegin("published", d.Type.STRUCT, 1), this.published.write(a), a.writeFieldEnd());
    null !== this.deliveredAll && (a.writeFieldBegin("deliveredAll", d.Type.STRUCT, 2), this.deliveredAll.write(a), a.writeFieldEnd());
    null !== this.deliveredRealtime && (a.writeFieldBegin("deliveredRealtime", d.Type.STRUCT, 3), this.deliveredRealtime.write(a), a.writeFieldEnd());
    null !== this.deliveredRest && (a.writeFieldBegin("deliveredRest", d.Type.STRUCT, 4), this.deliveredRest.write(a), a.writeFieldEnd());
    null !== this.deliveredPost && (a.writeFieldBegin("deliveredPost", d.Type.STRUCT, 5), this.deliveredPost.write(a), a.writeFieldEnd());
    null !== this.deliveredHttpStream && (a.writeFieldBegin("deliveredHttpStream", d.Type.STRUCT, 6), this.deliveredHttpStream.write(a), a.writeFieldEnd());
    null !== this.connections && (a.writeFieldBegin("connections", d.Type.STRUCT, 7), this.connections.write(a), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  TMessageArray = function(a) {
    this.items = null;
    a && void 0 !== a.items && (this.items = a.items)
  };
  TMessageArray.prototype = {};
  TMessageArray.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          if(c == d.Type.LIST) {
            b = 0;
            this.items = [];
            b = a.readListBegin().size;
            for(c = 0;c < b;++c) {
              var f = null, f = new T;
              f.read(a);
              this.items.push(f)
            }
            a.readListEnd()
          }else {
            a.skip(c)
          }
          break;
        case 0:
          a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  TMessageArray.prototype.write = function(a) {
    a.writeStructBegin("TMessageArray");
    if(null !== this.items) {
      a.writeFieldBegin("items", d.Type.LIST, 1);
      a.writeListBegin(d.Type.STRUCT, this.items.length);
      for(var b in this.items) {
        this.items.hasOwnProperty(b) && (b = this.items[b], b.write(a))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  TPresenceArray = function(a) {
    this.items = null;
    a && void 0 !== a.items && (this.items = a.items)
  };
  TPresenceArray.prototype = {};
  TPresenceArray.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          if(c == d.Type.LIST) {
            b = 0;
            this.items = [];
            b = a.readListBegin().size;
            for(c = 0;c < b;++c) {
              var f = null, f = new S;
              f.read(a);
              this.items.push(f)
            }
            a.readListEnd()
          }else {
            a.skip(c)
          }
          break;
        case 0:
          a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  TPresenceArray.prototype.write = function(a) {
    a.writeStructBegin("TPresenceArray");
    if(null !== this.items) {
      a.writeFieldBegin("items", d.Type.LIST, 1);
      a.writeListBegin(d.Type.STRUCT, this.items.length);
      for(var b in this.items) {
        this.items.hasOwnProperty(b) && (b = this.items[b], b.write(a))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  TStatsArray = function(a) {
    this.items = null;
    a && void 0 !== a.items && (this.items = a.items)
  };
  TStatsArray.prototype = {};
  TStatsArray.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          if(c == d.Type.LIST) {
            b = 0;
            this.items = [];
            b = a.readListBegin().size;
            for(c = 0;c < b;++c) {
              var f = null, f = new CTimelineStats;
              f.read(a);
              this.items.push(f)
            }
            a.readListEnd()
          }else {
            a.skip(c)
          }
          break;
        case 0:
          a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  TStatsArray.prototype.write = function(a) {
    a.writeStructBegin("TStatsArray");
    if(null !== this.items) {
      a.writeFieldBegin("items", d.Type.LIST, 1);
      a.writeListBegin(d.Type.STRUCT, this.items.length);
      for(var b in this.items) {
        this.items.hasOwnProperty(b) && (b = this.items[b], b.write(a))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  var H = {TAction:TAction, TType:TType, TData:R, TPresence:S, TMessage:T, TChannelMessage:aa, TMessageSet:fa}, U, ba = function() {
    if(!V) {
      try {
        var a = k.getElementsByTagName("body")[0].appendChild(k.createElement("span"));
        a.parentNode.removeChild(a)
      }catch(b) {
        return
      }
      V = !0;
      for(var a = na.length, c = 0;c < a;c++) {
        na[c]()
      }
    }
  }, Va = function(a) {
    V ? a() : na[na.length] = a
  }, Wa = function(a) {
    if(typeof E.addEventListener != r) {
      E.addEventListener("load", a, !1)
    }else {
      if(typeof k.addEventListener != r) {
        k.addEventListener("load", a, !1)
      }else {
        if(typeof E.attachEvent != r) {
          var b = E;
          b.attachEvent("onload", a);
          ca[ca.length] = [b, "onload", a]
        }else {
          if("function" == typeof E.onload) {
            var c = E.onload;
            E.onload = function() {
              c();
              a()
            }
          }else {
            E.onload = a
          }
        }
      }
    }
  }, Ia = function() {
    var a = N.length;
    if(0 < a) {
      for(var b = 0;b < a;b++) {
        var c = N[b].id, f = N[b].callbackFn, d = {success:!1, id:c};
        if(0 < g.pv[0]) {
          var e = I(c);
          if(e) {
            if(oa(N[b].swfVersion) && !(g.wk && 312 > g.wk)) {
              W(c, !0), f && (d.success = !0, d.ref = Fa(c), f(d))
            }else {
              if(N[b].expressInstall && Ga()) {
                d = {};
                d.data = N[b].expressInstall;
                d.width = e.getAttribute("width") || "0";
                d.height = e.getAttribute("height") || "0";
                e.getAttribute("class") && (d.styleclass = e.getAttribute("class"));
                e.getAttribute("align") && (d.align = e.getAttribute("align"));
                for(var n = {}, e = e.getElementsByTagName("param"), q = e.length, l = 0;l < q;l++) {
                  "movie" != e[l].getAttribute("name").toLowerCase() && (n[e[l].getAttribute("name")] = e[l].getAttribute("value"))
                }
                Ha(d, n, c, f)
              }else {
                pb(e), f && f(d)
              }
            }
          }
        }else {
          if(W(c, !0), f) {
            if((c = Fa(c)) && typeof c.SetVariable != r) {
              d.success = !0, d.ref = c
            }
            f(d)
          }
        }
      }
    }
  }, Fa = function(a) {
    var b = null;
    if((a = I(a)) && "OBJECT" == a.nodeName) {
      typeof a.SetVariable != r ? b = a : (a = a.getElementsByTagName(K)[0]) && (b = a)
    }
    return b
  }, Ga = function() {
    return!pa && oa("6.0.65") && (g.win || g.mac) && !(g.wk && 312 > g.wk)
  }, Ha = function(a, b, c, f) {
    pa = !0;
    Ja = f || null;
    Xa = {success:!1, id:c};
    var d = I(c);
    if(d) {
      "OBJECT" == d.nodeName ? (ga = Ka(d), qa = null) : (ga = d, qa = c);
      a.id = Ya;
      if(typeof a.width == r || !/%$/.test(a.width) && 310 > parseInt(a.width, 10)) {
        a.width = "310"
      }
      if(typeof a.height == r || !/%$/.test(a.height) && 137 > parseInt(a.height, 10)) {
        a.height = "137"
      }
      k.title = k.title.slice(0, 47) + " - Flash Player Installation";
      f = g.ie && g.win ? "ActiveX" : "PlugIn";
      f = "MMredirectURL=" + E.location.toString().replace(/&/g, "%26") + "&MMplayerType=" + f + "&MMdoctitle=" + k.title;
      b.flashvars = typeof b.flashvars != r ? b.flashvars + ("&" + f) : f;
      g.ie && (g.win && 4 != d.readyState) && (f = k.createElement("div"), c += "SWFObjectNew", f.setAttribute("id", c), d.parentNode.insertBefore(f, d), d.style.display = "none", function() {
        4 == d.readyState ? d.parentNode.removeChild(d) : setTimeout(arguments.callee, 10)
      }());
      La(a, b, c)
    }
  }, pb = function(a) {
    if(g.ie && g.win && 4 != a.readyState) {
      var b = k.createElement("div");
      a.parentNode.insertBefore(b, a);
      b.parentNode.replaceChild(Ka(a), b);
      a.style.display = "none";
      (function() {
        4 == a.readyState ? a.parentNode.removeChild(a) : setTimeout(arguments.callee, 10)
      })()
    }else {
      a.parentNode.replaceChild(Ka(a), a)
    }
  }, Ka = function(a) {
    var b = k.createElement("div");
    if(g.win && g.ie) {
      b.innerHTML = a.innerHTML
    }else {
      if(a = a.getElementsByTagName(K)[0]) {
        if(a = a.childNodes) {
          for(var c = a.length, f = 0;f < c;f++) {
            !(1 == a[f].nodeType && "PARAM" == a[f].nodeName) && 8 != a[f].nodeType && b.appendChild(a[f].cloneNode(!0))
          }
        }
      }
    }
    return b
  }, La = function(a, b, c) {
    var f, d = I(c);
    if(g.wk && 312 > g.wk) {
      return f
    }
    if(d) {
      if(typeof a.id == r && (a.id = c), g.ie && g.win) {
        var e = "", n;
        for(n in a) {
          a[n] != Object.prototype[n] && ("data" == n.toLowerCase() ? b.movie = a[n] : "styleclass" == n.toLowerCase() ? e += ' class="' + a[n] + '"' : "classid" != n.toLowerCase() && (e += " " + n + '="' + a[n] + '"'))
        }
        n = "";
        for(var q in b) {
          b[q] != Object.prototype[q] && (n += '<param name="' + q + '" value="' + b[q] + '" />')
        }
        d.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + e + ">" + n + "</object>";
        ra[ra.length] = a.id;
        f = I(a.id)
      }else {
        q = k.createElement(K);
        q.setAttribute("type", sa);
        for(var l in a) {
          a[l] != Object.prototype[l] && ("styleclass" == l.toLowerCase() ? q.setAttribute("class", a[l]) : "classid" != l.toLowerCase() && q.setAttribute(l, a[l]))
        }
        for(e in b) {
          b[e] != Object.prototype[e] && "movie" != e.toLowerCase() && (a = q, n = e, l = b[e], c = k.createElement("param"), c.setAttribute("name", n), c.setAttribute("value", l), a.appendChild(c))
        }
        d.parentNode.replaceChild(q, d);
        f = q
      }
    }
    return f
  }, Za = function(a) {
    var b = I(a);
    b && "OBJECT" == b.nodeName && (g.ie && g.win ? (b.style.display = "none", function() {
      if(4 == b.readyState) {
        var c = I(a);
        if(c) {
          for(var f in c) {
            "function" == typeof c[f] && (c[f] = null)
          }
          c.parentNode.removeChild(c)
        }
      }else {
        setTimeout(arguments.callee, 10)
      }
    }()) : b.parentNode.removeChild(b))
  }, I = function(a) {
    var b = null;
    try {
      b = k.getElementById(a)
    }catch(c) {
    }
    return b
  }, oa = function(a) {
    var b = g.pv, a = a.split(".");
    a[0] = parseInt(a[0], 10);
    a[1] = parseInt(a[1], 10) || 0;
    a[2] = parseInt(a[2], 10) || 0;
    return b[0] > a[0] || b[0] == a[0] && b[1] > a[1] || b[0] == a[0] && b[1] == a[1] && b[2] >= a[2] ? !0 : !1
  }, $a = function(a, b, c, f) {
    if(!g.ie || !g.mac) {
      var d = k.getElementsByTagName("head")[0];
      if(d) {
        c = c && "string" == typeof c ? c : "screen";
        f && (Ma = L = null);
        if(!L || Ma != c) {
          f = k.createElement("style"), f.setAttribute("type", "text/css"), f.setAttribute("media", c), L = d.appendChild(f), g.ie && (g.win && typeof k.styleSheets != r && 0 < k.styleSheets.length) && (L = k.styleSheets[k.styleSheets.length - 1]), Ma = c
        }
        g.ie && g.win ? L && typeof L.addRule == K && L.addRule(a, b) : L && typeof k.createTextNode != r && L.appendChild(k.createTextNode(a + " {" + b + "}"))
      }
    }
  }, W = function(a, b) {
    if(ab) {
      var c = b ? "visible" : "hidden";
      V && I(a) ? I(a).style.visibility = c : $a("#" + a, "visibility:" + c)
    }
  }, bb = function(a) {
    return null != /[\\\"<>\.;]/.exec(a) && typeof encodeURIComponent != r ? encodeURIComponent(a) : a
  }, r = "undefined", K = "object", sa = "application/x-shockwave-flash", Ya = "SWFObjectExprInst", E = window, k = document, O = navigator, cb = !1, na = [function() {
    if(cb) {
      var a = k.getElementsByTagName("body")[0], b = k.createElement(K);
      b.setAttribute("type", sa);
      var c = a.appendChild(b);
      if(c) {
        var f = 0;
        (function() {
          if(typeof c.GetVariable != r) {
            var d = c.GetVariable("$version");
            d && (d = d.split(" ")[1].split(","), g.pv = [parseInt(d[0], 10), parseInt(d[1], 10), parseInt(d[2], 10)])
          }else {
            if(10 > f) {
              f++;
              setTimeout(arguments.callee, 10);
              return
            }
          }
          a.removeChild(b);
          c = null;
          Ia()
        })()
      }else {
        Ia()
      }
    }else {
      Ia()
    }
  }], N = [], ra = [], ca = [], ga, qa, Ja, Xa, V = !1, pa = !1, L, Ma, ab = !0, g, qb = typeof k.getElementById != r && typeof k.getElementsByTagName != r && typeof k.createElement != r, ta = O.userAgent.toLowerCase(), ua = O.platform.toLowerCase(), rb = ua ? /win/.test(ua) : /win/.test(ta), sb = ua ? /mac/.test(ua) : /mac/.test(ta), tb = /webkit/.test(ta) ? parseFloat(ta.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : !1, Na = !+"\v1", ha = [0, 0, 0], C = null;
  if(typeof O.plugins != r && typeof O.plugins["Shockwave Flash"] == K) {
    if((C = O.plugins["Shockwave Flash"].description) && !(typeof O.mimeTypes != r && O.mimeTypes[sa] && !O.mimeTypes[sa].enabledPlugin)) {
      cb = !0, Na = !1, C = C.replace(/^.*\s+(\S+\s+\S+$)/, "$1"), ha[0] = parseInt(C.replace(/^(.*)\..*$/, "$1"), 10), ha[1] = parseInt(C.replace(/^.*\.(.*)\s.*$/, "$1"), 10), ha[2] = /[a-zA-Z]/.test(C) ? parseInt(C.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0
    }
  }else {
    if(typeof E.ActiveXObject != r) {
      try {
        var db = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
        if(db && (C = db.GetVariable("$version"))) {
          Na = !0, C = C.split(" ")[1].split(","), ha = [parseInt(C[0], 10), parseInt(C[1], 10), parseInt(C[2], 10)]
        }
      }catch(Hb) {
      }
    }
  }
  g = {w3:qb, pv:ha, wk:tb, ie:Na, win:rb, mac:sb};
  g.w3 && ((typeof k.readyState != r && "complete" == k.readyState || typeof k.readyState == r && (k.getElementsByTagName("body")[0] || k.body)) && ba(), V || (typeof k.addEventListener != r && k.addEventListener("DOMContentLoaded", ba, !1), g.ie && g.win && (k.attachEvent("onreadystatechange", function() {
    "complete" == k.readyState && (k.detachEvent("onreadystatechange", arguments.callee), ba())
  }), E == top && function() {
    if(!V) {
      try {
        k.documentElement.doScroll("left")
      }catch(a) {
        setTimeout(arguments.callee, 0);
        return
      }
      ba()
    }
  }()), g.wk && function() {
    V || (/loaded|complete/.test(k.readyState) ? ba() : setTimeout(arguments.callee, 0))
  }(), Wa(ba)));
  g.ie && g.win && window.attachEvent("onunload", function() {
    for(var a = ca.length, b = 0;b < a;b++) {
      ca[b][0].detachEvent(ca[b][1], ca[b][2])
    }
    a = ra.length;
    for(b = 0;b < a;b++) {
      Za(ra[b])
    }
    for(var c in g) {
      g[c] = null
    }
    g = null;
    for(var f in U) {
      U[f] = null
    }
    U = null
  });
  U = {registerObject:function(a, b, c, f) {
    if(g.w3 && a && b) {
      var d = {};
      d.id = a;
      d.swfVersion = b;
      d.expressInstall = c;
      d.callbackFn = f;
      N[N.length] = d;
      W(a, !1)
    }else {
      f && f({success:!1, id:a})
    }
  }, getObjectById:function(a) {
    if(g.w3) {
      return Fa(a)
    }
  }, embedSWF:function(a, b, c, f, d, e, n, q, l, i) {
    var j = {success:!1, id:b};
    g.w3 && !(g.wk && 312 > g.wk) && a && b && c && f && d ? (W(b, !1), Va(function() {
      c += "";
      f += "";
      var g = {};
      if(l && typeof l === K) {
        for(var k in l) {
          g[k] = l[k]
        }
      }
      g.data = a;
      g.width = c;
      g.height = f;
      k = {};
      if(q && typeof q === K) {
        for(var m in q) {
          k[m] = q[m]
        }
      }
      if(n && typeof n === K) {
        for(var p in n) {
          k.flashvars = typeof k.flashvars != r ? k.flashvars + ("&" + p + "=" + n[p]) : p + "=" + n[p]
        }
      }
      if(oa(d)) {
        m = La(g, k, b), g.id == b && W(b, !0), j.success = !0, j.ref = m
      }else {
        if(e && Ga()) {
          g.data = e;
          Ha(g, k, b, i);
          return
        }
        W(b, !0)
      }
      i && i(j)
    })) : i && i(j)
  }, switchOffAutoHideShow:function() {
    ab = !1
  }, ua:g, getFlashPlayerVersion:function() {
    return{major:g.pv[0], minor:g.pv[1], release:g.pv[2]}
  }, hasFlashPlayerVersion:oa, createSWF:function(a, b, c) {
    if(g.w3) {
      return La(a, b, c)
    }
  }, showExpressInstall:function(a, b, c, f) {
    g.w3 && Ga() && Ha(a, b, c, f)
  }, removeSWF:function(a) {
    g.w3 && Za(a)
  }, createCSS:function(a, b, c, f) {
    g.w3 && $a(a, b, c, f)
  }, addDomLoadEvent:Va, addLoadEvent:Wa, getQueryParamValue:function(a) {
    var b = k.location.search || k.location.hash;
    if(b) {
      /\?/.test(b) && (b = b.split("?")[1]);
      if(null == a) {
        return bb(b)
      }
      for(var b = b.split("&"), c = 0;c < b.length;c++) {
        if(b[c].substring(0, b[c].indexOf("=")) == a) {
          return bb(b[c].substring(b[c].indexOf("=") + 1))
        }
      }
    }
    return""
  }, expressInstallCallback:function() {
    if(pa) {
      var a = I(Ya);
      a && ga && (a.parentNode.replaceChild(ga, a), qa && (W(qa, !0), g.ie && g.win && (ga.style.display = "block")), Ja && Ja(Xa));
      pa = !1
    }
  }};
  var va;
  logger = window.console && window.console.log && window.console.error ? window.console : {log:function() {
  }, error:function() {
  }};
  var i = function(a, b, c, f, d) {
    var e = this;
    e.__id = i.__nextId++;
    i.__instances[e.__id] = e;
    e.readyState = i.CONNECTING;
    e.bufferedAmount = 0;
    e.__events = {};
    b ? "string" == typeof b && (b = [b]) : b = [];
    e.__createTask = setTimeout(function() {
      i.__addTask(function() {
        e.__createTask = null;
        i.__flash.create(e.__id, a, b, c || null, f || 0, d || null)
      })
    }, 0)
  };
  i.prototype.send = function(a) {
    if(this.readyState == i.CONNECTING) {
      throw"INVALID_STATE_ERR: Web Socket connection has not been established";
    }
    a = i.__flash.send(this.__id, encodeURIComponent(a));
    if(0 > a) {
      return!0
    }
    this.bufferedAmount += a;
    return!1
  };
  i.prototype.close = function() {
    this.__createTask ? (clearTimeout(this.__createTask), this.__createTask = null, this.readyState = i.CLOSED) : this.readyState == i.CLOSED || this.readyState == i.CLOSING || (this.readyState = i.CLOSING, i.__flash.close(this.__id))
  };
  i.prototype.addEventListener = function(a, b) {
    a in this.__events || (this.__events[a] = []);
    this.__events[a].push(b)
  };
  i.prototype.removeEventListener = function(a, b) {
    if(a in this.__events) {
      for(var c = this.__events[a], f = c.length - 1;0 <= f;--f) {
        if(c[f] === b) {
          c.splice(f, 1);
          break
        }
      }
    }
  };
  i.prototype.dispatchEvent = function(a) {
    for(var b = this.__events[a.type] || [], c = 0;c < b.length;++c) {
      b[c](a)
    }
    (b = this["on" + a.type]) && b.apply(this, [a])
  };
  i.prototype.__handleEvent = function(a) {
    "readyState" in a && (this.readyState = a.readyState);
    "protocol" in a && (this.protocol = a.protocol);
    var b;
    if("open" == a.type || "error" == a.type) {
      b = this.__createSimpleEvent(a.type)
    }else {
      if("close" == a.type) {
        b = this.__createSimpleEvent("close"), b.wasClean = a.wasClean ? !0 : !1, b.code = a.code, b.reason = a.reason
      }else {
        if("message" == a.type) {
          a = decodeURIComponent(a.message), b = this.__createMessageEvent("message", a)
        }else {
          throw"unknown event type: " + a.type;
        }
      }
    }
    this.dispatchEvent(b)
  };
  i.prototype.__createSimpleEvent = function(a) {
    if(document.createEvent && window.Event) {
      var b = document.createEvent("Event");
      b.initEvent(a, !1, !1);
      return b
    }
    return{type:a, bubbles:!1, cancelable:!1}
  };
  i.prototype.__createMessageEvent = function(a, b) {
    if(document.createEvent && window.MessageEvent && !window.opera) {
      var c = document.createEvent("MessageEvent");
      c.initMessageEvent("message", !1, !1, b, null, null, window, null);
      return c
    }
    return{type:a, data:b, bubbles:!1, cancelable:!1}
  };
  i.CONNECTING = 0;
  i.OPEN = 1;
  i.CLOSING = 2;
  i.CLOSED = 3;
  i.__isFlashImplementation = !0;
  i.__initialized = !1;
  i.__flash = null;
  i.__instances = {};
  i.__tasks = [];
  i.__nextId = 0;
  i.loadFlashPolicyFile = function(a) {
    i.__addTask(function() {
      i.__flash.loadManualPolicyFile(a)
    })
  };
  i.__initialize = function() {
    if(!i.__initialized) {
      i.__initialized = !0;
      var a = document.createElement("div");
      a.id = "webSocketContainer";
      a.style.position = "absolute";
      i.__isFlashLite() ? (a.style.left = "0px", a.style.top = "0px") : (a.style.left = "-100px", a.style.top = "-100px");
      var b = document.createElement("div");
      b.id = "webSocketFlash";
      a.appendChild(b);
      document.body.appendChild(a);
      U.embedSWF("swf/WebSocketMainInsecure-0.9.swf", "webSocketFlash", "1", "1", "10.0.0", null, null, {hasPriority:!0, swliveconnect:!0, allowScriptAccess:"always"}, null, function(a) {
        a.success || logger.error("[WebSocket] swfobject.embedSWF failed")
      })
    }
  };
  i.__onFlashInitialized = function() {
    setTimeout(function() {
      i.__flash = document.getElementById("webSocketFlash");
      i.__flash.setCallerUrl(location.href);
      i.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);
      for(var a = 0;a < i.__tasks.length;++a) {
        i.__tasks[a]()
      }
      i.__tasks = []
    }, 0)
  };
  i.__onFlashEvent = function() {
    setTimeout(function() {
      try {
        for(var a = i.__flash.receiveEvents(), b = 0;b < a.length;++b) {
          i.__instances[a[b].webSocketId].__handleEvent(a[b])
        }
      }catch(c) {
        logger.error(c)
      }
    }, 0);
    return!0
  };
  i.__log = function(a) {
    logger.log(decodeURIComponent(a))
  };
  i.__error = function(a) {
    logger.error(decodeURIComponent(a))
  };
  i.__addTask = function(a) {
    i.__flash ? a() : i.__tasks.push(a)
  };
  i.__isFlashLite = function() {
    if(!window.navigator || !window.navigator.mimeTypes) {
      return!1
    }
    var a = window.navigator.mimeTypes["application/x-shockwave-flash"];
    return!a || !a.enabledPlugin || !a.enabledPlugin.filename ? !1 : a.enabledPlugin.filename.match(/flashlite/i) ? !0 : !1
  };
  va = i;
  var w = function() {
    this.any = [];
    this.events = {};
    this.anyOnce = [];
    this.eventsOnce = {}
  };
  w.prototype.on = function(a, b) {
    1 == arguments.length && "function" == typeof a ? this.any.push(a) : null === a ? this.any.push(b) : (this.events[a] = this.events[a] || []).push(b)
  };
  w.prototype.off = function(a, b) {
    if(0 == arguments.length) {
      this.any = [], this.events = {}, this.anyOnce = [], this.eventsOnce = {}
    }else {
      1 == arguments.length && "function" == typeof a && (b = a, a = null);
      var c, f = -1;
      if(null === a) {
        if(b) {
          if(!(c = this.any) || -1 == (f = c.indexOf(b))) {
            if(c = this.anyOnce) {
              f = c.indexOf(b)
            }
          }
          -1 < f && c.splice(f, 1)
        }else {
          this.any = [], this.anyOnce = []
        }
      }else {
        if(b) {
          f = -1;
          if(!(c = this.events[a]) || -1 == (f = c.indexOf(b))) {
            if(c = this.eventsOnce[a]) {
              f = c.indexOf(b)
            }
          }
          -1 < f && c.splice(f, 1)
        }else {
          delete this.events[a], delete this.eventsOnce[a]
        }
      }
    }
  };
  w.prototype.listeners = function(a) {
    if(a) {
      var b = this.events[a] || [];
      this.eventsOnce[a] && Array.prototype.push.apply(b, this.eventsOnce[a]);
      return b.length ? b : null
    }
    return this.any.length ? this.any : null
  };
  w.prototype.emit = function(a) {
    var b = Array.prototype.slice.call(arguments, 1), c = {event:a};
    if(this.anyOnce.length) {
      var f = this.anyOnce;
      this.anyOnce = [];
      for(var d = 0;d < f.length;d++) {
        f[d].apply(c, b)
      }
    }
    for(d = 0;d < this.any.length;d++) {
      this.any[d].apply(c, b)
    }
    if(f = this.eventsOnce[a]) {
      delete this.eventsOnce[a];
      for(d = 0;d < f.length;d++) {
        f[d].apply(c, b)
      }
    }
    if(f = this.events[a]) {
      for(d = 0;d < f.length;d++) {
        f[d].apply(c, b)
      }
    }
  };
  w.prototype.once = function(a, b) {
    1 == arguments.length && "function" == typeof a ? this.anyOnce.push(a) : null === a ? this.anyOnce.push(b) : (this.eventsOnce[a] = this.eventsOnce[a] || []).push(b)
  };
  var e = function() {
  }, eb = 4, fb = function() {
  };
  e.LOG_NONE = 0;
  e.LOG_ERROR = 1;
  e.LOG_MAJOR = 2;
  e.LOG_MINOR = 3;
  e.LOG_MICRO = 4;
  e.LOG_DEFAULT = 3;
  e.LOG_DEBUG = 4;
  e.logAction = function(a, b, c) {
    a <= eb && fb("Ably: " + b + ": " + c)
  };
  e.setLog = function(a, b) {
    eb = a || 3;
    fb = b || console.log.bind(console)
  };
  var m, x = function() {
  }, ub = "object" == typeof window;
  x.addProperties = x.mixin = function(a, b) {
    for(var c in b) {
      a[c] = b[c]
    }
    return a
  };
  x.copy = function(a) {
    return x.mixin({}, a)
  };
  x.isEmpty = function(a) {
    for(var b in a) {
      return!1
    }
    return!0
  };
  x.shallowClone = function(a) {
    var b = {}, c;
    for(c in a) {
      b[c] = a[c]
    }
    return b
  };
  x.prototypicalClone = function(a, b) {
    function c() {
    }
    c.prototype = a;
    var f = new c;
    b && x.mixin(f, b);
    return f
  };
  x.inherits = function(a, b) {
    a.super_ = b;
    a.prototype = Object.create(b.prototype, {constructor:{value:a, enumerable:!1, writable:!0, configurable:!0}})
  };
  x.containsValue = function(a, b) {
    for(var c in a) {
      if(a[c] == b) {
        return!0
      }
    }
    return!1
  };
  x.keysArray = function(a, b) {
    var c = [], f;
    for(f in a) {
      (!b || a.hasOwnProperty(f)) && c.push(f)
    }
    return c.length ? c : void 0
  };
  x.valuesArray = function(a, b) {
    var c = [], f;
    for(f in a) {
      (!b || a.hasOwnProperty(f)) && c.push(a[f])
    }
    return c.length ? c : void 0
  };
  x.nextTick = ub ? function(a) {
    setTimeout(a, 0)
  } : process.nextTick;
  x.defaultGetHeaders = function(a) {
    return{accept:a ? "application/x-thrift,application/json" : "application/json"}
  };
  x.defaultPostHeaders = function(a) {
    return{accept:a ? "application/x-thrift,application/json" : "application/json", "content-type":a ? "application/x-thrift" : "application/json"}
  };
  m = x;
  var ia = function(a) {
    var a = a || [], b = function(b, f) {
      for(var d = 0;d < a.length;d++) {
        try {
          a[d](b, f)
        }catch(e) {
        }
      }
    };
    b.__proto__ = this.__proto__;
    b.members = a;
    return b
  };
  m.inherits(ia, Function);
  ia.prototype.push = function() {
    Array.prototype.push.apply(this.members, arguments)
  };
  var M, s = function(a, b) {
    w.call(this);
    this.realtime = a;
    this.options = b;
    this.pendingMessages = [];
    this.state = F.initialized;
    this.error = null;
    b.transports = b.transports || mb;
    for(var c = this.transports = [], f = 0;f < b.transports.length;f++) {
      b.transports[f] in s.availableTransports && c.push(b.transports[f])
    }
    e.logAction(e.LOG_MINOR, "Realtime.ConnectionManager()", "started");
    e.logAction(e.LOG_MICRO, "Realtime.ConnectionManager()", "requested transports = [" + b.transports + "]");
    e.logAction(e.LOG_MICRO, "Realtime.ConnectionManager()", "available transports = [" + c + "]");
    if(!c.length) {
      throw e.logAction(e.LOG_ERROR, "realtime.ConnectionManager()", "no requested transports available"), Error("no requested transports available");
    }
    var d = this;
    this.on(function(b, c) {
      e.logAction(e.LOG_MICRO, "ConnectionManager on(connection state)", "newState = " + b.current);
      switch(b.current) {
        case "connected":
          e.logAction(e.LOG_MINOR, "ConnectionManager on(connected)", "connected; transport = " + c);
          c.on("channelmessage", function(b) {
            var c = b.channel;
            if(c) {
              var f = a.channels.attached[c];
              if(f) {
                f.onMessage(b)
              }else {
                e.logAction(e.LOG_ERROR, "ConnectionManager on(channelmessage)", "received event for non-existent channel: " + c)
              }
            }else {
              e.logAction(e.LOG_ERROR, "ConnectionManager on(channelmessage)", "received event unspecified channel: " + c)
            }
          });
          var f = a.channels.attached, l;
          for(l in f) {
            f[l].attachImpl()
          }
          break;
        case "suspended":
        ;
        case "closed":
        ;
        case "failed":
          var g = d.state;
          for(l in f) {
            f[l].setSuspended(g)
          }
      }
    })
  }, vb = function() {
  }, F = {initialized:{state:"initialized", terminal:!1, queueEvents:!0, sendEvents:!1}, connecting:{state:"connecting", terminal:!1, queueEvents:!0, sendEvents:!1, retryDelay:15E3, failState:"disconnected"}, connected:{state:"connected", terminal:!1, queueEvents:!1, sendEvents:!0, failState:"disconnected"}, disconnected:{state:"disconnected", terminal:!1, queueEvents:!0, sendEvents:!1, retryDelay:3E4}, suspended:{state:"suspended", terminal:!1, queueEvents:!1, sendEvents:!1, retryDelay:12E4}, closed:{state:"closed", 
  terminal:!1, queueEvents:!1, sendEvents:!1}, failed:{state:"failed", terminal:!0, queueEvents:!1, sendEvents:!1}};
  m.inherits(s, w);
  s.availableTransports = {};
  s.prototype.chooseTransport = function(a) {
    if(this.transport) {
      a(this.transport)
    }else {
      var b = this, c = this.transports.slice(), f = function(a) {
        var d = c.shift();
        d ? (e.logAction(e.LOG_MICRO, "ConnectionManager.chooseTransport()", "trying " + d), s.availableTransports[d].tryConnect(b, b.realtime.auth, b.options, function(c, q) {
          c ? f(a) : (e.logAction(e.LOG_MICRO, "ConnectionManager.chooseTransport()", "transport " + d + " connecting"), b.setupTransport(q), a(q))
        })) : a(null)
      };
      f(a)
    }
  };
  s.prototype.setupTransport = function(a) {
    var b = this;
    this.transport = a;
    for(var c = function(c) {
      return function(f, d) {
        e.logAction(e.LOG_MICRO, "ConnectionManager.setupTransport; on state = " + c);
        f && f.reason && e.logAction(e.LOG_MICRO, "ConnectionManager.setupTransport; reason =  " + f.reason);
        d && e.logAction(e.LOG_MICRO, "ConnectionManager.setupTransport; connectionId =  " + d);
        b.transport === a && (d && (b.realtime.connection.id = d), b.notifyState({state:c, error:f}))
      }
    }, f = ["connected", "disconnected", "closed", "failed"], d = 0;d < f.length;d++) {
      var Ua = f[d];
      a.on(Ua, c(Ua))
    }
  };
  s.activeState = function(a) {
    return a.queueEvents || a.sendEvents
  };
  s.prototype.enactStateChange = function(a) {
    e.logAction(e.LOG_MINOR, "ConnectionManager.enactStateChange", "setting new state: " + a.current);
    this.state = F[a.current];
    this.state.terminal && (this.error = a.error);
    this.emit(a.current, a, this.transport)
  };
  s.prototype.startConnectTimer = function() {
    var a = this;
    this.connectTimer = setTimeout(function() {
      a.connectTimer && (e.logAction(e.LOG_MINOR, "ConnectionManager connect timer expired", "requesting new state: " + F.connecting.failState), a.notifyState({state:F.connecting.failState}))
    }, 15E3)
  };
  s.prototype.cancelConnectTimer = function() {
    this.connectTimer && (clearTimeout(this.connectTimer), this.connectTimer = void 0)
  };
  s.prototype.startSuspendTimer = function() {
    var a = this;
    this.suspendTimer || (this.suspendTimer = setTimeout(function() {
      a.suspendTimer && (e.logAction(e.LOG_MINOR, "ConnectionManager suspend timer expired", "requesting new state: suspended"), F.connecting.failState = "suspended", F.connecting.queueEvents = !1, a.notifyState({state:"suspended"}))
    }, 12E4))
  };
  s.prototype.cancelSuspendTimer = function() {
    F.connecting.failState = "disconnected";
    F.connecting.queueEvents = !0;
    this.suspendTimer && (clearTimeout(this.suspendTimer), delete this.suspendTimer)
  };
  s.prototype.startRetryTimer = function(a) {
    var b = this;
    this.retryTimer = setTimeout(function() {
      e.logAction(e.LOG_MINOR, "ConnectionManager retry timer expired", "retrying");
      b.requestState({state:"connecting"})
    }, a)
  };
  s.prototype.cancelRetryTimer = function() {
    this.retryTimer && (clearTimeout(this.retryTimer), delete this.retryTimer)
  };
  s.prototype.notifyState = function(a) {
    if(!(this.state.terminal || a.state == this.state.state)) {
      e.logAction(e.LOG_MINOR, "ConnectionManager.notifyState()", "new state: " + a.state);
      var b = F[a.state];
      !b.sendEvents && this.transport && (e.logAction(e.LOG_MINOR, "ConnectionManager.notifyState()", "deleting transport " + this.transport), this.transport.dispose(), delete this.transport);
      this.cancelConnectTimer();
      this.cancelRetryTimer();
      "connected" == a.state && this.cancelSuspendTimer();
      a = new wa(this.state.state, b.state, b.retryDelay, a.error || ma[b.state]);
      b.retryDelay && this.startRetryTimer(b.retryDelay);
      this.enactStateChange(a);
      this.state.sendEvents && this.sendPendingMessages()
    }
  };
  s.prototype.requestState = function(a) {
    this.cancelConnectTimer();
    this.cancelRetryTimer();
    if(a.state != this.state.state) {
      if(this.state.terminal) {
        throw Error(this.error.reason);
      }
      if("connecting" == a.state) {
        if("connected" == this.state.state) {
          return
        }
        this.connectImpl()
      }else {
        if("failed" == a.state) {
          this.transport && (this.transport.abort(a.reason), delete this.transport)
        }else {
          if((a.state = "closed") && this.transport) {
            this.transport.close(), delete this.transport, this.cancelConnectTimer(), this.cancelRetryTimer(), this.cancelSuspendTimer()
          }
        }
      }
      var b = F[a.state], a = new wa(this.state.state, b.state, b.retryIn, a.error || ma[b.state]);
      this.enactStateChange(a)
    }
  };
  s.prototype.connectImpl = function() {
    e.logAction(e.LOG_MINOR, "ConnectionManager.connectImpl()", "starting connection");
    this.startSuspendTimer();
    this.startConnectTimer();
    var a = this, b = this.realtime.auth, c = function(f) {
      e.logAction(e.LOG_ERROR, "ConnectionManager.connectImpl()", f);
      401 == f.statusCode && (-1 != f.message.indexOf("expire") && "token" == b.method) && b.getToken(!0, function(b) {
        b ? c(b) : a.connectImpl()
      });
      a.notifyState({state:F.connecting.failState, error:f})
    }, f = function() {
      a.chooseTransport(function(a) {
        a || c(Error("Unable to connect using any available transport"))
      })
    };
    "basic" == b.method ? f() : b.getToken(!1, function(a) {
      a ? c(a) : f()
    })
  };
  s.prototype.send = function(a, b, c) {
    c = c || vb;
    this.state.queueEvents && (b ? (e.logAction(e.LOG_MICRO, "ConnectionManager.send()", "queueing event"), (b = this.pendingMessages[this.pendingMessages.length - 1]) && Oa.mergeTo(b.msg, a) ? (b.isMerged || (b.callback = new ia([b.callback]), b.isMerged = !0), b.listener.push(c)) : this.pendingMessages.push({msg:a, callback:c})) : (e.logAction(e.LOG_MICRO, "ConnectionManager.send()", "rejecting event"), c(this.error)));
    this.state.sendEvents && (e.logAction(e.LOG_MICRO, "ConnectionManager.send()", "sending event"), this.transport.send(a, c))
  };
  s.prototype.sendPendingMessages = function() {
    e.logAction(e.LOG_MICRO, "ConnectionManager.sendPendingMessages()", "sending " + this.pendingMessages.length + " queued messages");
    var a = this.pendingMessages.shift();
    if(a) {
      try {
        this.transport.send(a.msg, a.callback)
      }catch(b) {
        e.logAction(e.LOG_ERROR, "ConnectionManager.sendPendingMessages()", "Unexpected exception in transport.send(): " + b)
      }
    }
  };
  M = s;
  var t = function(a, b, c) {
    w.call(this);
    this.connectionManager = a;
    this.auth = b;
    this.options = c;
    c.useTextProtocol ? (this.thriftTransport = ja.TStringTransport, this.thriftProtocol = ja.TJSONProtocol) : (this.thriftTransport = ja.TTransport, this.thriftProtocol = ja.TBinaryProtocol, this.protocolBuffer = new ja.CheckedBuffer(wb));
    this.isConnected = !1
  }, ja = "object" == typeof window ? d : require("thrift"), wb = 1024;
  m.inherits(t, w);
  t.prototype.connect = function() {
  };
  t.prototype.close = function() {
    this.isConnected = !1;
    this.emit("closed", ma.closed)
  };
  t.prototype.abort = function(a) {
    this.isConnected = !1;
    this.emit("failed", a)
  };
  t.prototype.onChannelMessage = function(a) {
    switch(a.action) {
      case 0:
        this.emit("heartbeat");
        break;
      case 2:
        this.connectionId = a.connectionId;
        this.isConnected = !0;
        this.onConnect();
        this.emit("connected", null, this.connectionId);
        break;
      case 3:
        this.abort({statusCode:a.statusCode, code:a.code, reason:a.reason});
        break;
      default:
        this.emit("channelmessage", a)
    }
  };
  t.prototype.sendMessage = function(a, b) {
    e.logAction(e.LOG_MICRO, "Transport.sendMessage()", "");
    var c = this;
    try {
      var f = new this.thriftProtocol(new this.thriftTransport(void 0, function(a) {
        c.sendData(a, b)
      }));
      a.write(f);
      f.flush()
    }catch(d) {
      f = "Unexpected send exception: " + d, e.logAction(e.LOG_ERROR, "Transport.sendMessage()", f), b({statusCode:500, code:5E4, reason:f})
    }
  };
  t.prototype.onConnect = function() {
  };
  t.prototype.onClose = function(a, b) {
    if("closed" != this.connectionManager.state.state) {
      var c = a ? "disconnected" : "failed";
      this.isConnected = !1;
      var f = m.copy(ma[c]);
      b && (f.reason = b);
      this.emit(c, f)
    }
  };
  t.prototype.dispose = function() {
    this.off()
  };
  var u = function(a, b, c) {
    c.useTextProtocol = c.useTextProtocol || !xb;
    this.sendOptions = {binary:!c.useTextProtocol};
    t.call(this, a, b, c)
  }, Pa = "object" == typeof window, gb = Pa ? window.WebSocket || window.MozWebSocket : require("ws"), xb = Pa ? !1 : B, yb = "object" == typeof H ? H : require("../nodejs/lib/protocol/clientmessage_types"), xa = Pa ? d : require("thrift");
  m.inherits(u, t);
  u.isAvailable = function() {
    return!!gb
  };
  u.isAvailable() && (M.availableTransports.web_socket = u);
  u.tryConnect = function(a, b, c, f) {
    var d = new u(a, b, c), g = function(a) {
      f(a)
    };
    d.on("wserror", g);
    d.on("wsopen", function() {
      e.logAction(e.LOG_MINOR, "WebSocketTransport.tryConnect()", "viable transport " + d);
      d.off("wserror", g);
      f(null, d)
    });
    d.connect()
  };
  u.prototype.createWebSocket = function(a, b) {
    var c = 0;
    if(b) {
      for(var f in b) {
        a += (c++ ? "&" : "?") + f + "=" + b[f]
      }
    }
    this.uri = a;
    return new gb(a)
  };
  u.prototype.toString = function() {
    return"WebSocketTransport; uri=" + this.uri
  };
  u.prototype.connect = function() {
    e.logAction(e.LOG_MINOR, "WebSocketTransport.connect()", "starting");
    t.prototype.connect.call(this);
    var a = this, b = (this.options.encrypted ? "wss://" : "ws://") + this.options.wsHost + ":" + this.options.wsPort + "/applications/" + this.options.appId;
    e.logAction(e.LOG_MINOR, "WebSocketTransport.connect()", "uri: " + b);
    this.auth.getAuthParams(function(c, f) {
      var d = "", g;
      for(g in f) {
        d += " " + g + ": " + f[g] + ";"
      }
      e.logAction(e.LOG_MINOR, "WebSocketTransport.connect()", "authParams:" + d);
      if(c) {
        a.abort(UIMessages.FAIL_REASON_REFUSED)
      }else {
        try {
          var n = a.wsConnection = a.createWebSocket(b, f);
          n.binaryType = "arraybuffer";
          n.onopen = function() {
            a.onWsOpen()
          };
          n.onclose = function(b, c) {
            a.onWsClose(b, c)
          };
          n.onmessage = function(b) {
            a.onWsData(b.data, "string" != typeof b.data)
          };
          n.onerror = function(b) {
            a.onWsError(b)
          }
        }catch(q) {
          a.onWsError(q)
        }
      }
    })
  };
  u.prototype.close = function() {
    this.dispose();
    t.prototype.close.call(this)
  };
  u.prototype.abort = function() {
    this.dispose();
    t.prototype.abort.call(this)
  };
  u.prototype.send = function(a, b) {
    var c = this;
    try {
      var f = new this.thriftProtocol(new this.thriftTransport(this.protocolBuffer, function(a) {
        c.wsConnection.send(a.buf || a, c.sendOptions);
        b(null)
      }));
      a.write(f);
      f.flush()
    }catch(d) {
      a = "Unexpected send exception: " + d, e.logAction(e.LOG_ERROR, "WebSocketTransport.send()", a), b(Error(a))
    }
  };
  u.prototype.onWsData = function(a, b) {
    var c = b ? new xa.TBinaryProtocol(new xa.TTransport(a)) : new xa.TJSONProtocol(new xa.TStringTransport(a)), f = new yb.TChannelMessage;
    try {
      f.read(c), this.onChannelMessage(f)
    }catch(d) {
      e.logAction(e.LOG_ERROR, "Transport.onChannelEvent()", "Unexpected exception handing channel event: " + d.stack)
    }
  };
  u.prototype.onWsOpen = function() {
    e.logAction(e.LOG_MINOR, "WebSocketTransport.onWsOpen()", "opened WebSocket");
    this.emit("wsopen")
  };
  u.prototype.onWsClose = function(a, b) {
    var c, f, d;
    "object" == typeof a ? (c = a.wasClean, f = a.code, d = a.reason) : (f = a, d = b || "", c = 1E3 == f);
    e.logAction(e.LOG_MINOR, "WebSocketTransport.onWsClose()", "closed WebSocket; wasClean = " + c + "; code = " + f);
    delete this.wsConnection;
    t.prototype.onClose.call(this, c, d)
  };
  u.prototype.onWsError = function(a) {
    e.logAction(e.LOG_ERROR, "WebSocketTransport.onError()", "Unexpected error from WebSocket: " + a);
    this.emit("wserror", a);
    this.abort()
  };
  u.prototype.dispose = function() {
    this.wsConnection && (this.wsConnection.close(), delete this.wsConnection)
  };
  var v = function(a, b, c) {
    t.call(this, a, b, c);
    this.binary = !c.useTextProtocol
  }, Qa = "object" == typeof H ? H : require("../nodejs/lib/protocol/clientmessage_types");
  (m || require("util")).inherits(v, t);
  v.paramStr = function(a, b) {
    var c = 0, d = b || "";
    if(a) {
      for(var e in a) {
        d += (c++ ? "&" : "?") + e + "=" + a[e]
      }
    }
    return d
  };
  v.prototype.connect = function() {
    e.logAction(e.LOG_MINOR, "CometTransport.connect()", "starting");
    t.prototype.connect.call(this);
    var a = this;
    this.baseUri = (this.options.encrypted ? "https://" : "http://") + this.options.wsHost + ":" + this.options.wsPort + "/comet/" + this.options.appId;
    var b = this.baseUri + "/recv";
    e.logAction(e.LOG_MINOR, "CometTransport.connect()", "uri: " + b);
    this.auth.getAuthParams(function(c, d) {
      a.params = d;
      e.logAction(e.LOG_MINOR, "CometTransport.connect()", "authParams:" + v.paramStr(d));
      if(c) {
        a.abort(UIMessages.FAIL_REASON_REFUSED)
      }else {
        try {
          a.request(b, a.params, null, !1, function(b, c) {
            b ? a.emit("error", b) : (a.emit("preconnect"), a.onRecvResponse(c))
          })
        }catch(h) {
          a.emit("error", h)
        }
      }
    })
  };
  v.prototype.close = function() {
    t.prototype.close.call(this);
    this.isConnected = !1;
    this.recvRequest && (this.recvRequest.abort(), delete this.recvRequest);
    var a = this;
    this.recvRequest = this.request(this.closeUri, this.params, null, !1, function(b) {
      delete a.recvRequest;
      b && a.emit("error", b)
    })
  };
  v.prototype.abort = function(a) {
    t.prototype.abort.call(this, a)
  };
  v.prototype.onConnect = function() {
    this.sendUri = this.baseUri + "/send/" + this.connectionId;
    this.recvUri = this.baseUri + "/recv/" + this.connectionId;
    this.closeUri = this.baseUri + "/close/" + this.connectionId;
    this.recv()
  };
  v.prototype.send = function(a, b) {
    if(this.sendRequest) {
      this.pendingMessage = this.pendingMessage || new Qa.TMessageSet({items:[]}), this.pendingMessage.items.push(a), this.pendingCallback = this.pendingCallback || new ia, this.pendingCallback.push(b)
    }else {
      var c = this.pendingMessage || new Qa.TMessageSet({items:[]});
      c.items.push(a);
      delete this.pendingMessage;
      var d = this.pendingCallback;
      d && (d.push(b), b = d, delete this.pendingCallback);
      this.sendMessage(c, b)
    }
  };
  v.prototype.sendMessage = function(a, b) {
    var c = this;
    try {
      var d = new this.thriftProtocol(new this.thriftTransport(this.protocolBuffer, function(a) {
        c.sendRequest = c.request(c.sendUri, c.params, a, !1, function(a, d) {
          delete c.sendRequest;
          c.pendingMessage && (c.sendMessage(c.pendingMessage, c.pendingCallback), delete c.pendingMessage, delete c.pendingCallback);
          a ? b(a) : (c.onResponseData(d), b(null))
        })
      }));
      a.write(d);
      d.flush()
    }catch(h) {
      d = "Unexpected send exception: " + h, e.logAction(e.LOG_ERROR, "CometTransport.sendMessage()", d), b(Error(d))
    }
  };
  v.prototype.recv = function() {
    this.recvRequest && (this.recvRequest.abort(), delete this.recvRequest);
    if(this.isConnected) {
      var a = this;
      this.recvRequest = this.request(this.recvUri, this.params, null, !0, function(b, c) {
        b ? a.emit("error", b) : (a.onRecvResponse(c), delete a.recvRequest, a.recv())
      })
    }
  };
  v.prototype.onResponseData = function(a) {
    var a = new this.thriftProtocol(new this.thriftTransport(a)), b = new Qa.TMessageSet;
    try {
      b.read(a);
      var c = b.items;
      if(c && c.length) {
        for(a = 0;a < c.length;a++) {
          this.onChannelMessage(c[a])
        }
      }
    }catch(d) {
      e.logAction(e.LOG_ERROR, "CometTransport.onSendResponse()", "Unexpected exception handing channel event: " + d.stack)
    }
  };
  v.prototype.onRecvResponse = function(a) {
    this.onResponseData(a)
  };
  var D = function(a, b, c) {
    c.useTextProtocol = c.useTextProtocol || !D.binary;
    v.call(this, a, b, c)
  }, hb = function() {
    var a = new XMLHttpRequest;
    return"withCredentials" in a ? a : "undefined" !== typeof XDomainRequest ? new XDomainRequest : null
  };
  m.inherits(D, v);
  D.isAvailable = function() {
    if(!hb()) {
      return!1
    }
    D.binary = !1;
    return!0
  };
  D.isAvailable() && (M.availableTransports.xhr = D);
  D.tryConnect = function(a, b, c, d) {
    var h = new D(a, b, c), g = function(a) {
      d(a)
    };
    h.on("error", g);
    h.on("preconnect", function() {
      e.logAction(e.LOG_MINOR, "XHRTransport.tryConnect()", "viable transport " + h);
      h.off("error", g);
      d(null, h)
    });
    h.connect()
  };
  D.prototype.request = function(a, b, c, d, e) {
    return new D.Request(a, b, c, d, this.binary, e)
  };
  D.prototype.toString = function() {
    return"XHRTransport; uri=" + this.baseUri + "; isConnected=" + this.isConnected
  };
  D.Request = function(a, b, c, d, e, g) {
    var a = v.paramStr(b, a), n;
    c ? (b = "POST", n = 201) : (b = "GET", n = 200);
    var i = this.xhr = hb();
    e && (i.responseType = "arraybuffer");
    var l = setTimeout(d ? 9E4 : 1E4, function() {
      i.abort()
    });
    i.open(b, a, !0);
    i.setRequestHeader("Accept", e ? "application/x-thrift" : "application/json");
    i.onreadystatechange = function() {
      if(4 == i.readyState) {
        clearTimeout(l);
        var a = null;
        i.status != n ? (a = Error("Unexpected response: statusCode = " + i.status), a.statusCode = i.status, a.statusText = i.statusText, g(a)) : (a = null, e ? i.response && (a = new B, a.buf = i.response, a.view = new DataView(a.buf)) : a = i.responseText, g(null, a))
      }
    };
    i.send(c)
  };
  D.Request.prototype.abort = function() {
    this.xhr && this.xhr.abort()
  };
  var G = function(a, b, c) {
    c.useTextProtocol = !0;
    v.call(this, a, b, c);
    Ably._ = {}
  };
  m.inherits(G, v);
  G.isAvailable = function() {
    return!0
  };
  M.availableTransports.jsonp = G;
  G.tryConnect = function(a, b, c, d) {
    var h = new G(a, b, c), g = function(a) {
      d(a)
    };
    h.on("error", g);
    h.on("preconnect", function() {
      e.logAction(e.LOG_MINOR, "JSONPTransport.tryConnect()", "viable transport " + h);
      h.off("error", g);
      d(null, h)
    });
    h.connect()
  };
  G.prototype.toString = function() {
    return"JSONPTransport; uri=" + uri + "; state=" + this.state
  };
  G.prototype.toString = function() {
    return"JSONPTransport; uri=" + this.baseUri + "; isConnected=" + this.isConnected
  };
  G.prototype.request = function(a, b, c, d, e) {
    return new G.Request(a, b, c, d, e)
  };
  var zb = 0;
  G.Request = function(a, b, c, d, e) {
    var g = Ably._;
    this.callback = e;
    var i = this.requestId = zb++, k = this.timer = setTimeout(d ? 9E4 : 1E4, function() {
      j.abort()
    });
    b.callback = "Ably._._" + i;
    c ? b.body = encodeUriComponent(c) : delete b.body;
    var l = document.createElement("script");
    l.async = !0;
    l.onerror = function() {
      j.abort()
    };
    l.src = v.paramStr(b, a);
    var j = this;
    Ably._["_" + i] = function(a) {
      clearTimeout(k);
      delete g["_" + i];
      j.aborted || (l.parentNode.removeChild(l), e(null, a))
    };
    a = document.getElementsByTagName("script")[0];
    a.parentNode.insertBefore(l, a);
    this.script = l
  };
  G.Request.prototype.abort = function() {
    clearTimeout(this.timer);
    this.aborted = !0;
    delete Ably._["_" + this.requestId];
    this.callback(Error("JSONPTransport: requestId " + this.requestId + " aborted"))
  };
  var P = function(a, b, c) {
    c.useTextProtocol = !0;
    u.call(this, a, b, c)
  }, Ab = "object" == typeof window;
  m.inherits(P, u);
  P.isAvailable = function() {
    return Ab && U && 10 <= U.getFlashPlayerVersion().major && va
  };
  P.isAvailable() && (M.availableTransports.flash_socket = P);
  P.tryConnect = function(a, b, c, d) {
    va.__initialize();
    var h = new P(a, b, c);
    errorCb = function(a) {
      d(a)
    };
    h.on("wserror", errorCb);
    h.on("wsopen", function() {
      e.logAction(e.LOG_MINOR, "FlashTransport.tryConnect()", "viable transport " + h);
      h.off("wsopen", errorCb);
      d(null, h)
    });
    h.connect()
  };
  P.prototype.createWebSocket = function(a, b) {
    var c = 0;
    if(b) {
      for(var d in b) {
        a += (c++ ? "&" : "?") + d + "=" + b[d]
      }
    }
    this.uri = a;
    return new va(a, [], this.options.proxyHost, this.options.proxyPort)
  };
  P.prototype.toString = function() {
    return"FlashTransport; uri=" + this.uri
  };
  var ib = function() {
  }, X = function() {
  };
  X.get = function(a, b, c, d, e) {
    function g() {
      a.auth.getAuthHeaders(function(i, j) {
        i ? e(i) : Http.get(a.baseUri + b, m.mixin(j, c), d, function(b, c) {
          b && 40140 == b.code ? a.auth.authorise({force:!0}, function(a) {
            a ? e(a) : g()
          }) : e(b, c)
        })
      })
    }
    void 0 === e && ("function" == typeof d ? (e = d, d = null) : e = ib);
    g()
  };
  X.post = function(a, b, c, d, e, g) {
    function i() {
      a.auth.getAuthHeaders(function(j, k) {
        j ? g(j) : Http.post(a.baseUri + b, m.mixin(k, d), c, e, function(b, c) {
          b && 40140 == b.code ? a.auth.authorise({force:!0}, function(a) {
            a ? g(a) : i()
          }) : g(b, c)
        })
      })
    }
    void 0 === g && ("function" == typeof e ? (g = e, e = null) : g = ib);
    i()
  };
  var Bb = function() {
  }, Cb = function(a) {
    if(!a) {
      return""
    }
    "string" == typeof a && (a = JSON.parse(a));
    var b = {}, c = m.keysArray(a, !0);
    if(!c) {
      return""
    }
    c.sort();
    for(var d = 0;d < c.length;d++) {
      b[c[d]] = a[c[d]].sort()
    }
    return JSON.stringify(b)
  }, da = function(a, b) {
    this.rest = a;
    this.tokenUri = a.baseUri + "/authorise";
    var c = this.tokenOptions = {};
    b.keyId && (c.keyId = b.keyId);
    b.keyValue && (c.keyValue = b.keyValue);
    if(b.keyValue) {
      if(!b.clientId) {
        e.logAction(e.LOG_MINOR, "Auth()", "anonymous, using basic auth");
        this.method = "basic";
        c = b.key || [b.appId, b.keyId, b.keyValue].join(":");
        this.basicKey = (new B(c, "ascii")).toString("base64");
        this.keyId = b.keyId;
        this.keyValue = b.keyValue;
        return
      }
      if(!ya) {
        throw c = "client-side token request signing not supported", e.logAction(e.LOG_ERROR, "Auth()", c), Error(c);
      }
    }
    this.method = "token";
    b.authToken && (this.token = {id:b.authToken});
    if(b.authCallback) {
      e.logAction(e.LOG_MINOR, "Auth()", "using token auth with authCallback"), c.authCallback = b.authCallback
    }else {
      if(b.authUrl) {
        e.logAction(e.LOG_MINOR, "Auth()", "using token auth with authUrl"), c.authUrl = b.authUrl
      }else {
        if(b.keyValue) {
          e.logAction(e.LOG_MINOR, "Auth()", "using token auth with client-side signing")
        }else {
          if(this.token) {
            e.logAction(e.LOG_MINOR, "Auth()", "using token auth with supplied token only")
          }else {
            throw c = "options must include valid authentication parameters", e.logAction(e.LOG_ERROR, "Auth()", c), Error(c);
          }
        }
      }
    }
  }, Ra = "object" == typeof window, Db = Ra ? null : require("crypto"), ya = void 0;
  Ra && (window.CryptoJS && CryptoJS.HmacSHA256 && CryptoJS.enc.Base64) && (ya = function(a, b) {
    return CryptoJS.HmacSHA256(a, b).toString(CryptoJS.enc.Base64)
  });
  Ra || (ya = function(a, b) {
    var c = Db.createHmac("SHA256", b);
    c.update(a);
    return c.digest("base64")
  });
  da.prototype.authorise = function(a, b) {
    if(this.token) {
      if(this.token.expires > Math.floor(Date.now() / 1E3)) {
        if(!a.force) {
          e.logAction(e.LOG_MINOR, "Auth.getToken()", "using cached token; expires = " + this.token.expires);
          b();
          return
        }
      }else {
        e.logAction(e.LOG_MINOR, "Auth.getToken()", "deleting expired token"), delete this.token
      }
    }
    var c = this;
    this.requestToken(a, function(a, d) {
      a ? b(a) : b(null, c.token = d)
    })
  };
  da.prototype.requestToken = function(a, b) {
    "function" == typeof a && !b && (b = a, a = {});
    var a = a || {}, b = b || Bb, a = m.mixin(m.copy(this.tokenOptions), a), c;
    if(a.authCallback) {
      e.logAction(e.LOG_MINOR, "Auth.requestToken()", "using token auth with auth_callback"), c = a.authCallback
    }else {
      if(a.authUrl) {
        e.logAction(e.LOG_MINOR, "Auth.requestToken()", "using token auth with auth_url"), c = function(b, c) {
          Http.get(a.authUrl, a.authHeaders || {}, m.mixin(b, a.authParams), c)
        }
      }else {
        if(a.keyValue) {
          var d = this;
          e.logAction(e.LOG_MINOR, "Auth.requestToken()", "using token auth with client-side signing");
          c = function(b, c) {
            d.createTokenRequest(m.mixin(m.copy(a), b), c)
          }
        }else {
          throw Error("Auth.requestToken(): options must include valid authentication parameters");
        }
      }
    }
    var h = {}, g = a.clientId || this.rest.clientId;
    g && (h.client_id = g);
    g = a.ttl || "";
    "ttl" in a && (h.ttl = g);
    "capability" in a && (h.capability = Cb(a.capability));
    d = this;
    c(h, function(a, c) {
      if(a) {
        e.logAction(e.LOG_ERROR, "Auth.requestToken()", "token request signing call returned error; err = " + a), b(a)
      }else {
        var h = function(a, c) {
          a ? (e.logAction(e.LOG_ERROR, "Auth.requestToken()", "token request API call returned error; err = " + a), b(a)) : (e.logAction(e.LOG_MINOR, "Auth.getToken()", "token received"), b(null, c.access_token))
        };
        Http.post ? Http.post(d.tokenUri, m.defaultPostHeaders(), c, null, h) : Http.get(d.tokenUri, m.defaultGetHeaders(), c, h)
      }
    })
  };
  da.prototype.createTokenRequest = function(a, b) {
    var c = a.keyId, d = a.keyValue;
    if(!c || !d) {
      b(Error("No key specified"))
    }else {
      var h = {id:c}, g = a.clientId || "";
      g && (h.client_id = a.clientId);
      var i = a.ttl || "";
      i && (h.ttl = i);
      var j = a.capability || "";
      j && (h.capability = j);
      var c = this.rest, k = function() {
        var c = h.nonce = a.nonce || ("000000" + Math.floor(1E16 * Math.random())).slice(-16), k = h.timestamp = a.timestamp, c = h.id + "\n" + i + "\n" + j + "\n" + g + "\n" + k + "\n" + c + "\n";
        h.mac = a.mac || ya(c, d);
        e.logAction(e.LOG_MINOR, "Auth.getTokenRequest()", "generated signed request");
        b(null, h)
      };
      a.timestamp ? k() : a.queryTime ? c.time(function(c, d) {
        c ? b(c) : (a.timestamp = Math.floor(d / 1E3), k())
      }) : (a.timestamp = Math.floor(Date.now() / 1E3), k())
    }
  };
  da.prototype.getAuthParams = function(a) {
    "basic" == this.method ? a(null, {key_id:this.keyId, key_value:this.keyValue}) : this.authorise({}, function(b, c) {
      b ? a(b) : a(null, {access_token:c.access_token.id})
    })
  };
  da.prototype.getAuthHeaders = function(a) {
    "basic" == this.method ? a(null, {authorization:"Basic " + this.basicKey}) : this.authorise({}, function(b, c) {
      b ? a(b) : a(null, {authorization:"Bearer " + c.id})
    })
  };
  var ka = function(a) {
    if(!a) {
      throw a = "no options provided", e.logAction(e.LOG_ERROR, "Realtime()", a), Error(a);
    }
    "string" == typeof a && (a = {key:a});
    if(a.key) {
      var b = a.key.split(":");
      if(3 != b.length) {
        throw a = "invalid key parameter", e.logAction(e.LOG_ERROR, "Realtime()", a), Error(a);
      }
      a.appId = b[0];
      a.keyId = b[1];
      a.keyValue = b[2]
    }
    if(!a.appId) {
      throw a = "no appId provided", e.logAction(e.LOG_ERROR, "Realtime()", a), Error(a);
    }
    this.options = a;
    a.log && e.setLog(a.log.level, a.log.handler);
    e.logAction(e.LOG_MINOR, "Realtime()", "started");
    this.clientId = a.clientId;
    "object" == typeof window && ("https:" == window.location.protocol && !("encrypted" in a)) && (a.encrypted = !0);
    var b = a.restHost = a.restHost || "rest.ably.io", c = a.restPort = a.tlsPort || a.encrypted && a.port || 443;
    this.baseUri = (this.authority = "https://" + b + ":" + c) + "/apps/" + this.options.appId;
    a.wsHost = a.wsHost || "realtime.ably.io";
    a.wsPort = a.encrypted ? c : a.wsPort || 80;
    this.auth = new da(this, a);
    this.connection = new jb(this, a);
    this.channels = new kb(this);
    this.connection.connect()
  }, kb = function(a) {
    this.realtime = a;
    this.attached = {}
  };
  ka.prototype.history = function(a, b) {
    X.get(this, "/events", a, b)
  };
  ka.prototype.stats = function(a, b) {
    X.get(this, "/stats", a, b)
  };
  ka.prototype.close = function() {
    e.logAction(e.LOG_MINOR, "Realtime.close()", "");
    this.connection.connectionManager.requestState({state:"closed"})
  };
  ka.prototype.time = function(a) {
    Http.get(this.authority + "/time", null, null, function(b, c) {
      if(b) {
        a(b)
      }else {
        var d = c[0];
        d ? a(null, d) : (b = Error("Internal error (unexpected result type from GET /time"), b.statusCode = 500, a(b))
      }
    })
  };
  kb.prototype.get = function(a, b) {
    var a = String(a), c = this.attached[a];
    c || (this.attached[a] = c = new Oa(this.realtime, a, b || {}));
    return c
  };
  this.Realtime = ka;
  var wa;
  wa = function(a, b, c, d) {
    this.previous = a;
    this.current = b;
    c && (this.retryIn = c);
    d && (this.reason = d)
  };
  var jb, za = function(a, b) {
    w.call(this);
    this.ably = a;
    this.connectionManager = new M(a, b);
    this.state = this.connectionManager.state.state;
    this.id = void 0;
    var c = this;
    this.connectionManager.on(function(a) {
      c.state = a.current;
      m.nextTick(function() {
        c.emit(c.state, a)
      })
    })
  };
  m.inherits(za, w);
  za.prototype.on = function(a, b) {
    w.prototype.on.call(this, a, b);
    if(this.state == a && b) {
      try {
        b(new wa(void 0, a))
      }catch(c) {
      }
    }
  };
  za.prototype.connect = function() {
    this.connectionManager.requestState({state:"connecting"})
  };
  jb = za;
  var Y = function(a, b) {
    e.logAction(e.LOG_MINOR, "Channel()", "started; name = " + b);
    w.call(this);
    this.rest = a;
    this.name = b
  };
  m.inherits(Y, w);
  Y.prototype.presence = function(a, b) {
    e.logAction(e.LOG_MICRO, "Channel.presence()", "channel = " + this.name);
    var c = this.rest, d = m.copy(m.defaultGetHeaders(!c.options.useTextProtocol));
    c.options.headers && m.mixin(d, c.options.headers);
    X.get(c, "/channels/" + this.name + "/presence", d, a, b)
  };
  Y.prototype.history = function(a, b) {
    e.logAction(e.LOG_MICRO, "Channel.history()", "channel = " + this.name);
    var c = this.rest, d = m.copy(m.defaultGetHeaders(!c.options.useTextProtocol));
    c.options.headers && m.mixin(d, c.options.headers);
    X.get(c, "/channels/" + this.name + "/history", d, a, b)
  };
  Y.prototype.publish = function(a, b, c) {
    e.logAction(e.LOG_MICRO, "Channel.publish()", "channel = " + this.name + "; name = " + a);
    var d = this.rest, h = !d.options.useTextProtocol;
    h && (e.logAction(e.LOG_ERROR, "Channel.publish()", "Unable to publish message in binary format (not supported yet)"), h = !1);
    a = {name:a, data:b};
    h = m.copy(m.defaultPostHeaders(h));
    d.options.headers && m.mixin(h, d.options.headers);
    X.post(d, "/channels/" + this.name + "/publish", a, h, null, c)
  };
  var Oa, p = function(a, b, c) {
    e.logAction(e.LOG_MINOR, "RealtimeChannel()", "started; name = " + b);
    Y.call(this, a, b, c);
    this.presence = new lb(this, c);
    this.connectionManager = a.connection.connectionManager;
    this.options = m.prototypicalClone(Eb, c);
    this.state = "initialized";
    this.subscriptions = new w;
    this.pendingSubscriptions = {};
    this.pendingEvents = []
  }, z = "object" == typeof H ? H : require("../nodejs/lib/protocol/clientmessage_types"), Q = function() {
  }, Eb = {queueEvents:!0};
  m.inherits(p, Y);
  p.prototype.publish = function(a, b, c) {
    e.logAction(e.LOG_MICRO, "RealtimeChannel.publish()", "name = " + a);
    var d = this.connectionManager.state;
    M.activeState(d) ? (d = new z.TMessage, d.name = a, d.data = la.createPayload(b), "attached" == this.state ? (e.logAction(e.LOG_MICRO, "RealtimeChannel.publish()", "sending message"), a = new z.TChannelMessage, a.action = z.TAction.EVENT, a.channel = this.name, a.messages = [d], this.sendMessage(a, c)) : ("pending" != this.state && this.attach(), e.logAction(e.LOG_MICRO, "RealtimeChannel.publish()", "queueing message"), this.pendingEvents.push({message:d, listener:c}))) : c(d.defaultMessage)
  };
  p.prototype.onEvent = function(a) {
    e.logAction(e.LOG_MICRO, "RealtimeChannel.onEvent()", "received message");
    for(var b = this.subscriptions, c = 0;c < a.length;c++) {
      var d = a[c];
      b.emit(d.name, d)
    }
  };
  p.prototype.attach = function(a) {
    var a = a || Q, b = this.connectionManager, c = b.state;
    M.activeState(c) ? "attached" == this.state ? a() : "failed" == this.state ? a(c.defaultMessage) : (this.once(function(c) {
      switch(this.event) {
        case "attached":
          a();
          break;
        case "detached":
        ;
        case "failed":
          a(c || b.state.defaultMessage)
      }
    }), this.attachImpl()) : a(c.defaultMessage)
  };
  p.prototype.attachImpl = function(a) {
    e.logAction(e.LOG_MICRO, "RealtimeChannel.attachImpl()", "sending ATTACH message");
    this.state = "pending";
    var b = new z.TChannelMessage({action:z.TAction.ATTACH, channel:this.name});
    this.sendMessage(b, a || Q)
  };
  p.prototype.detach = function(a) {
    var a = a || Q, b = this.connectionManager, c = b.state;
    M.activeState(c) ? "detached" == this.state ? a() : (this.once(function(c) {
      switch(this.event) {
        case "detached":
          a();
          break;
        case "attached":
          a(UIMessages.FAIL_REASON_UNKNOWN);
          break;
        case "failed":
          a(c || b.state.defaultMessage)
      }
    }), this.detachImpl()) : a(c.defaultMessage)
  };
  p.prototype.detachImpl = function(a) {
    e.logAction(e.LOG_MICRO, "RealtimeChannel.attach()", "sending DETACH message");
    var b = new z.TChannelMessage({action:z.TAction.DETACH, channel:this.name});
    this.sendMessage(b, a || Q)
  };
  p.prototype.subscribe = function() {
    var a = Array.prototype.slice.call(arguments);
    1 == a.length && "function" == typeof a[0] && a.unshift(null);
    var b = a[0], c = a[1], d = a[2] = a[2] || Q;
    if("attached" == this.state) {
      this.subscribeAttached(b, c, d)
    }else {
      "pending" != this.state && this.attach();
      var e = this;
      this.once(function(a) {
        switch(this.event) {
          case "attached":
            e.subscribeAttached(b, c, d);
            break;
          case "detached":
          ;
          case "failed":
            d(a || e.connectionManager.state.defaultMessage)
        }
      })
    }
  };
  p.prototype.subscribeAttached = function(a, b, c) {
    if(null === a || a.__proto__ !== Array.prototype) {
      this.subscribeForEvent(a, b, c)
    }else {
      for(var d = 0;d < a.length;d++) {
        this.subscribeForEvent(a[d], b, c)
      }
    }
  };
  p.prototype.subscribeForEvent = function(a, b, c) {
    if(this.subscriptions.listeners(a)) {
      c()
    }else {
      e.logAction(e.LOG_MICRO, "RealtimeChannel.attach()", "sending SUBSCRIBE message");
      var d = null === a ? ":" : a, h = this.pendingSubscriptions[d];
      h || (h = [], this.pendingSubscriptions[d] = h);
      h.push({listener:b, callback:c});
      a = new z.TChannelMessage({action:z.TAction.SUBSCRIBE, channel:this.name, name:a});
      this.sendMessage(a, Q)
    }
  };
  p.prototype.unsubscribe = function() {
    var a = Array.prototype.slice.call(arguments);
    1 == a.length && "function" == typeof a[0] && a.unshift(null);
    var b = a[0], c = a[1], d = a[2] = a[2] || Q;
    if("attached" == this.state) {
      this.unsubscribeAttached(b, c, d)
    }else {
      "pending" != this.state && this.attach();
      var e = this;
      this.once(function(a) {
        switch(this.event) {
          case "attached":
            e.unsubscribeAttached(b, c, d);
            break;
          case "detached":
          ;
          case "failed":
            d(a || e.connectionManager.state.defaultMessage)
        }
      })
    }
  };
  p.prototype.unsubscribeAttached = function(a, b, c) {
    if(null === a || a.__proto__ !== Array.prototype) {
      this.unsubscribeForEvent(a, b, c)
    }else {
      for(var d = 0;d < a.length;d++) {
        this.unsubscribeForEvent(a[d], b, c)
      }
    }
  };
  p.prototype.unsubscribeForEvent = function(a, b, c) {
    var d = this.subscriptions;
    d.off(a, b);
    d.listeners(a) ? c() : (e.logAction(e.LOG_MICRO, "RealtimeChannel.unsubscribe()", "sending UNSUBSCRIBE message"), a = new z.TChannelMessage({action:z.TAction.UNSUBSCRIBE, channel:this.name, name:a}), this.sendMessage(a, Q))
  };
  p.prototype.sendMessage = function(a, b) {
    this.connectionManager.send(a, this.options.queueEvents, b)
  };
  p.prototype.sendPresence = function(a, b) {
    var c = new z.TChannelMessage({action:z.TAction.PRESENCE, name:name});
    this.sendMessage(c, b)
  };
  p.prototype.onMessage = function(a) {
    switch(a.action) {
      case 5:
        this.setAttached(a);
        break;
      case 7:
        this.setDetached(a);
        break;
      case 9:
        this.setSubscribed(a);
        break;
      case 11:
        this.setUnsubscribed(a);
        break;
      case 12:
        this.setPresence(a.presence);
        break;
      case 13:
        if(a = a.messages) {
          for(var b = Array(a.length), c = 0;c < b.length;c++) {
            var d = a[c];
            b[c] = new la(d.channelSerial, d.timestamp, d.name, la.getPayload(d.data))
          }
          this.onEvent(b)
        }
        break;
      default:
        e.logAction(e.LOG_ERROR, "Transport.onChannelMessage()", "Fatal protocol error: unrecognised action (" + a.action + ")"), this.abort(UIMessages.FAIL_REASON_FAILED)
    }
  };
  p.mergeTo = function(a, b) {
    var c = !1, d;
    if(a.channel == b.channel && (d = a.action) == b.action) {
      switch(d) {
        case 10:
          for(c = 0;c < b.messages.length;c++) {
            a.messages.push(b.messages[c])
          }
          c = !0;
          break;
        case 9:
          for(c = 0;c < b.presence.length;c++) {
            a.presence.push(b.presence[c])
          }
          c = !0
      }
    }
    return c
  };
  p.prototype.setAttached = function(a) {
    e.logAction(e.LOG_MINOR, "RealtimeChannel.setAttached", "activating channel; name = " + this.name);
    this.state = "attached";
    a.presence && this.presence.setPresence(a.presence, !1);
    this.emit("attached");
    try {
      if(this.pendingEvents.length) {
        var b = new z.TChannelMessage({action:z.TAction.EVENT, channel:this.name, messages:[]}), c = new ia;
        e.logAction(e.LOG_MICRO, "RealtimeChannel.setAttached", "sending " + this.pendingEvents.length + " queued messages");
        for(a = 0;a < this.pendingEvents.length;a++) {
          var d = this.pendingEvents[a];
          b.messages.push(d.message);
          c.push(d.callback)
        }
        this.sendMessage(b, c)
      }
      this.presence.setSubscribed()
    }catch(h) {
      e.logAction(e.LOG_ERROR, "RealtimeChannel.setSubscribed()", "Unexpected exception sending pending messages: " + h.stack)
    }
  };
  p.prototype.setSubscribed = function(a) {
    var b = a.name, a = null === b ? ":" : b;
    e.logAction(e.LOG_MINOR, "RealtimeChannel.setSubscribed", "activating event; name = " + b);
    var c = this.pendingSubscriptions[a];
    if(c) {
      var d = this.subscriptions;
      m.nextTick(function() {
        for(var a = 0;a < c.length;a++) {
          d.on(b, c[a].listener), c[a].callback()
        }
      });
      delete this.pendingSubscriptions[a]
    }
  };
  p.prototype.setDetached = function(a) {
    a.code ? (this.state = "failed", this.emit("failed", {statusCode:a.statusCode, code:a.code, reason:a.reason})) : (this.state = "detached", this.emit("detached"))
  };
  p.prototype.setUnsubscribed = function(a) {
    var b = a.name, c = null === b ? ":" : b, d = this.pendingSubscriptions[c];
    if(d) {
      var e = {statusCode:a.statusCode, code:a.code, reason:a.reason};
      m.nextTick(function() {
        for(var a = 0;a < d.length;a++) {
          d[a].callback(e)
        }
      });
      delete this.pendingSubscriptions[c]
    }
    this.subscriptions.off(b)
  };
  p.prototype.setSuspended = function(a) {
    e.logAction(e.LOG_MINOR, "RealtimeChannel.setSuspended", "deactivating channel; name = " + this.name);
    this.state = "detached";
    for(var b = 0;b < this.pendingEvents.length;b++) {
      try {
        this.pendingEvents[b].callback(a.defaultMessage)
      }catch(c) {
      }
    }
    this.pendingEvents = [];
    this.presence.setSuspended(a);
    this.emit("detached")
  };
  Oa = p;
  var lb, J = function(a, b) {
    w.call(this);
    this.channel = a;
    this.clientId = b.clientId;
    this.clients = {}
  }, Aa = "object" == typeof H ? H : require("../nodejs/lib/protocol/clientmessage_types");
  m.inherits(J, w);
  J.prototype.enter = function(a, b) {
    if(!this.clientId) {
      throw Error("clientId must be specified to enter a presence channel");
    }
    this.enterClient(this.clientId, a, b)
  };
  J.prototype.enterClient = function(a, b, c) {
    e.logAction("Presence.enterClient()", "entering; channel = " + this.channel.name + ", client = " + a);
    this.clients[a] = b;
    a = new Aa.TPresence({state:Aa.TPresenceState.ENTER, clientId:this.clientId});
    a.clientData = Y.createPayload(b);
    "pending" == this.channel.state ? this.pendingPresence = {presence:"enter", callback:c} : "subscribed" == this.channel.state && channel.sendPresence(a, listener)
  };
  J.prototype.leave = function(a) {
    if(!this.clientId) {
      throw Error("clientId must have been specified to enter or leave a presence channel");
    }
    this.leaveClient(this.clientId, a)
  };
  J.prototype.leaveClient = function(a, b) {
    e.logAction(e.LOG_MICRO, "Presence.leaveClient()", "leaving; channel = " + this.channel.name + ", client = " + a);
    delete this.clients[a];
    var c = new Aa.TPresence({state:Aa.TPresenceState.LEAVE, clientId:this.channel.ably.options.clientId});
    "subscribed" == this.channel.state ? this.channel.sendPresence(c, b) : "pending" == this.channel.state ? this.pendingPresence = {presence:"leave", callback:b} : delete this.pendingPresence
  };
  J.prototype.get = function(a) {
    return clients[a || this.clientId]
  };
  J.prototype.setPresence = function(a, b) {
    e.logAction(e.LOG_MICRO, "Presence.setPresence()", "received presence for " + a.length + " participants; channel = " + this.channel.name + ", client = " + i);
    for(var c = 0;c < a.length;c++) {
      var d = a[c], g = void 0, i = d.clientId;
      "leave" == d.state ? delete this.clients[i] : g = this.clients[i] = la.getPayload(d.clientData);
      b && this.emit(d.state, i, g)
    }
  };
  J.prototype.setSubscribed = function() {
    this.pendingPresence && (e.logAction(e.LOG_MICRO, "Presence.setSubscribed", "sending queued presence; state = " + this.state), this.channel.sendPresence(this.pendingPresence.presence, this.pendingPresence.callback), delete this.pendingPresence)
  };
  J.prototype.setSuspended = function(a) {
    this.pendingPresence && (this.pendingPresence.callback(a.defaultMessage), delete this.pendingPresence)
  };
  lb = J;
  var la, Sa = function(a, b, c, d) {
    this.channelSerial = a;
    this.timestamp = b;
    this.name = c;
    this.data = d
  }, A = "object" == typeof H ? H : require("../nodejs/lib/protocol/clientmessage_types"), Fb = {"[object Null]":function(a) {
    a.type = A.TType.NONE;
    return!0
  }, "[object Buffer]":function(a, b) {
    a.type = A.TType.BUFFER;
    a.binaryData = b;
    return!0
  }, "[object ArrayBuffer]":function(a, b) {
    a.type = A.TType.BUFFER;
    a.binaryData = b;
    return!0
  }, "[object Array]":function(a, b) {
    a.type = A.TType.JSONARRAY;
    a.stringData = JSON.stringify(b);
    return!0
  }, "[object String]":function(a, b) {
    a.type = A.TType.STRING;
    a.stringData = b.valueOf();
    return!0
  }, "[object Number]":function(a, b) {
    a.type = A.TType.DOUBLE;
    a.doubleData = b.valueOf();
    return!0
  }, "[object Boolean]":function(a, b) {
    a.type = b.valueOf() ? A.TType.TRUE : A.TType.FALSE;
    return!0
  }, "[object Object]":function(a, b) {
    "undefined" !== typeof B && B.isBuffer(b) ? (a.type = ctypes.TType.BUFFER, a.binaryData = b) : (a.type = ctypes.TType.JSONOBJECT, a.stringData = JSON.stringify(b));
    return!0
  }, "[object Function]":function(a, b) {
    a.type = A.TType.JSONOBJECT;
    a.stringData = JSON.stringify(b);
    return!0
  }}, Gb = {undefined:function(a) {
    a.type = A.TType.NONE;
    return!0
  }, "boolean":function(a, b) {
    a.type = b ? A.TType.TRUE : A.TType.FALSE;
    return!0
  }, string:function(a, b) {
    a.type = A.TType.STRING;
    a.stringData = b;
    return!0
  }, number:function(a, b) {
    a.type = A.TType.DOUBLE;
    a.doubleData = b;
    return!0
  }, object:function(a, b) {
    var c = Fb[Object.prototype.toString.call(b)];
    return c && c(a, b)
  }};
  Sa.createPayload = function(a) {
    var b = new A.TData, c = Gb[typeof a];
    if(c && c(b, a)) {
      return b
    }
    throw Error("Unsupported data type: " + Object.prototype.toString.call(a));
  };
  Sa.getPayload = function(a) {
    var b = void 0;
    switch(a.type) {
      case 1:
        b = !0;
        break;
      case 2:
        b = !1;
        break;
      case 3:
        b = a.i32Data;
        break;
      case 4:
        b = a.i64Data;
        break;
      case 5:
        b = a.doubleData;
        break;
      case 6:
        b = a.stringData;
        break;
      case 7:
        b = a.binaryData;
        break;
      case 8:
      ;
      case 9:
        b = JSON.parse(a.stringData)
    }
    return b
  };
  la = Sa;
  window.Ably = {Realtime:this.Realtime}
})();
