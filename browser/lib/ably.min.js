(function() {
  for(var vb = ["comet", "xhr", "jsonp"], $a = ["web_socket", "flash_socket", "comet", "xhr", "jsonp"], pa = {disconnected:{statusCode:408, code:80003, reason:"Connection to server temporarily unavailable"}, suspended:{statusCode:408, code:80002, reason:"Connection to server unavailable"}, failed:{statusCode:408, code:8E4, reason:"Connection failed or disconnected by server"}}, Ga = function(a, b, c) {
    function f() {
    }
    f.prototype = b.prototype;
    a.prototype = new f;
    if(c) {
      for(var d in c) {
        a.prototype[d] = c[d]
      }
    }
  }, ab = [], ga = 0;256 > ga;ga++) {
    ab[ga] = (15 < ga ? "" : "0") + ga.toString(16)
  }
  var Z = function(a, b) {
    a instanceof Array ? (this.buffer = a, this.offset = b || 0) : (this.buffer = this.buffer || Array(8), this.offset = 0, this.setValue.apply(this, arguments))
  };
  Z.MAX_INT = Math.pow(2, 53);
  Z.MIN_INT = -Math.pow(2, 53);
  Z.prototype = {_2scomp:function() {
    for(var a = this.buffer, b = this.offset, c = 1, f = b + 7;f >= b;f--) {
      c = (a[f] ^ 255) + c, a[f] = c & 255, c >>= 8
    }
  }, setValue:function(a, b) {
    var c = !1;
    if(1 == arguments.length) {
      if("number" == typeof a) {
        c = 0 > a;
        a = Math.abs(a);
        b = a % 4294967296;
        a /= 4294967296;
        if(4294967296 < a) {
          throw new RangeError(a + " is outside Int64 range");
        }
        a |= 0
      }else {
        if("string" == typeof a) {
          a = (a + "").replace(/^0x/, ""), b = a.substr(-8), a = 8 < a.length ? a.substr(0, a.length - 8) : "", a = parseInt(a, 16), b = parseInt(b, 16)
        }else {
          throw Error(a + " must be a Number or String");
        }
      }
    }
    for(var f = this.buffer, d = this.offset, e = 7;0 <= e;e--) {
      f[d + e] = b & 255, b = 4 == e ? a : b >>> 8
    }
    c && this._2scomp()
  }, toNumber:function(a) {
    for(var b = this.buffer, c = this.offset, f = b[0] & 128, d = 0, e = 1, l = 7, t = 1;0 <= l;l--, t *= 256) {
      var q = b[c + l];
      f && (q = (q ^ 255) + e, e = q >> 8, q &= 255);
      d += q * t
    }
    return!a && d >= Z.MAX_INT ? f ? -Infinity : Infinity : f ? -d : d
  }, valueOf:function() {
    return this.toNumber(!1)
  }, toString:function(a) {
    return this.valueOf().toString(a || 10)
  }, toOctetString:function(a) {
    for(var b = Array(8), c = this.buffer, f = this.offset, d = 0;8 > d;d++) {
      b[d] = ab[c[f + d]]
    }
    return b.join(a || "")
  }, inspect:function() {
    return"[Int64 value:" + this + " octets:" + this.toOctetString(" ") + "]"
  }};
  var d = {Version:"0.8.0", Type:{STOP:0, VOID:1, BOOL:2, BYTE:3, I08:3, DOUBLE:4, I16:6, I32:8, I64:10, STRING:11, UTF7:11, STRUCT:12, MAP:13, SET:14, LIST:15, UTF8:16, UTF16:17}, MessageType:{CALL:1, REPLY:2, EXCEPTION:3}, objectLength:function(a) {
    var b = 0, c;
    for(c in a) {
      a.hasOwnProperty(c) && b++
    }
    return b
  }, inherits:function(a, b) {
    function c() {
    }
    c.prototype = b.prototype;
    a.prototype = new c
  }, TException:function(a) {
    this.message = a
  }};
  d.inherits(d.TException, Error);
  d.TException.prototype.name = "TException";
  d.TApplicationExceptionType = {UNKNOWN:0, UNKNOWN_METHOD:1, INVALID_MESSAGE_TYPE:2, WRONG_METHOD_NAME:3, BAD_SEQUENCE_ID:4, MISSING_RESULT:5, INTERNAL_ERROR:6, PROTOCOL_ERROR:7};
  d.TApplicationException = function(a, b) {
    this.message = a;
    this.code = null === b ? 0 : b
  };
  d.inherits(d.TApplicationException, d.TException);
  d.TApplicationException.prototype.name = "TApplicationException";
  d.TApplicationException.prototype.read = function(a) {
    for(;;) {
      var b = a.readFieldBegin();
      if(b.ftype == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          b.ftype == d.Type.STRING ? (b = a.readString(), this.message = b.value) : a.skip(b.ftype);
          break;
        case 2:
          b.ftype == d.Type.I32 ? (b = a.readI32(), this.code = b.value) : a.skip(b.ftype);
          break;
        default:
          a.skip(b.ftype)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  d.TApplicationException.prototype.write = function(a) {
    a.writeStructBegin("TApplicationException");
    this.message && (a.writeFieldBegin("message", d.Type.STRING, 1), a.writeString(this.getMessage()), a.writeFieldEnd());
    this.code && (a.writeFieldBegin("type", d.Type.I32, 2), a.writeI32(this.code), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  d.TApplicationException.prototype.getCode = function() {
    return this.code
  };
  d.TApplicationException.prototype.getMessage = function() {
    return this.message
  };
  d.TXHRTransport = function(a) {
    this.url = a;
    this.rpos = this.wpos = 0;
    this.recv_buf = this.send_buf = ""
  };
  d.TXHRTransport.prototype = {getXmlHttpRequestObject:function() {
    try {
      return new XMLHttpRequest
    }catch(a) {
    }
    try {
      return new ActiveXObject("Msxml2.XMLHTTP")
    }catch(b) {
    }
    try {
      return new ActiveXObject("Microsoft.XMLHTTP")
    }catch(c) {
    }
    throw"Your browser doesn't support the XmlHttpRequest object.";
  }, flush:function(a) {
    if(a || void 0 === this.url || "" === this.url) {
      return this.send_buf
    }
    a = this.getXmlHttpRequestObject();
    a.overrideMimeType && a.overrideMimeType("application/json");
    a.open("POST", this.url, !1);
    a.send(this.send_buf);
    if(4 != a.readyState) {
      throw"encountered an unknown ajax ready state: " + a.readyState;
    }
    if(200 != a.status) {
      throw"encountered a unknown request status: " + a.status;
    }
    this.recv_buf = a.responseText;
    this.wpos = this.recv_buf_sz = this.recv_buf.length;
    this.rpos = 0
  }, jqRequest:function(a, b, c, f) {
    if("undefined" === typeof jQuery || "undefined" === typeof jQuery.Deferred) {
      throw"Thrift.js requires jQuery 1.5+ to use asynchronous requests";
    }
    var d = jQuery.Deferred(), e = jQuery._Deferred(), l = d.promise();
    l.success = l.done;
    l.error = l.fail;
    l.complete = e.done;
    b = jQuery.ajax({url:this.url, data:b, type:"POST", cache:!1, dataType:"text", context:this, success:this.jqResponse, error:function(b, c, f) {
      d.rejectWith(a, jQuery.merge([f], b.tArgs))
    }, complete:function(b, c) {
      e.resolveWith(a, [b, c])
    }});
    d.done(jQuery.makeArray(c).pop());
    b.tArgs = c;
    b.tClient = a;
    b.tRecvFn = f;
    b.tDfd = d;
    return l
  }, jqResponse:function(a, b, c) {
    this.setRecvBuffer(a);
    try {
      var f = c.tRecvFn.call(c.tClient);
      c.tDfd.resolveWith(c, jQuery.merge([f], c.tArgs))
    }catch(d) {
      c.tDfd.rejectWith(c, jQuery.merge([d], c.tArgs))
    }
  }, setRecvBuffer:function(a) {
    this.recv_buf = a;
    this.wpos = this.recv_buf_sz = this.recv_buf.length;
    this.rpos = 0
  }, isOpen:function() {
    return!0
  }, open:function() {
  }, close:function() {
  }, read:function(a) {
    var b = this.wpos - this.rpos;
    if(0 === b) {
      return""
    }
    var c = a;
    b < a && (c = b);
    a = this.read_buf.substr(this.rpos, c);
    this.rpos += c;
    return a
  }, readAll:function() {
    return this.recv_buf
  }, write:function(a) {
    this.send_buf = a
  }, getSendBuffer:function() {
    return this.send_buf
  }};
  d.TStringTransport = function(a, b) {
    this.send_buf = "";
    this.recv_buf = a || "";
    this.onFlush = b
  };
  d.TStringTransport.prototype = {flush:function() {
    if(this.onFlush) {
      this.onFlush(this.send_buf)
    }
  }, isOpen:function() {
    return!0
  }, open:function() {
  }, close:function() {
  }, read:function() {
    return this.recv_buf
  }, readAll:function() {
    return this.recv_buf
  }, write:function(a) {
    this.send_buf = a
  }};
  d.Protocol = function(a) {
    this.transport = a
  };
  d.Protocol.Type = {};
  d.Protocol.Type[d.Type.BOOL] = '"tf"';
  d.Protocol.Type[d.Type.BYTE] = '"i8"';
  d.Protocol.Type[d.Type.I16] = '"i16"';
  d.Protocol.Type[d.Type.I32] = '"i32"';
  d.Protocol.Type[d.Type.I64] = '"i64"';
  d.Protocol.Type[d.Type.DOUBLE] = '"dbl"';
  d.Protocol.Type[d.Type.STRUCT] = '"rec"';
  d.Protocol.Type[d.Type.STRING] = '"str"';
  d.Protocol.Type[d.Type.MAP] = '"map"';
  d.Protocol.Type[d.Type.LIST] = '"lst"';
  d.Protocol.Type[d.Type.SET] = '"set"';
  d.Protocol.RType = {};
  d.Protocol.RType.tf = d.Type.BOOL;
  d.Protocol.RType.i8 = d.Type.BYTE;
  d.Protocol.RType.i16 = d.Type.I16;
  d.Protocol.RType.i32 = d.Type.I32;
  d.Protocol.RType.i64 = d.Type.I64;
  d.Protocol.RType.dbl = d.Type.DOUBLE;
  d.Protocol.RType.rec = d.Type.STRUCT;
  d.Protocol.RType.str = d.Type.STRING;
  d.Protocol.RType.map = d.Type.MAP;
  d.Protocol.RType.lst = d.Type.LIST;
  d.Protocol.RType.set = d.Type.SET;
  d.Protocol.Version = 1;
  d.Protocol.prototype = {getTransport:function() {
    return this.transport
  }, writeMessageBegin:function(a, b, c) {
    this.tstack = [];
    this.tpos = [];
    this.tstack.push([d.Protocol.Version, '"' + a + '"', b, c])
  }, writeMessageEnd:function() {
    var a = this.tstack.pop();
    this.wobj = this.tstack.pop();
    this.wobj.push(a);
    this.wbuf = "[" + this.wobj.join(",") + "]";
    this.transport.write(this.wbuf)
  }, writeStructBegin:function() {
    this.tpos.push(this.tstack.length);
    this.tstack.push({})
  }, writeStructEnd:function() {
    var a = this.tpos.pop(), b = this.tstack[a], c = "{", f = !0, d;
    for(d in b) {
      f ? f = !1 : c += ",", c += d + ":" + b[d]
    }
    this.tstack[a] = c + "}"
  }, writeFieldBegin:function(a, b, c) {
    this.tpos.push(this.tstack.length);
    this.tstack.push({fieldId:'"' + c + '"', fieldType:d.Protocol.Type[b]})
  }, writeFieldEnd:function() {
    var a = this.tstack.pop(), b = this.tstack.pop();
    this.tstack[this.tstack.length - 1][b.fieldId] = "{" + b.fieldType + ":" + a + "}";
    this.tpos.pop()
  }, writeFieldStop:function() {
  }, writeMapBegin:function(a, b) {
    this.tpos.push(this.tstack.length);
    this.tstack.push([d.Protocol.Type[a], d.Protocol.Type[b], 0])
  }, writeMapEnd:function() {
    var a = this.tpos.pop();
    if(a != this.tstack.length) {
      0 !== (this.tstack.length - a - 1) % 2 && this.tstack.push("");
      this.tstack[a][this.tstack[a].length - 1] = (this.tstack.length - a - 1) / 2;
      for(var b = "}", c = !0;this.tstack.length > a + 1;) {
        var f = this.tstack.pop(), d = this.tstack.pop();
        c ? c = !1 : b = "," + b;
        isNaN(d) || (d = '"' + d + '"');
        b = d + ":" + f + b
      }
      this.tstack[a].push("{" + b);
      this.tstack[a] = "[" + this.tstack[a].join(",") + "]"
    }
  }, writeListBegin:function(a, b) {
    this.tpos.push(this.tstack.length);
    this.tstack.push([d.Protocol.Type[a], b])
  }, writeListEnd:function() {
    for(var a = this.tpos.pop();this.tstack.length > a + 1;) {
      var b = this.tstack[a + 1];
      this.tstack.splice(a + 1, 1);
      this.tstack[a].push(b)
    }
    this.tstack[a] = "[" + this.tstack[a].join(",") + "]"
  }, writeSetBegin:function(a, b) {
    this.tpos.push(this.tstack.length);
    this.tstack.push([d.Protocol.Type[a], b])
  }, writeSetEnd:function() {
    for(var a = this.tpos.pop();this.tstack.length > a + 1;) {
      var b = this.tstack[a + 1];
      this.tstack.splice(a + 1, 1);
      this.tstack[a].push(b)
    }
    this.tstack[a] = "[" + this.tstack[a].join(",") + "]"
  }, writeBool:function(a) {
    this.tstack.push(a ? 1 : 0)
  }, writeByte:function(a) {
    this.tstack.push(a)
  }, writeI16:function(a) {
    this.tstack.push(a)
  }, writeI32:function(a) {
    this.tstack.push(a)
  }, writeI64:function(a) {
    this.tstack.push(a)
  }, writeDouble:function(a) {
    this.tstack.push(a)
  }, writeString:function(a) {
    if(null === a) {
      this.tstack.push(null)
    }else {
      for(var b = "", c = 0;c < a.length;c++) {
        var f = a.charAt(c), b = '"' === f ? b + '\\"' : "\\" === f ? b + "\\\\" : "\b" === f ? b + "\\b" : "\f" === f ? b + "\\f" : "\n" === f ? b + "\\n" : "\r" === f ? b + "\\r" : "\t" === f ? b + "\\t" : b + f
      }
      this.tstack.push('"' + b + '"')
    }
  }, writeBinary:function(a) {
    this.writeString(a)
  }, readMessageBegin:function() {
    this.rstack = [];
    this.rpos = [];
    this.robj = "undefined" !== typeof jQuery ? jQuery.parseJSON(this.transport.readAll()) : eval(this.transport.readAll());
    var a = {}, b = this.robj.shift();
    if(b != d.Protocol.Version) {
      throw"Wrong thrift protocol version: " + b;
    }
    a.fname = this.robj.shift();
    a.mtype = this.robj.shift();
    a.rseqid = this.robj.shift();
    this.rstack.push(this.robj.shift());
    return a
  }, readMessageEnd:function() {
  }, readStructBegin:function() {
    this.rstack[this.rstack.length - 1] instanceof Array && this.rstack.push(this.rstack[this.rstack.length - 1].shift());
    return{fname:""}
  }, readStructEnd:function() {
    this.rstack[this.rstack.length - 2] instanceof Array && this.rstack.pop()
  }, readFieldBegin:function() {
    var a = {}, b = -1, c = d.Type.STOP, f;
    for(f in this.rstack[this.rstack.length - 1]) {
      if(null !== f) {
        b = parseInt(f, 10);
        this.rpos.push(this.rstack.length);
        f = this.rstack[this.rstack.length - 1][b];
        delete this.rstack[this.rstack.length - 1][b];
        this.rstack.push(f);
        break
      }
    }
    if(-1 != b) {
      for(var m in this.rstack[this.rstack.length - 1]) {
        null !== d.Protocol.RType[m] && (c = d.Protocol.RType[m], this.rstack[this.rstack.length - 1] = this.rstack[this.rstack.length - 1][m])
      }
    }
    a.fname = "";
    a.ftype = c;
    a.fid = b;
    return a
  }, readFieldEnd:function() {
    for(var a = this.rpos.pop();this.rstack.length > a;) {
      this.rstack.pop()
    }
  }, readMapBegin:function() {
    var a = this.rstack.pop(), b = {};
    b.ktype = d.Protocol.RType[a.shift()];
    b.vtype = d.Protocol.RType[a.shift()];
    b.size = a.shift();
    this.rpos.push(this.rstack.length);
    this.rstack.push(a.shift());
    return b
  }, readMapEnd:function() {
    this.readFieldEnd()
  }, readListBegin:function() {
    var a = this.rstack[this.rstack.length - 1], b = {};
    b.etype = d.Protocol.RType[a.shift()];
    b.size = a.shift();
    this.rpos.push(this.rstack.length);
    this.rstack.push(a);
    return b
  }, readListEnd:function() {
    this.readFieldEnd()
  }, readSetBegin:function(a, b) {
    return this.readListBegin(a, b)
  }, readSetEnd:function() {
    return this.readListEnd()
  }, readBool:function() {
    var a = this.readI32();
    a.value = null !== a && "1" == a.value ? !0 : !1;
    return a
  }, readByte:function() {
    return this.readI32()
  }, readI16:function() {
    return this.readI32()
  }, readI32:function(a) {
    void 0 === a && (a = this.rstack[this.rstack.length - 1]);
    var b = {};
    if(a instanceof Array) {
      b.value = 0 === a.length ? void 0 : a.shift()
    }else {
      if(a instanceof Object) {
        for(var c in a) {
          if(null !== c) {
            this.rstack.push(a[c]);
            delete a[c];
            b.value = c;
            break
          }
        }
      }else {
        b.value = a, this.rstack.pop()
      }
    }
    return b
  }, readI64:function() {
    return this.readI32()
  }, readDouble:function() {
    return this.readI32()
  }, readString:function() {
    return this.readI32()
  }, readBinary:function() {
    return this.readString()
  }, skip:function() {
    throw"skip not supported yet";
  }};
  d.TJSONProtocol = function(a) {
    this.transport = a;
    this.reset()
  };
  d.TJSONProtocol.Type = {};
  d.TJSONProtocol.Type[d.Type.BOOL] = "tf";
  d.TJSONProtocol.Type[d.Type.BYTE] = "i8";
  d.TJSONProtocol.Type[d.Type.I16] = "i16";
  d.TJSONProtocol.Type[d.Type.I32] = "i32";
  d.TJSONProtocol.Type[d.Type.I64] = "i64";
  d.TJSONProtocol.Type[d.Type.DOUBLE] = "dbl";
  d.TJSONProtocol.Type[d.Type.STRUCT] = "rec";
  d.TJSONProtocol.Type[d.Type.STRING] = "str";
  d.TJSONProtocol.Type[d.Type.MAP] = "map";
  d.TJSONProtocol.Type[d.Type.LIST] = "lst";
  d.TJSONProtocol.Type[d.Type.SET] = "set";
  d.TJSONProtocol.getValueFromScope = function(a) {
    var b = a.listvalue;
    return b ? b.shift() : a.value
  };
  d.TJSONProtocol.getScopeFromScope = function(a) {
    var b = a.listvalue;
    b && (a = {value:b.shift()});
    return a
  };
  d.TJSONProtocol.prototype = {reset:function() {
    this.elementStack = []
  }, writeMessageBegin:function() {
    throw Error("TJSONProtocol: Message not supported");
  }, writeMessageEnd:function() {
  }, writeStructBegin:function() {
    this.elementStack.unshift({})
  }, writeStructEnd:function() {
    var a = this.elementStack.shift();
    0 == this.elementStack.length ? this.transport.write(JSON.stringify(a)) : this.elementStack[0].value.push(a)
  }, writeFieldBegin:function(a, b, c) {
    this.elementStack.unshift({name:a, fieldType:d.TJSONProtocol.Type[b], fieldId:c, value:[]})
  }, writeFieldEnd:function() {
    var a = this.elementStack.shift(), b = {};
    b[a.fieldType] = a.value[0];
    this.elementStack[0][a.fieldId] = b
  }, writeFieldStop:function() {
  }, writeMapBegin:function(a, b, c) {
    this.elementStack.unshift({value:[d.TJSONProtocol.Type[a], d.TJSONProtocol.Type[b], c]})
  }, writeMapEnd:function() {
    var a = this.elementStack.shift();
    this.elementStack[0].value.push(a.value)
  }, writeListBegin:function(a, b) {
    this.elementStack.unshift({name:name, value:[d.TJSONProtocol.Type[a], b]})
  }, writeListEnd:function() {
    var a = this.elementStack.shift();
    this.elementStack[0].value.push(a.value)
  }, writeSetBegin:function(a, b) {
    this.elementStack.unshift({name:name, value:[d.TJSONProtocol.Type[a], b]})
  }, writeSetEnd:function() {
    var a = this.elementStack.shift();
    this.elementStack[0].value.push(a.value)
  }, writeBool:function(a) {
    this.elementStack[0].value.push(a ? 1 : 0)
  }, writeByte:function(a) {
    this.elementStack[0].value.push(a)
  }, writeI16:function(a) {
    this.elementStack[0].value.push(a)
  }, writeI32:function(a) {
    this.elementStack[0].value.push(a)
  }, writeI64:function(a) {
    this.elementStack[0].value.push(a)
  }, writeDouble:function(a) {
    this.elementStack[0].value.push(a)
  }, writeString:function(a) {
    this.elementStack[0].value.push(a)
  }, writeBinary:function(a) {
    this.elementStack[0].value.push(a)
  }, readMessageBegin:function() {
    throw Error("TJSONProtocol: Message not supported");
  }, readMessageEnd:function() {
  }, readStructBegin:function() {
    var a;
    a = 0 == this.elementStack.length ? JSON.parse(this.transport.readAll()) : d.TJSONProtocol.getValueFromScope(this.elementStack[0]);
    var b = [], c;
    for(c in a) {
      b.push(c)
    }
    this.elementStack.unshift({fields:b, value:a});
    return{fname:""}
  }, readStructEnd:function() {
    this.elementStack.shift()
  }, readFieldBegin:function() {
    var a = this.elementStack[0], b = d.TJSONProtocol.getValueFromScope(a), a = a.fields.shift();
    if(!a) {
      return{fname:"", ftype:d.Type.STOP}
    }
    var b = b[a], c;
    for(c in b) {
      return this.elementStack.unshift({value:b[c]}), {fname:"", fid:Number(a), ftype:d.Protocol.RType[c]}
    }
    throw Error("TJSONProtocol: parse error reading field value");
  }, readFieldEnd:function() {
    this.elementStack.shift()
  }, readMapBegin:function() {
    var a = d.TJSONProtocol.getValueFromScope(this.elementStack[0]), b = {ktype:d.Protocol.RType[a.shift()], vtype:d.Protocol.RType[a.shift()], size:a.shift()};
    this.elementStack.unshift({listvalue:a});
    return b
  }, readMapEnd:function() {
    this.elementStack.shift()
  }, readListBegin:function() {
    var a = d.TJSONProtocol.getValueFromScope(this.elementStack[0]), b = {etype:d.Protocol.RType[a.shift()], size:a.shift()};
    this.elementStack.unshift({listvalue:a});
    return b
  }, readListEnd:function() {
    this.elementStack.shift()
  }, readSetBegin:function() {
    var a = d.TJSONProtocol.getValueFromScope(this.elementStack[0]), b = {etype:d.Protocol.RType[a.shift()], size:a.shift()};
    this.elementStack.unshift({listvalue:a});
    return b
  }, readSetEnd:function() {
    this.elementStack.shift()
  }, readBool:function() {
    return!!d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readByte:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readI16:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readI32:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readI64:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readDouble:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readString:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readBinary:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, flush:function() {
    this.transport.flush()
  }};
  var Ha = {encode:function(a, b, c) {
    for(var f = c, d = 0;d < a.length;d++) {
      var e = a.charCodeAt(d);
      128 > e ? b.setInt8(f++, e) : (127 < e && 2048 > e ? b.setInt8(f++, e >> 6 | 192) : (b.setInt8(f++, e >> 12 | 224), b.setInt8(f++, e >> 6 & 63 | 128)), b.setInt8(f++, e & 63 | 128))
    }
    return f - c
  }, decode:function(a, b, c) {
    for(var f = "", d = b, c = c + b, b = c1 = c2 = 0;d < c;) {
      b = a.getInt8(d++), 128 > b ? f += String.fromCharCode(b) : 191 < b && 224 > b ? (c2 = a.getInt8(d++), f += String.fromCharCode((b & 31) << 6 | c2 & 63)) : (c2 = a.getInt8(d++), c3 = a.getInt8(d++), f += String.fromCharCode((b & 15) << 12 | (c2 & 63) << 6 | c3 & 63))
    }
    return f
  }}, E = function(a) {
    this.offset = 0;
    if(this.length = a) {
      a = this.buf = new ArrayBuffer(a), this.view = new DataView(a)
    }
  };
  E.prototype = {getArray:function() {
    this.array || (this.array = new Uint8Array(this.buf, this.offset, this.length));
    return this.array
  }, slice:function(a, b) {
    var a = a || 0, b = b || this.length, c = new E, f = c.length = b - a, d = c.offset = this.offset + a, e = c.buf = this.buf;
    c.view = new DataView(e, d, f);
    return c
  }, getInt8:function(a) {
    return this.view.getInt8(a)
  }, getInt16:function(a) {
    return this.view.getInt16(a, !1)
  }, getInt32:function(a) {
    return this.view.getInt32(a, !1)
  }, getInt64:function(a) {
    var b = this.view.getInt32(a, !1), a = this.view.getUint32(a + 4, !1);
    return new Z(b, a)
  }, getFloat64:function(a) {
    return this.view.getFloat64(a, !1)
  }, getUtf8String:function(a, b) {
    return Ha.decode(this.view, a, b)
  }, setInt8:function(a, b) {
    this.view.setInt8(a, b)
  }, setInt16:function(a, b) {
    this.view.setInt16(a, b, !1)
  }, setInt32:function(a, b) {
    this.view.setInt32(a, b, !1)
  }, setInt64:function(a, b) {
    this.getArray().set(b.buffer, a)
  }, setFloat64:function(a, b) {
    this.view.setFloat64(a, b, !1)
  }, setBuffer:function(a, b) {
    this.getArray().set(b.getArray(), a)
  }, setUtf8String:function(a, b) {
    return Ha.encode(b, this.view, a)
  }, inspect:function() {
    for(var a = "length: " + this.length + "\n", b = 0;b < this.length;) {
      for(var c = 0;b < this.length && 32 > c;c++) {
        a += this.view.getInt8(b++).toString(16) + " "
      }
      a += "\n"
    }
    return a
  }};
  var wb = d.CheckedBuffer = function(a) {
    E.call(this, a)
  };
  Ga(wb, E, {grow:function(a) {
    var a = this.length + Math.max(a || 0, 0.41 * this.length), b = getArray();
    this.buf = new ArrayBuffer(a);
    this.view = new DataView(this.buf);
    this.getArray().set(b);
    this.offset = 0;
    this.length = a
  }, checkAvailable:function(a, b) {
    a + b >= this.length && this.grow(b)
  }, setInt8:function(a, b) {
    this.checkAvailable(1);
    this.view.setInt8(a, b)
  }, setInt16:function(a, b) {
    this.checkAvailable(2);
    this.view.setInt16(a, b, !1)
  }, setInt32:function(a, b) {
    this.checkAvailable(4);
    this.view.setInt32(a, b, !1)
  }, setInt64:function(a, b) {
    this.checkAvailable(8);
    this.getArray().set(b.buffer, a)
  }, setFloat64:function(a, b) {
    this.checkAvailable(8);
    this.view.setFloat64(a, b, !1)
  }, setBuffer:function(a, b) {
    this.checkAvailable(b.length);
    this.getArray().set(b.getArray(), a)
  }, setUtf8String:function(a, b) {
    for(;;) {
      try {
        return Ha.encode(b, this.view, a)
      }catch(c) {
        this.grow()
      }
    }
  }});
  var A = d.Type, Ia = function(a, b) {
    Error.call(this, b);
    this.name = "TProtocolException";
    this.type = a
  };
  Ga(Ia, Error);
  var i = d.TBinaryProtocol = function(a, b, c) {
    this.trans = a;
    this.strictRead = void 0 !== b ? b : !1;
    this.strictWrite = void 0 !== c ? c : !0
  };
  i.prototype.flush = function() {
    return this.trans.flush()
  };
  i.prototype.writeMessageBegin = function(a, b, c) {
    this.strictWrite ? (this.writeI32(-2147418112 | b), this.writeString(a)) : (this.writeString(a), this.writeByte(b));
    this.writeI32(c)
  };
  i.prototype.writeMessageEnd = function() {
  };
  i.prototype.writeStructBegin = function() {
  };
  i.prototype.writeStructEnd = function() {
  };
  i.prototype.writeFieldBegin = function(a, b, c) {
    this.writeByte(b);
    this.writeI16(c)
  };
  i.prototype.writeFieldEnd = function() {
  };
  i.prototype.writeFieldStop = function() {
    this.writeByte(A.STOP)
  };
  i.prototype.writeMapBegin = function(a, b, c) {
    this.writeByte(a);
    this.writeByte(b);
    this.writeI32(c)
  };
  i.prototype.writeMapEnd = function() {
  };
  i.prototype.writeListBegin = function(a, b) {
    this.writeByte(a);
    this.writeI32(b)
  };
  i.prototype.writeListEnd = function() {
  };
  i.prototype.writeSetBegin = function(a, b) {
    this.writeByte(a);
    this.writeI32(b)
  };
  i.prototype.writeSetEnd = function() {
  };
  i.prototype.writeBool = function(a) {
    this.writeByte(a ? 1 : 0)
  };
  i.prototype.writeByte = function(a) {
    this.trans.writeByte(a)
  };
  i.prototype.writeI16 = function(a) {
    this.trans.writeI16(a)
  };
  i.prototype.writeI32 = function(a) {
    this.trans.writeI32(a)
  };
  i.prototype.writeI64 = function(a) {
    a.buffer ? this.trans.writeI64(a) : this.trans.writeI64(new Z(a))
  };
  i.prototype.writeDouble = function(a) {
    this.trans.writeDouble(a)
  };
  i.prototype.writeString = function(a) {
    this.trans.writeWithLength(a)
  };
  i.prototype.writeBinary = function(a) {
    this.trans.writeWithLength(a)
  };
  i.prototype.readMessageBegin = function() {
    var a = this.readI32(), b, c;
    if(0 > a) {
      b = a & -65536;
      if(-2147418112 != b) {
        throw console.log("BAD: " + b), Ia(4, "Bad version in readMessageBegin: " + a);
      }
      a &= 255;
      b = this.readString()
    }else {
      if(this.strictRead) {
        throw Ia(4, "No protocol version header");
      }
      b = this.trans.read(a);
      a = this.readByte()
    }
    c = this.readI32();
    return{fname:b, mtype:a, rseqid:c}
  };
  i.prototype.readMessageEnd = function() {
  };
  i.prototype.readStructBegin = function() {
    return{fname:""}
  };
  i.prototype.readStructEnd = function() {
  };
  i.prototype.readFieldBegin = function() {
    var a = this.readByte();
    if(a == A.STOP) {
      return{fname:null, ftype:a, fid:0}
    }
    var b = this.readI16();
    return{fname:null, ftype:a, fid:b}
  };
  i.prototype.readFieldEnd = function() {
  };
  i.prototype.readMapBegin = function() {
    var a = this.readByte(), b = this.readByte(), c = this.readI32();
    return{ktype:a, vtype:b, size:c}
  };
  i.prototype.readMapEnd = function() {
  };
  i.prototype.readListBegin = function() {
    var a = this.readByte(), b = this.readI32();
    return{etype:a, size:b}
  };
  i.prototype.readListEnd = function() {
  };
  i.prototype.readSetBegin = function() {
    var a = this.readByte(), b = this.readI32();
    return{etype:a, size:b}
  };
  i.prototype.readSetEnd = function() {
  };
  i.prototype.readBool = function() {
    return 0 == this.readByte() ? !1 : !0
  };
  i.prototype.readByte = function() {
    return this.trans.readByte()
  };
  i.prototype.readI16 = function() {
    return this.trans.readI16()
  };
  i.prototype.readI32 = function() {
    return this.trans.readI32()
  };
  i.prototype.readI64 = function() {
    return this.trans.readI64()
  };
  i.prototype.readDouble = function() {
    return this.trans.readDouble()
  };
  i.prototype.readBinary = function() {
    var a = this.readI32();
    return this.trans.read(a)
  };
  i.prototype.readString = function() {
    var a = this.readI32();
    return this.trans.readString(a)
  };
  i.prototype.getTransport = function() {
    return this.trans
  };
  i.prototype.skip = function(a) {
    switch(a) {
      case A.STOP:
        break;
      case A.BOOL:
        this.readBool();
        break;
      case A.BYTE:
        this.readByte();
        break;
      case A.I16:
        this.readI16();
        break;
      case A.I32:
        this.readI32();
        break;
      case A.I64:
        this.readI64();
        break;
      case A.DOUBLE:
        this.readDouble();
        break;
      case A.STRING:
        this.readString();
        break;
      case A.STRUCT:
        for(this.readStructBegin();;) {
          a = this.readFieldBegin();
          if(a.ftype === A.STOP) {
            break
          }
          this.skip(a.ftype);
          this.readFieldEnd()
        }
        this.readStructEnd();
        break;
      case A.MAP:
        for(var a = this.readMapBegin(), b = 0;b < a.size;++b) {
          this.skip(a.ktype), this.skip(a.vtype)
        }
        this.readMapEnd();
        break;
      case A.SET:
        a = this.readSetBegin();
        for(b = 0;b < a.size;++b) {
          this.skip(a.etype)
        }
        this.readSetEnd();
        break;
      case A.LIST:
        a = this.readListBegin();
        for(b = 0;b < a.size;++b) {
          this.skip(a.etype)
        }
        this.readListEnd();
        break;
      default:
        throw Error("Invalid type: " + a);
    }
  };
  var xb = new E(0), $ = d.TTransport = function(a, b) {
    this.buf = a || xb;
    this.onFlush = b;
    this.reset()
  };
  $.receiver = function(a) {
    return function(b) {
      a(new $(b))
    }
  };
  $.prototype = {commitPosition:function() {
  }, rollbackPosition:function() {
  }, reset:function() {
    this.pos = 0
  }, isOpen:function() {
    return!0
  }, open:function() {
  }, close:function() {
  }, read:function(a) {
    var b = this.pos + a;
    if(this.buf.length < b) {
      throw Error("read(" + a + ") failed - not enough data");
    }
    a = this.buf.slice(this.pos, b);
    this.pos = b;
    return a
  }, readByte:function() {
    return this.buf.getInt8(this.pos++)
  }, readI16:function() {
    var a = this.buf.getInt16(this.pos);
    this.pos += 2;
    return a
  }, readI32:function() {
    var a = this.buf.getInt32(this.pos);
    this.pos += 4;
    return a
  }, readDouble:function() {
    var a = this.buf.getFloat64(this.pos);
    this.pos += 8;
    return a
  }, readString:function(a) {
    var b = this.buf.getUtf8String(this.pos, a);
    this.pos += a;
    return b
  }, readAll:function() {
    return this.buf
  }, writeByte:function(a) {
    this.buf.setInt8(this.pos++, a)
  }, writeI16:function(a) {
    this.buf.setInt16(this.pos, a);
    this.pos += 2
  }, writeI32:function(a) {
    this.buf.setInt32(this.pos, a);
    this.pos += 4
  }, writeI64:function(a) {
    this.buf.setInt64(this.pos, a);
    this.pos += 8
  }, writeDouble:function(a) {
    this.buf.setFloat64(this.pos, a);
    this.pos += 8
  }, write:function(a) {
    "string" === typeof a ? this.pos += this.setUtf8String(this.pos, a) : (this.setBuffer(this.pos, a), this.pos += a.length)
  }, writeWithLength:function(a) {
    "string" === typeof a ? a = this.buf.setUtf8String(this.pos + 4, a) : (this.setBuffer(this.pos + 4, a), a = a.length);
    this.buf.setInt32(this.pos, a);
    this.pos += a + 4
  }, flush:function(a) {
    if(a = a || this.onFlush) {
      var b = this.buf.slice(0, this.pos);
      a(b)
    }
  }};
  var Ja = d.TFramedTransport = function(a, b) {
    $.call(this, a, b)
  };
  Ja.receiver = function(a) {
    var b = 0, c = 0, f = null, d = null;
    return function(e) {
      if(d) {
        var l = new E(e.length + d.length);
        d.copy(l, 0, 0);
        e.copy(l, d.length, 0);
        d = null
      }
      for(;e.length;) {
        if(0 === b) {
          if(4 > e.length) {
            console.log("Expecting > 4 bytes, found only " + e.length);
            d = e;
            break
          }
          b = binary.readI32(e, 0);
          f = new E(b);
          c = 0;
          e = e.slice(4, e.length)
        }
        e.length >= b ? (e.copy(f, c, 0, b), e = e.slice(b, e.length), b = 0, a(new Ja(f))) : e.length && (e.copy(f, c, 0, e.length), b -= e.length, c += e.length, e = e.slice(e.length, e.length))
      }
    }
  };
  Ga(Ja, $, {flush:function() {
    var a = this;
    $.prototype.flush.call(this, function(b) {
      if(a.onFlush) {
        var c = new E(b.length + 4);
        binary.writeI32(c, b.length);
        b.copy(c, 4, 0, b.length);
        a.onFlush(c)
      }
    })
  }});
  var S, T, U, aa, ha;
  TAction = {HEARTBEAT:0, ACK:1, NACK:2, CONNECT:3, CONNECTED:4, ERROR:5, ATTACH:6, ATTACHED:7, DETACH:8, DETACHED:9, PRESENCE:10, MESSAGE:11};
  TType = {NONE:0, TRUE:1, FALSE:2, INT32:3, INT64:4, DOUBLE:5, STRING:6, BUFFER:7, JSONARRAY:8, JSONOBJECT:9};
  TPresenceState = {ENTER:0, LEAVE:1};
  TError = function(a) {
    this.reason = this.code = this.statusCode = null;
    a && (void 0 !== a.statusCode && (this.statusCode = a.statusCode), void 0 !== a.code && (this.code = a.code), void 0 !== a.reason && (this.reason = a.reason))
  };
  TError.prototype = {};
  TError.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.I16 ? this.statusCode = a.readI16() : a.skip(c);
          break;
        case 2:
          c == d.Type.I16 ? this.code = a.readI16() : a.skip(c);
          break;
        case 3:
          c == d.Type.STRING ? this.reason = a.readString() : a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  TError.prototype.write = function(a) {
    a.writeStructBegin("TError");
    null !== this.statusCode && (a.writeFieldBegin("statusCode", d.Type.I16, 1), a.writeI16(this.statusCode), a.writeFieldEnd());
    null !== this.code && (a.writeFieldBegin("code", d.Type.I16, 2), a.writeI16(this.code), a.writeFieldEnd());
    null !== this.reason && (a.writeFieldBegin("reason", d.Type.STRING, 3), a.writeString(this.reason), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  S = function(a) {
    this.binaryData = this.stringData = this.doubleData = this.i64Data = this.i32Data = this.type = null;
    a && (void 0 !== a.type && (this.type = a.type), void 0 !== a.i32Data && (this.i32Data = a.i32Data), void 0 !== a.i64Data && (this.i64Data = a.i64Data), void 0 !== a.doubleData && (this.doubleData = a.doubleData), void 0 !== a.stringData && (this.stringData = a.stringData), void 0 !== a.binaryData && (this.binaryData = a.binaryData))
  };
  S.prototype = {};
  S.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.I32 ? this.type = a.readI32() : a.skip(c);
          break;
        case 2:
          c == d.Type.I32 ? this.i32Data = a.readI32() : a.skip(c);
          break;
        case 3:
          c == d.Type.I64 ? this.i64Data = a.readI64() : a.skip(c);
          break;
        case 4:
          c == d.Type.DOUBLE ? this.doubleData = a.readDouble() : a.skip(c);
          break;
        case 5:
          c == d.Type.STRING ? this.stringData = a.readString() : a.skip(c);
          break;
        case 6:
          c == d.Type.STRING ? this.binaryData = a.readBinary() : a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  S.prototype.write = function(a) {
    a.writeStructBegin("TData");
    null !== this.type && (a.writeFieldBegin("type", d.Type.I32, 1), a.writeI32(this.type), a.writeFieldEnd());
    null !== this.i32Data && (a.writeFieldBegin("i32Data", d.Type.I32, 2), a.writeI32(this.i32Data), a.writeFieldEnd());
    null !== this.i64Data && (a.writeFieldBegin("i64Data", d.Type.I64, 3), a.writeI64(this.i64Data), a.writeFieldEnd());
    null !== this.doubleData && (a.writeFieldBegin("doubleData", d.Type.DOUBLE, 4), a.writeDouble(this.doubleData), a.writeFieldEnd());
    null !== this.stringData && (a.writeFieldBegin("stringData", d.Type.STRING, 5), a.writeString(this.stringData), a.writeFieldEnd());
    null !== this.binaryData && (a.writeFieldBegin("binaryData", d.Type.STRING, 6), a.writeString(this.binaryData), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  T = function(a) {
    this.clientData = this.connectionId = this.clientId = this.state = null;
    a && (void 0 !== a.state && (this.state = a.state), void 0 !== a.clientId && (this.clientId = a.clientId), void 0 !== a.connectionId && (this.connectionId = a.connectionId), void 0 !== a.clientData && (this.clientData = a.clientData))
  };
  T.prototype = {};
  T.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.I32 ? this.state = a.readI32() : a.skip(c);
          break;
        case 2:
          c == d.Type.STRING ? this.clientId = a.readString() : a.skip(c);
          break;
        case 3:
          c == d.Type.STRING ? this.connectionId = a.readString() : a.skip(c);
          break;
        case 4:
          c == d.Type.STRUCT ? (this.clientData = new S, this.clientData.read(a)) : a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  T.prototype.write = function(a) {
    a.writeStructBegin("TPresence");
    null !== this.state && (a.writeFieldBegin("state", d.Type.I32, 1), a.writeI32(this.state), a.writeFieldEnd());
    null !== this.clientId && (a.writeFieldBegin("clientId", d.Type.STRING, 2), a.writeString(this.clientId), a.writeFieldEnd());
    null !== this.connectionId && (a.writeFieldBegin("connectionId", d.Type.STRING, 3), a.writeString(this.connectionId), a.writeFieldEnd());
    null !== this.clientData && (a.writeFieldBegin("clientData", d.Type.STRUCT, 4), this.clientData.write(a), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  TPresenceArray = function(a) {
    this.items = null;
    a && void 0 !== a.items && (this.items = a.items)
  };
  TPresenceArray.prototype = {};
  TPresenceArray.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          if(c == d.Type.LIST) {
            b = 0;
            this.items = [];
            b = a.readListBegin().size;
            for(c = 0;c < b;++c) {
              var f = null, f = new T;
              f.read(a);
              this.items.push(f)
            }
            a.readListEnd()
          }else {
            a.skip(c)
          }
          break;
        case 0:
          a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  TPresenceArray.prototype.write = function(a) {
    a.writeStructBegin("TPresenceArray");
    if(null !== this.items) {
      a.writeFieldBegin("items", d.Type.LIST, 1);
      a.writeListBegin(d.Type.STRUCT, this.items.length);
      for(var b in this.items) {
        this.items.hasOwnProperty(b) && (b = this.items[b], b.write(a))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  U = function(a) {
    this.tags = this.data = this.timestamp = this.clientId = this.name = null;
    a && (void 0 !== a.name && (this.name = a.name), void 0 !== a.clientId && (this.clientId = a.clientId), void 0 !== a.timestamp && (this.timestamp = a.timestamp), void 0 !== a.data && (this.data = a.data), void 0 !== a.tags && (this.tags = a.tags))
  };
  U.prototype = {};
  U.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.STRING ? this.name = a.readString() : a.skip(c);
          break;
        case 2:
          c == d.Type.STRING ? this.clientId = a.readString() : a.skip(c);
          break;
        case 3:
          c == d.Type.I64 ? this.timestamp = a.readI64() : a.skip(c);
          break;
        case 4:
          c == d.Type.STRUCT ? (this.data = new S, this.data.read(a)) : a.skip(c);
          break;
        case 5:
          if(c == d.Type.LIST) {
            b = 0;
            this.tags = [];
            b = a.readListBegin().size;
            for(c = 0;c < b;++c) {
              var f = null, f = a.readString();
              this.tags.push(f)
            }
            a.readListEnd()
          }else {
            a.skip(c)
          }
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  U.prototype.write = function(a) {
    a.writeStructBegin("TMessage");
    null !== this.name && (a.writeFieldBegin("name", d.Type.STRING, 1), a.writeString(this.name), a.writeFieldEnd());
    null !== this.clientId && (a.writeFieldBegin("clientId", d.Type.STRING, 2), a.writeString(this.clientId), a.writeFieldEnd());
    null !== this.timestamp && (a.writeFieldBegin("timestamp", d.Type.I64, 3), a.writeI64(this.timestamp), a.writeFieldEnd());
    null !== this.data && (a.writeFieldBegin("data", d.Type.STRUCT, 4), this.data.write(a), a.writeFieldEnd());
    if(null !== this.tags) {
      a.writeFieldBegin("tags", d.Type.LIST, 5);
      a.writeListBegin(d.Type.STRING, this.tags.length);
      for(var b in this.tags) {
        this.tags.hasOwnProperty(b) && (b = this.tags[b], a.writeString(b))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  TMessageArray = function(a) {
    this.items = null;
    a && void 0 !== a.items && (this.items = a.items)
  };
  TMessageArray.prototype = {};
  TMessageArray.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          if(c == d.Type.LIST) {
            b = 0;
            this.items = [];
            b = a.readListBegin().size;
            for(c = 0;c < b;++c) {
              var f = null, f = new U;
              f.read(a);
              this.items.push(f)
            }
            a.readListEnd()
          }else {
            a.skip(c)
          }
          break;
        case 0:
          a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  TMessageArray.prototype.write = function(a) {
    a.writeStructBegin("TMessageArray");
    if(null !== this.items) {
      a.writeFieldBegin("items", d.Type.LIST, 1);
      a.writeListBegin(d.Type.STRUCT, this.items.length);
      for(var b in this.items) {
        this.items.hasOwnProperty(b) && (b = this.items[b], b.write(a))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  aa = function(a) {
    this.presence = this.messages = this.timestamp = this.msgSerial = this.channelSerial = this.channel = this.connectionSerial = this.connectionId = this.applicationId = this.error = this.size = this.count = this.action = null;
    a && (void 0 !== a.action && (this.action = a.action), void 0 !== a.count && (this.count = a.count), void 0 !== a.size && (this.size = a.size), void 0 !== a.error && (this.error = a.error), void 0 !== a.applicationId && (this.applicationId = a.applicationId), void 0 !== a.connectionId && (this.connectionId = a.connectionId), void 0 !== a.connectionSerial && (this.connectionSerial = a.connectionSerial), void 0 !== a.channel && (this.channel = a.channel), void 0 !== a.channelSerial && (this.channelSerial = 
    a.channelSerial), void 0 !== a.msgSerial && (this.msgSerial = a.msgSerial), void 0 !== a.timestamp && (this.timestamp = a.timestamp), void 0 !== a.messages && (this.messages = a.messages), void 0 !== a.presence && (this.presence = a.presence))
  };
  aa.prototype = {};
  aa.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.I32 ? this.action = a.readI32() : a.skip(c);
          break;
        case 2:
          c == d.Type.I32 ? this.count = a.readI32() : a.skip(c);
          break;
        case 3:
          c == d.Type.I32 ? this.size = a.readI32() : a.skip(c);
          break;
        case 4:
          c == d.Type.STRUCT ? (this.error = new TError, this.error.read(a)) : a.skip(c);
          break;
        case 5:
          c == d.Type.STRING ? this.applicationId = a.readString() : a.skip(c);
          break;
        case 6:
          c == d.Type.STRING ? this.connectionId = a.readString() : a.skip(c);
          break;
        case 7:
          c == d.Type.I64 ? this.connectionSerial = a.readI64() : a.skip(c);
          break;
        case 8:
          c == d.Type.STRING ? this.channel = a.readString() : a.skip(c);
          break;
        case 9:
          c == d.Type.STRING ? this.channelSerial = a.readString() : a.skip(c);
          break;
        case 10:
          c == d.Type.I64 ? this.msgSerial = a.readI64() : a.skip(c);
          break;
        case 11:
          c == d.Type.I64 ? this.timestamp = a.readI64() : a.skip(c);
          break;
        case 12:
          if(c == d.Type.LIST) {
            b = 0;
            this.messages = [];
            b = a.readListBegin().size;
            for(c = 0;c < b;++c) {
              var f = null, f = new U;
              f.read(a);
              this.messages.push(f)
            }
            a.readListEnd()
          }else {
            a.skip(c)
          }
          break;
        case 13:
          if(c == d.Type.SET) {
            b = 0;
            this.presence = [];
            b = a.readSetBegin().size;
            for(c = 0;c < b;++c) {
              f = null, f = new T, f.read(a), this.presence.push(f)
            }
            a.readSetEnd()
          }else {
            a.skip(c)
          }
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  aa.prototype.write = function(a) {
    a.writeStructBegin("TChannelMessage");
    null !== this.action && (a.writeFieldBegin("action", d.Type.I32, 1), a.writeI32(this.action), a.writeFieldEnd());
    null !== this.count && (a.writeFieldBegin("count", d.Type.I32, 2), a.writeI32(this.count), a.writeFieldEnd());
    null !== this.size && (a.writeFieldBegin("size", d.Type.I32, 3), a.writeI32(this.size), a.writeFieldEnd());
    null !== this.error && (a.writeFieldBegin("error", d.Type.STRUCT, 4), this.error.write(a), a.writeFieldEnd());
    null !== this.applicationId && (a.writeFieldBegin("applicationId", d.Type.STRING, 5), a.writeString(this.applicationId), a.writeFieldEnd());
    null !== this.connectionId && (a.writeFieldBegin("connectionId", d.Type.STRING, 6), a.writeString(this.connectionId), a.writeFieldEnd());
    null !== this.connectionSerial && (a.writeFieldBegin("connectionSerial", d.Type.I64, 7), a.writeI64(this.connectionSerial), a.writeFieldEnd());
    null !== this.channel && (a.writeFieldBegin("channel", d.Type.STRING, 8), a.writeString(this.channel), a.writeFieldEnd());
    null !== this.channelSerial && (a.writeFieldBegin("channelSerial", d.Type.STRING, 9), a.writeString(this.channelSerial), a.writeFieldEnd());
    null !== this.msgSerial && (a.writeFieldBegin("msgSerial", d.Type.I64, 10), a.writeI64(this.msgSerial), a.writeFieldEnd());
    null !== this.timestamp && (a.writeFieldBegin("timestamp", d.Type.I64, 11), a.writeI64(this.timestamp), a.writeFieldEnd());
    if(null !== this.messages) {
      a.writeFieldBegin("messages", d.Type.LIST, 12);
      a.writeListBegin(d.Type.STRUCT, this.messages.length);
      for(var b in this.messages) {
        this.messages.hasOwnProperty(b) && (b = this.messages[b], b.write(a))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    if(null !== this.presence) {
      a.writeFieldBegin("presence", d.Type.SET, 13);
      a.writeSetBegin(d.Type.STRUCT, this.presence.length);
      for(var c in this.presence) {
        this.presence.hasOwnProperty(c) && (c = this.presence[c], c.write(a))
      }
      a.writeSetEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  ha = function(a) {
    this.items = null;
    a && void 0 !== a.items && (this.items = a.items)
  };
  ha.prototype = {};
  ha.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          if(c == d.Type.LIST) {
            b = 0;
            this.items = [];
            b = a.readListBegin().size;
            for(c = 0;c < b;++c) {
              var f = null, f = new aa;
              f.read(a);
              this.items.push(f)
            }
            a.readListEnd()
          }else {
            a.skip(c)
          }
          break;
        case 0:
          a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  ha.prototype.write = function(a) {
    a.writeStructBegin("TMessageSet");
    if(null !== this.items) {
      a.writeFieldBegin("items", d.Type.LIST, 1);
      a.writeListBegin(d.Type.STRUCT, this.items.length);
      for(var b in this.items) {
        this.items.hasOwnProperty(b) && (b = this.items[b], b.write(a))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  SMessageCount = function(a) {
    this.data = this.count = null;
    a && (void 0 !== a.count && (this.count = a.count), void 0 !== a.data && (this.data = a.data))
  };
  SMessageCount.prototype = {};
  SMessageCount.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.DOUBLE ? this.count = a.readDouble() : a.skip(c);
          break;
        case 2:
          c == d.Type.DOUBLE ? this.data = a.readDouble() : a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  SMessageCount.prototype.write = function(a) {
    a.writeStructBegin("SMessageCount");
    null !== this.count && (a.writeFieldBegin("count", d.Type.DOUBLE, 1), a.writeDouble(this.count), a.writeFieldEnd());
    null !== this.data && (a.writeFieldBegin("data", d.Type.DOUBLE, 2), a.writeDouble(this.data), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  SMessageTypes = function(a) {
    this.presence = this.messages = this.all = null;
    a && (void 0 !== a.all && (this.all = a.all), void 0 !== a.messages && (this.messages = a.messages), void 0 !== a.presence && (this.presence = a.presence))
  };
  SMessageTypes.prototype = {};
  SMessageTypes.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.STRUCT ? (this.all = new SMessageCount, this.all.read(a)) : a.skip(c);
          break;
        case 2:
          c == d.Type.STRUCT ? (this.messages = new SMessageCount, this.messages.read(a)) : a.skip(c);
          break;
        case 3:
          c == d.Type.STRUCT ? (this.presence = new SMessageCount, this.presence.read(a)) : a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  SMessageTypes.prototype.write = function(a) {
    a.writeStructBegin("SMessageTypes");
    null !== this.all && (a.writeFieldBegin("all", d.Type.STRUCT, 1), this.all.write(a), a.writeFieldEnd());
    null !== this.messages && (a.writeFieldBegin("messages", d.Type.STRUCT, 2), this.messages.write(a), a.writeFieldEnd());
    null !== this.presence && (a.writeFieldBegin("presence", d.Type.STRUCT, 3), this.presence.write(a), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  SResourceCount = function(a) {
    this.sample_sum = this.sample_count = this.refused = this.min = this.mean = this.peak = this.opened = null;
    a && (void 0 !== a.opened && (this.opened = a.opened), void 0 !== a.peak && (this.peak = a.peak), void 0 !== a.mean && (this.mean = a.mean), void 0 !== a.min && (this.min = a.min), void 0 !== a.refused && (this.refused = a.refused), void 0 !== a.sample_count && (this.sample_count = a.sample_count), void 0 !== a.sample_sum && (this.sample_sum = a.sample_sum))
  };
  SResourceCount.prototype = {};
  SResourceCount.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.DOUBLE ? this.opened = a.readDouble() : a.skip(c);
          break;
        case 2:
          c == d.Type.DOUBLE ? this.peak = a.readDouble() : a.skip(c);
          break;
        case 3:
          c == d.Type.DOUBLE ? this.mean = a.readDouble() : a.skip(c);
          break;
        case 4:
          c == d.Type.DOUBLE ? this.min = a.readDouble() : a.skip(c);
          break;
        case 5:
          c == d.Type.DOUBLE ? this.refused = a.readDouble() : a.skip(c);
          break;
        case 10:
          c == d.Type.DOUBLE ? this.sample_count = a.readDouble() : a.skip(c);
          break;
        case 11:
          c == d.Type.DOUBLE ? this.sample_sum = a.readDouble() : a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  SResourceCount.prototype.write = function(a) {
    a.writeStructBegin("SResourceCount");
    null !== this.opened && (a.writeFieldBegin("opened", d.Type.DOUBLE, 1), a.writeDouble(this.opened), a.writeFieldEnd());
    null !== this.peak && (a.writeFieldBegin("peak", d.Type.DOUBLE, 2), a.writeDouble(this.peak), a.writeFieldEnd());
    null !== this.mean && (a.writeFieldBegin("mean", d.Type.DOUBLE, 3), a.writeDouble(this.mean), a.writeFieldEnd());
    null !== this.min && (a.writeFieldBegin("min", d.Type.DOUBLE, 4), a.writeDouble(this.min), a.writeFieldEnd());
    null !== this.refused && (a.writeFieldBegin("refused", d.Type.DOUBLE, 5), a.writeDouble(this.refused), a.writeFieldEnd());
    null !== this.sample_count && (a.writeFieldBegin("sample_count", d.Type.DOUBLE, 10), a.writeDouble(this.sample_count), a.writeFieldEnd());
    null !== this.sample_sum && (a.writeFieldBegin("sample_sum", d.Type.DOUBLE, 11), a.writeDouble(this.sample_sum), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  SConnectionTypes = function(a) {
    this.tls = this.plain = this.all = null;
    a && (void 0 !== a.all && (this.all = a.all), void 0 !== a.plain && (this.plain = a.plain), void 0 !== a.tls && (this.tls = a.tls))
  };
  SConnectionTypes.prototype = {};
  SConnectionTypes.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.STRUCT ? (this.all = new SResourceCount, this.all.read(a)) : a.skip(c);
          break;
        case 2:
          c == d.Type.STRUCT ? (this.plain = new SResourceCount, this.plain.read(a)) : a.skip(c);
          break;
        case 3:
          c == d.Type.STRUCT ? (this.tls = new SResourceCount, this.tls.read(a)) : a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  SConnectionTypes.prototype.write = function(a) {
    a.writeStructBegin("SConnectionTypes");
    null !== this.all && (a.writeFieldBegin("all", d.Type.STRUCT, 1), this.all.write(a), a.writeFieldEnd());
    null !== this.plain && (a.writeFieldBegin("plain", d.Type.STRUCT, 2), this.plain.write(a), a.writeFieldEnd());
    null !== this.tls && (a.writeFieldBegin("tls", d.Type.STRUCT, 3), this.tls.write(a), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  SMessageTraffic = function(a) {
    this.httpStream = this.post = this.rest = this.realtime = this.all = null;
    a && (void 0 !== a.all && (this.all = a.all), void 0 !== a.realtime && (this.realtime = a.realtime), void 0 !== a.rest && (this.rest = a.rest), void 0 !== a.post && (this.post = a.post), void 0 !== a.httpStream && (this.httpStream = a.httpStream))
  };
  SMessageTraffic.prototype = {};
  SMessageTraffic.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.STRUCT ? (this.all = new SMessageTypes, this.all.read(a)) : a.skip(c);
          break;
        case 2:
          c == d.Type.STRUCT ? (this.realtime = new SMessageTypes, this.realtime.read(a)) : a.skip(c);
          break;
        case 3:
          c == d.Type.STRUCT ? (this.rest = new SMessageTypes, this.rest.read(a)) : a.skip(c);
          break;
        case 4:
          c == d.Type.STRUCT ? (this.post = new SMessageTypes, this.post.read(a)) : a.skip(c);
          break;
        case 5:
          c == d.Type.STRUCT ? (this.httpStream = new SMessageTypes, this.httpStream.read(a)) : a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  SMessageTraffic.prototype.write = function(a) {
    a.writeStructBegin("SMessageTraffic");
    null !== this.all && (a.writeFieldBegin("all", d.Type.STRUCT, 1), this.all.write(a), a.writeFieldEnd());
    null !== this.realtime && (a.writeFieldBegin("realtime", d.Type.STRUCT, 2), this.realtime.write(a), a.writeFieldEnd());
    null !== this.rest && (a.writeFieldBegin("rest", d.Type.STRUCT, 3), this.rest.write(a), a.writeFieldEnd());
    null !== this.post && (a.writeFieldBegin("post", d.Type.STRUCT, 4), this.post.write(a), a.writeFieldEnd());
    null !== this.httpStream && (a.writeFieldBegin("httpStream", d.Type.STRUCT, 5), this.httpStream.write(a), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  SRequestCount = function(a) {
    this.refused = this.failed = this.succeeded = null;
    a && (void 0 !== a.succeeded && (this.succeeded = a.succeeded), void 0 !== a.failed && (this.failed = a.failed), void 0 !== a.refused && (this.refused = a.refused))
  };
  SRequestCount.prototype = {};
  SRequestCount.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.DOUBLE ? this.succeeded = a.readDouble() : a.skip(c);
          break;
        case 2:
          c == d.Type.DOUBLE ? this.failed = a.readDouble() : a.skip(c);
          break;
        case 3:
          c == d.Type.DOUBLE ? this.refused = a.readDouble() : a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  SRequestCount.prototype.write = function(a) {
    a.writeStructBegin("SRequestCount");
    null !== this.succeeded && (a.writeFieldBegin("succeeded", d.Type.DOUBLE, 1), a.writeDouble(this.succeeded), a.writeFieldEnd());
    null !== this.failed && (a.writeFieldBegin("failed", d.Type.DOUBLE, 2), a.writeDouble(this.failed), a.writeFieldEnd());
    null !== this.refused && (a.writeFieldBegin("refused", d.Type.DOUBLE, 3), a.writeDouble(this.refused), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  SStats = function(a) {
    this.tokenRequests = this.apiRequests = this.channels = this.connections = this.persisted = this.outbound = this.inbound = this.all = null;
    a && (void 0 !== a.all && (this.all = a.all), void 0 !== a.inbound && (this.inbound = a.inbound), void 0 !== a.outbound && (this.outbound = a.outbound), void 0 !== a.persisted && (this.persisted = a.persisted), void 0 !== a.connections && (this.connections = a.connections), void 0 !== a.channels && (this.channels = a.channels), void 0 !== a.apiRequests && (this.apiRequests = a.apiRequests), void 0 !== a.tokenRequests && (this.tokenRequests = a.tokenRequests))
  };
  SStats.prototype = {};
  SStats.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          c == d.Type.STRUCT ? (this.all = new SMessageTypes, this.all.read(a)) : a.skip(c);
          break;
        case 2:
          c == d.Type.STRUCT ? (this.inbound = new SMessageTraffic, this.inbound.read(a)) : a.skip(c);
          break;
        case 3:
          c == d.Type.STRUCT ? (this.outbound = new SMessageTraffic, this.outbound.read(a)) : a.skip(c);
          break;
        case 4:
          c == d.Type.STRUCT ? (this.persisted = new SMessageTypes, this.persisted.read(a)) : a.skip(c);
          break;
        case 5:
          c == d.Type.STRUCT ? (this.connections = new SConnectionTypes, this.connections.read(a)) : a.skip(c);
          break;
        case 6:
          c == d.Type.STRUCT ? (this.channels = new SResourceCount, this.channels.read(a)) : a.skip(c);
          break;
        case 7:
          c == d.Type.STRUCT ? (this.apiRequests = new SRequestCount, this.apiRequests.read(a)) : a.skip(c);
          break;
        case 8:
          c == d.Type.STRUCT ? (this.tokenRequests = new SRequestCount, this.tokenRequests.read(a)) : a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  SStats.prototype.write = function(a) {
    a.writeStructBegin("SStats");
    null !== this.all && (a.writeFieldBegin("all", d.Type.STRUCT, 1), this.all.write(a), a.writeFieldEnd());
    null !== this.inbound && (a.writeFieldBegin("inbound", d.Type.STRUCT, 2), this.inbound.write(a), a.writeFieldEnd());
    null !== this.outbound && (a.writeFieldBegin("outbound", d.Type.STRUCT, 3), this.outbound.write(a), a.writeFieldEnd());
    null !== this.persisted && (a.writeFieldBegin("persisted", d.Type.STRUCT, 4), this.persisted.write(a), a.writeFieldEnd());
    null !== this.connections && (a.writeFieldBegin("connections", d.Type.STRUCT, 5), this.connections.write(a), a.writeFieldEnd());
    null !== this.channels && (a.writeFieldBegin("channels", d.Type.STRUCT, 6), this.channels.write(a), a.writeFieldEnd());
    null !== this.apiRequests && (a.writeFieldBegin("apiRequests", d.Type.STRUCT, 7), this.apiRequests.write(a), a.writeFieldEnd());
    null !== this.tokenRequests && (a.writeFieldBegin("tokenRequests", d.Type.STRUCT, 8), this.tokenRequests.write(a), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  SStatsArray = function(a) {
    this.items = null;
    a && void 0 !== a.items && (this.items = a.items)
  };
  SStatsArray.prototype = {};
  SStatsArray.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var b = a.readFieldBegin(), c = b.ftype;
      if(c == d.Type.STOP) {
        break
      }
      switch(b.fid) {
        case 1:
          if(c == d.Type.LIST) {
            b = 0;
            this.items = [];
            b = a.readListBegin().size;
            for(c = 0;c < b;++c) {
              var f = null, f = new SStats;
              f.read(a);
              this.items.push(f)
            }
            a.readListEnd()
          }else {
            a.skip(c)
          }
          break;
        case 0:
          a.skip(c);
          break;
        default:
          a.skip(c)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  SStatsArray.prototype.write = function(a) {
    a.writeStructBegin("SStatsArray");
    if(null !== this.items) {
      a.writeFieldBegin("items", d.Type.LIST, 1);
      a.writeListBegin(d.Type.STRUCT, this.items.length);
      for(var b in this.items) {
        this.items.hasOwnProperty(b) && (b = this.items[b], b.write(a))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  var F = {TAction:TAction, TType:TType, TData:S, TPresence:T, TMessage:U, TChannelMessage:aa, TMessageSet:ha}, qa = function() {
  };
  "object" == typeof window && (qa.create = function(a, b, c) {
    var f = "";
    c && (f = new Date, f.setTime(f.getTime() + c), f = "; expires=" + f.toGMTString());
    document.cookie = a + "=" + b + f + "; path=/"
  }, qa.read = function(a) {
    for(var a = a + "=", b = document.cookie.split(";"), c = 0;c < b.length;c++) {
      for(var f = b[c];" " == f.charAt(0);) {
        f = f.substring(1, f.length)
      }
      if(0 == f.indexOf(a)) {
        return f.substring(a.length, f.length)
      }
    }
    return null
  }, qa.erase = function(a) {
    createCookie(a, "", -36E5)
  });
  this.Cookie = qa;
  var ra = function() {
  };
  G.httpTransports.xhr ? (ra.get = Ka.get, ra.post = Ka.post) : ra.get = bb.get;
  this.Http = ra;
  var V, ba = function() {
    if(!W) {
      try {
        var a = j.getElementsByTagName("body")[0].appendChild(j.createElement("span"));
        a.parentNode.removeChild(a)
      }catch(b) {
        return
      }
      W = !0;
      for(var a = sa.length, c = 0;c < a;c++) {
        sa[c]()
      }
    }
  }, cb = function(a) {
    W ? a() : sa[sa.length] = a
  }, db = function(a) {
    if(typeof J.addEventListener != s) {
      J.addEventListener("load", a, !1)
    }else {
      if(typeof j.addEventListener != s) {
        j.addEventListener("load", a, !1)
      }else {
        if(typeof J.attachEvent != s) {
          var b = J;
          b.attachEvent("onload", a);
          ca[ca.length] = [b, "onload", a]
        }else {
          if("function" == typeof J.onload) {
            var c = J.onload;
            J.onload = function() {
              c();
              a()
            }
          }else {
            J.onload = a
          }
        }
      }
    }
  }, Oa = function() {
    var a = O.length;
    if(0 < a) {
      for(var b = 0;b < a;b++) {
        var c = O[b].id, f = O[b].callbackFn, d = {success:!1, id:c};
        if(0 < h.pv[0]) {
          var e = K(c);
          if(e) {
            if(ta(O[b].swfVersion) && !(h.wk && 312 > h.wk)) {
              X(c, !0), f && (d.success = !0, d.ref = La(c), f(d))
            }else {
              if(O[b].expressInstall && Ma()) {
                d = {};
                d.data = O[b].expressInstall;
                d.width = e.getAttribute("width") || "0";
                d.height = e.getAttribute("height") || "0";
                e.getAttribute("class") && (d.styleclass = e.getAttribute("class"));
                e.getAttribute("align") && (d.align = e.getAttribute("align"));
                for(var l = {}, e = e.getElementsByTagName("param"), t = e.length, q = 0;q < t;q++) {
                  "movie" != e[q].getAttribute("name").toLowerCase() && (l[e[q].getAttribute("name")] = e[q].getAttribute("value"))
                }
                Na(d, l, c, f)
              }else {
                yb(e), f && f(d)
              }
            }
          }
        }else {
          if(X(c, !0), f) {
            if((c = La(c)) && typeof c.SetVariable != s) {
              d.success = !0, d.ref = c
            }
            f(d)
          }
        }
      }
    }
  }, La = function(a) {
    var b = null;
    if((a = K(a)) && "OBJECT" == a.nodeName) {
      typeof a.SetVariable != s ? b = a : (a = a.getElementsByTagName(M)[0]) && (b = a)
    }
    return b
  }, Ma = function() {
    return!ua && ta("6.0.65") && (h.win || h.mac) && !(h.wk && 312 > h.wk)
  }, Na = function(a, b, c, f) {
    ua = !0;
    Pa = f || null;
    eb = {success:!1, id:c};
    var d = K(c);
    if(d) {
      "OBJECT" == d.nodeName ? (ia = Qa(d), va = null) : (ia = d, va = c);
      a.id = fb;
      if(typeof a.width == s || !/%$/.test(a.width) && 310 > parseInt(a.width, 10)) {
        a.width = "310"
      }
      if(typeof a.height == s || !/%$/.test(a.height) && 137 > parseInt(a.height, 10)) {
        a.height = "137"
      }
      j.title = j.title.slice(0, 47) + " - Flash Player Installation";
      f = h.ie && h.win ? "ActiveX" : "PlugIn";
      f = "MMredirectURL=" + J.location.toString().replace(/&/g, "%26") + "&MMplayerType=" + f + "&MMdoctitle=" + j.title;
      b.flashvars = typeof b.flashvars != s ? b.flashvars + ("&" + f) : f;
      h.ie && (h.win && 4 != d.readyState) && (f = j.createElement("div"), c += "SWFObjectNew", f.setAttribute("id", c), d.parentNode.insertBefore(f, d), d.style.display = "none", function() {
        4 == d.readyState ? d.parentNode.removeChild(d) : setTimeout(arguments.callee, 10)
      }());
      Ra(a, b, c)
    }
  }, yb = function(a) {
    if(h.ie && h.win && 4 != a.readyState) {
      var b = j.createElement("div");
      a.parentNode.insertBefore(b, a);
      b.parentNode.replaceChild(Qa(a), b);
      a.style.display = "none";
      (function() {
        4 == a.readyState ? a.parentNode.removeChild(a) : setTimeout(arguments.callee, 10)
      })()
    }else {
      a.parentNode.replaceChild(Qa(a), a)
    }
  }, Qa = function(a) {
    var b = j.createElement("div");
    if(h.win && h.ie) {
      b.innerHTML = a.innerHTML
    }else {
      if(a = a.getElementsByTagName(M)[0]) {
        if(a = a.childNodes) {
          for(var c = a.length, d = 0;d < c;d++) {
            !(1 == a[d].nodeType && "PARAM" == a[d].nodeName) && 8 != a[d].nodeType && b.appendChild(a[d].cloneNode(!0))
          }
        }
      }
    }
    return b
  }, Ra = function(a, b, c) {
    var d, e = K(c);
    if(h.wk && 312 > h.wk) {
      return d
    }
    if(e) {
      if(typeof a.id == s && (a.id = c), h.ie && h.win) {
        var k = "", l;
        for(l in a) {
          a[l] != Object.prototype[l] && ("data" == l.toLowerCase() ? b.movie = a[l] : "styleclass" == l.toLowerCase() ? k += ' class="' + a[l] + '"' : "classid" != l.toLowerCase() && (k += " " + l + '="' + a[l] + '"'))
        }
        l = "";
        for(var t in b) {
          b[t] != Object.prototype[t] && (l += '<param name="' + t + '" value="' + b[t] + '" />')
        }
        e.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + k + ">" + l + "</object>";
        wa[wa.length] = a.id;
        d = K(a.id)
      }else {
        t = j.createElement(M);
        t.setAttribute("type", xa);
        for(var q in a) {
          a[q] != Object.prototype[q] && ("styleclass" == q.toLowerCase() ? t.setAttribute("class", a[q]) : "classid" != q.toLowerCase() && t.setAttribute(q, a[q]))
        }
        for(k in b) {
          b[k] != Object.prototype[k] && "movie" != k.toLowerCase() && (a = t, l = k, q = b[k], c = j.createElement("param"), c.setAttribute("name", l), c.setAttribute("value", q), a.appendChild(c))
        }
        e.parentNode.replaceChild(t, e);
        d = t
      }
    }
    return d
  }, gb = function(a) {
    var b = K(a);
    b && "OBJECT" == b.nodeName && (h.ie && h.win ? (b.style.display = "none", function() {
      if(4 == b.readyState) {
        var c = K(a);
        if(c) {
          for(var d in c) {
            "function" == typeof c[d] && (c[d] = null)
          }
          c.parentNode.removeChild(c)
        }
      }else {
        setTimeout(arguments.callee, 10)
      }
    }()) : b.parentNode.removeChild(b))
  }, K = function(a) {
    var b = null;
    try {
      b = j.getElementById(a)
    }catch(c) {
    }
    return b
  }, ta = function(a) {
    var b = h.pv, a = a.split(".");
    a[0] = parseInt(a[0], 10);
    a[1] = parseInt(a[1], 10) || 0;
    a[2] = parseInt(a[2], 10) || 0;
    return b[0] > a[0] || b[0] == a[0] && b[1] > a[1] || b[0] == a[0] && b[1] == a[1] && b[2] >= a[2] ? !0 : !1
  }, hb = function(a, b, c, d) {
    if(!h.ie || !h.mac) {
      var e = j.getElementsByTagName("head")[0];
      if(e) {
        c = c && "string" == typeof c ? c : "screen";
        d && (Sa = N = null);
        if(!N || Sa != c) {
          d = j.createElement("style"), d.setAttribute("type", "text/css"), d.setAttribute("media", c), N = e.appendChild(d), h.ie && (h.win && typeof j.styleSheets != s && 0 < j.styleSheets.length) && (N = j.styleSheets[j.styleSheets.length - 1]), Sa = c
        }
        h.ie && h.win ? N && typeof N.addRule == M && N.addRule(a, b) : N && typeof j.createTextNode != s && N.appendChild(j.createTextNode(a + " {" + b + "}"))
      }
    }
  }, X = function(a, b) {
    if(ib) {
      var c = b ? "visible" : "hidden";
      W && K(a) ? K(a).style.visibility = c : hb("#" + a, "visibility:" + c)
    }
  }, jb = function(a) {
    return null != /[\\\"<>\.;]/.exec(a) && typeof encodeURIComponent != s ? encodeURIComponent(a) : a
  }, s = "undefined", M = "object", xa = "application/x-shockwave-flash", fb = "SWFObjectExprInst", J = window, j = document, P = navigator, kb = !1, sa = [function() {
    if(kb) {
      var a = j.getElementsByTagName("body")[0], b = j.createElement(M);
      b.setAttribute("type", xa);
      var c = a.appendChild(b);
      if(c) {
        var d = 0;
        (function() {
          if(typeof c.GetVariable != s) {
            var e = c.GetVariable("$version");
            e && (e = e.split(" ")[1].split(","), h.pv = [parseInt(e[0], 10), parseInt(e[1], 10), parseInt(e[2], 10)])
          }else {
            if(10 > d) {
              d++;
              setTimeout(arguments.callee, 10);
              return
            }
          }
          a.removeChild(b);
          c = null;
          Oa()
        })()
      }else {
        Oa()
      }
    }else {
      Oa()
    }
  }], O = [], wa = [], ca = [], ia, va, Pa, eb, W = !1, ua = !1, N, Sa, ib = !0, h, zb = typeof j.getElementById != s && typeof j.getElementsByTagName != s && typeof j.createElement != s, ya = P.userAgent.toLowerCase(), za = P.platform.toLowerCase(), Ab = za ? /win/.test(za) : /win/.test(ya), Bb = za ? /mac/.test(za) : /mac/.test(ya), Cb = /webkit/.test(ya) ? parseFloat(ya.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : !1, Ta = !+"\v1", ja = [0, 0, 0], D = null;
  if(typeof P.plugins != s && typeof P.plugins["Shockwave Flash"] == M) {
    if((D = P.plugins["Shockwave Flash"].description) && !(typeof P.mimeTypes != s && P.mimeTypes[xa] && !P.mimeTypes[xa].enabledPlugin)) {
      kb = !0, Ta = !1, D = D.replace(/^.*\s+(\S+\s+\S+$)/, "$1"), ja[0] = parseInt(D.replace(/^(.*)\..*$/, "$1"), 10), ja[1] = parseInt(D.replace(/^.*\.(.*)\s.*$/, "$1"), 10), ja[2] = /[a-zA-Z]/.test(D) ? parseInt(D.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0
    }
  }else {
    if(typeof J.ActiveXObject != s) {
      try {
        var lb = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
        if(lb && (D = lb.GetVariable("$version"))) {
          Ta = !0, D = D.split(" ")[1].split(","), ja = [parseInt(D[0], 10), parseInt(D[1], 10), parseInt(D[2], 10)]
        }
      }catch(Ob) {
      }
    }
  }
  h = {w3:zb, pv:ja, wk:Cb, ie:Ta, win:Ab, mac:Bb};
  h.w3 && ((typeof j.readyState != s && "complete" == j.readyState || typeof j.readyState == s && (j.getElementsByTagName("body")[0] || j.body)) && ba(), W || (typeof j.addEventListener != s && j.addEventListener("DOMContentLoaded", ba, !1), h.ie && h.win && (j.attachEvent("onreadystatechange", function() {
    "complete" == j.readyState && (j.detachEvent("onreadystatechange", arguments.callee), ba())
  }), J == top && function() {
    if(!W) {
      try {
        j.documentElement.doScroll("left")
      }catch(a) {
        setTimeout(arguments.callee, 0);
        return
      }
      ba()
    }
  }()), h.wk && function() {
    W || (/loaded|complete/.test(j.readyState) ? ba() : setTimeout(arguments.callee, 0))
  }(), db(ba)));
  h.ie && h.win && window.attachEvent("onunload", function() {
    for(var a = ca.length, b = 0;b < a;b++) {
      ca[b][0].detachEvent(ca[b][1], ca[b][2])
    }
    a = wa.length;
    for(b = 0;b < a;b++) {
      gb(wa[b])
    }
    for(var c in h) {
      h[c] = null
    }
    h = null;
    for(var d in V) {
      V[d] = null
    }
    V = null
  });
  V = {registerObject:function(a, b, c, d) {
    if(h.w3 && a && b) {
      var e = {};
      e.id = a;
      e.swfVersion = b;
      e.expressInstall = c;
      e.callbackFn = d;
      O[O.length] = e;
      X(a, !1)
    }else {
      d && d({success:!1, id:a})
    }
  }, getObjectById:function(a) {
    if(h.w3) {
      return La(a)
    }
  }, embedSWF:function(a, b, c, d, e, k, l, t, q, g) {
    var i = {success:!1, id:b};
    h.w3 && !(h.wk && 312 > h.wk) && a && b && c && d && e ? (X(b, !1), cb(function() {
      c += "";
      d += "";
      var h = {};
      if(q && typeof q === M) {
        for(var j in q) {
          h[j] = q[j]
        }
      }
      h.data = a;
      h.width = c;
      h.height = d;
      j = {};
      if(t && typeof t === M) {
        for(var n in t) {
          j[n] = t[n]
        }
      }
      if(l && typeof l === M) {
        for(var p in l) {
          j.flashvars = typeof j.flashvars != s ? j.flashvars + ("&" + p + "=" + l[p]) : p + "=" + l[p]
        }
      }
      if(ta(e)) {
        n = Ra(h, j, b), h.id == b && X(b, !0), i.success = !0, i.ref = n
      }else {
        if(k && Ma()) {
          h.data = k;
          Na(h, j, b, g);
          return
        }
        X(b, !0)
      }
      g && g(i)
    })) : g && g(i)
  }, switchOffAutoHideShow:function() {
    ib = !1
  }, ua:h, getFlashPlayerVersion:function() {
    return{major:h.pv[0], minor:h.pv[1], release:h.pv[2]}
  }, hasFlashPlayerVersion:ta, createSWF:function(a, b, c) {
    if(h.w3) {
      return Ra(a, b, c)
    }
  }, showExpressInstall:function(a, b, c, d) {
    h.w3 && Ma() && Na(a, b, c, d)
  }, removeSWF:function(a) {
    h.w3 && gb(a)
  }, createCSS:function(a, b, c, d) {
    h.w3 && hb(a, b, c, d)
  }, addDomLoadEvent:cb, addLoadEvent:db, getQueryParamValue:function(a) {
    var b = j.location.search || j.location.hash;
    if(b) {
      /\?/.test(b) && (b = b.split("?")[1]);
      if(null == a) {
        return jb(b)
      }
      for(var b = b.split("&"), c = 0;c < b.length;c++) {
        if(b[c].substring(0, b[c].indexOf("=")) == a) {
          return jb(b[c].substring(b[c].indexOf("=") + 1))
        }
      }
    }
    return""
  }, expressInstallCallback:function() {
    if(ua) {
      var a = K(fb);
      a && ia && (a.parentNode.replaceChild(ia, a), va && (X(va, !0), h.ie && h.win && (ia.style.display = "block")), Pa && Pa(eb));
      ua = !1
    }
  }};
  var Aa;
  logger = window.console && window.console.log && window.console.error ? window.console : {log:function() {
  }, error:function() {
  }};
  var g = function(a, b, c, d, e) {
    var k = this;
    k.__id = g.__nextId++;
    g.__instances[k.__id] = k;
    k.readyState = g.CONNECTING;
    k.bufferedAmount = 0;
    k.__events = {};
    b ? "string" == typeof b && (b = [b]) : b = [];
    k.__createTask = setTimeout(function() {
      g.__addTask(function() {
        k.__createTask = null;
        g.__flash.create(k.__id, a, b, c || null, d || 0, e || null)
      })
    }, 0)
  };
  g.prototype.send = function(a) {
    if(this.readyState == g.CONNECTING) {
      throw"INVALID_STATE_ERR: Web Socket connection has not been established";
    }
    a = g.__flash.send(this.__id, encodeURIComponent(a));
    if(0 > a) {
      return!0
    }
    this.bufferedAmount += a;
    return!1
  };
  g.prototype.close = function() {
    this.__createTask ? (clearTimeout(this.__createTask), this.__createTask = null, this.readyState = g.CLOSED) : this.readyState == g.CLOSED || this.readyState == g.CLOSING || (this.readyState = g.CLOSING, g.__flash.close(this.__id))
  };
  g.prototype.addEventListener = function(a, b) {
    a in this.__events || (this.__events[a] = []);
    this.__events[a].push(b)
  };
  g.prototype.removeEventListener = function(a, b) {
    if(a in this.__events) {
      for(var c = this.__events[a], d = c.length - 1;0 <= d;--d) {
        if(c[d] === b) {
          c.splice(d, 1);
          break
        }
      }
    }
  };
  g.prototype.dispatchEvent = function(a) {
    for(var b = this.__events[a.type] || [], c = 0;c < b.length;++c) {
      b[c](a)
    }
    (b = this["on" + a.type]) && b.apply(this, [a])
  };
  g.prototype.__handleEvent = function(a) {
    "readyState" in a && (this.readyState = a.readyState);
    "protocol" in a && (this.protocol = a.protocol);
    var b;
    if("open" == a.type || "error" == a.type) {
      b = this.__createSimpleEvent(a.type)
    }else {
      if("close" == a.type) {
        b = this.__createSimpleEvent("close"), b.wasClean = a.wasClean ? !0 : !1, b.code = a.code, b.reason = a.reason
      }else {
        if("message" == a.type) {
          a = decodeURIComponent(a.message), b = this.__createMessageEvent("message", a)
        }else {
          throw"unknown event type: " + a.type;
        }
      }
    }
    this.dispatchEvent(b)
  };
  g.prototype.__createSimpleEvent = function(a) {
    if(document.createEvent && window.Event) {
      var b = document.createEvent("Event");
      b.initEvent(a, !1, !1);
      return b
    }
    return{type:a, bubbles:!1, cancelable:!1}
  };
  g.prototype.__createMessageEvent = function(a, b) {
    if(document.createEvent && window.MessageEvent && !window.opera) {
      var c = document.createEvent("MessageEvent");
      c.initMessageEvent("message", !1, !1, b, null, null, window, null);
      return c
    }
    return{type:a, data:b, bubbles:!1, cancelable:!1}
  };
  g.CONNECTING = 0;
  g.OPEN = 1;
  g.CLOSING = 2;
  g.CLOSED = 3;
  g.__isFlashImplementation = !0;
  g.__initialized = !1;
  g.__flash = null;
  g.__instances = {};
  g.__tasks = [];
  g.__nextId = 0;
  g.loadFlashPolicyFile = function(a) {
    g.__addTask(function() {
      g.__flash.loadManualPolicyFile(a)
    })
  };
  g.__initialize = function() {
    if(!g.__initialized) {
      g.__initialized = !0;
      var a = document.createElement("div");
      a.id = "webSocketContainer";
      a.style.position = "absolute";
      g.__isFlashLite() ? (a.style.left = "0px", a.style.top = "0px") : (a.style.left = "-100px", a.style.top = "-100px");
      var b = document.createElement("div");
      b.id = "webSocketFlash";
      a.appendChild(b);
      document.body.appendChild(a);
      V.embedSWF("swf/WebSocketMainInsecure-0.9.swf", "webSocketFlash", "1", "1", "10.0.0", null, null, {hasPriority:!0, swliveconnect:!0, allowScriptAccess:"always"}, null, function(a) {
        a.success || logger.error("[WebSocket] swfobject.embedSWF failed")
      })
    }
  };
  g.__onFlashInitialized = function() {
    setTimeout(function() {
      g.__flash = document.getElementById("webSocketFlash");
      g.__flash.setCallerUrl(location.href);
      g.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);
      for(var a = 0;a < g.__tasks.length;++a) {
        g.__tasks[a]()
      }
      g.__tasks = []
    }, 0)
  };
  g.__onFlashEvent = function() {
    setTimeout(function() {
      try {
        for(var a = g.__flash.receiveEvents(), b = 0;b < a.length;++b) {
          g.__instances[a[b].webSocketId].__handleEvent(a[b])
        }
      }catch(c) {
        logger.error(c)
      }
    }, 0);
    return!0
  };
  g.__log = function(a) {
    logger.log(decodeURIComponent(a))
  };
  g.__error = function(a) {
    logger.error(decodeURIComponent(a))
  };
  g.__addTask = function(a) {
    g.__flash ? a() : g.__tasks.push(a)
  };
  g.__isFlashLite = function() {
    if(!window.navigator || !window.navigator.mimeTypes) {
      return!1
    }
    var a = window.navigator.mimeTypes["application/x-shockwave-flash"];
    return!a || !a.enabledPlugin || !a.enabledPlugin.filename ? !1 : a.enabledPlugin.filename.match(/flashlite/i) ? !0 : !1
  };
  Aa = g;
  var z = function() {
    this.any = [];
    this.events = {};
    this.anyOnce = [];
    this.eventsOnce = {}
  };
  z.prototype.on = function(a, b) {
    1 == arguments.length && "function" == typeof a ? this.any.push(a) : null === a ? this.any.push(b) : (this.events[a] = this.events[a] || []).push(b)
  };
  z.prototype.off = function(a, b) {
    if(0 == arguments.length) {
      this.any = [], this.events = {}, this.anyOnce = [], this.eventsOnce = {}
    }else {
      1 == arguments.length && "function" == typeof a && (b = a, a = null);
      var c, d = -1;
      if(null === a) {
        if(b) {
          if(!(c = this.any) || -1 == (d = c.indexOf(b))) {
            if(c = this.anyOnce) {
              d = c.indexOf(b)
            }
          }
          -1 < d && c.splice(d, 1)
        }else {
          this.any = [], this.anyOnce = []
        }
      }else {
        if(b) {
          d = -1;
          if(!(c = this.events[a]) || -1 == (d = c.indexOf(b))) {
            if(c = this.eventsOnce[a]) {
              d = c.indexOf(b)
            }
          }
          -1 < d && c.splice(d, 1)
        }else {
          delete this.events[a], delete this.eventsOnce[a]
        }
      }
    }
  };
  z.prototype.listeners = function(a) {
    if(a) {
      var b = this.events[a] || [];
      this.eventsOnce[a] && Array.prototype.push.apply(b, this.eventsOnce[a]);
      return b.length ? b : null
    }
    return this.any.length ? this.any : null
  };
  z.prototype.emit = function(a) {
    var b = Array.prototype.slice.call(arguments, 1), c = {event:a};
    if(this.anyOnce.length) {
      var d = this.anyOnce;
      this.anyOnce = [];
      for(var e = 0;e < d.length;e++) {
        d[e].apply(c, b)
      }
    }
    for(e = 0;e < this.any.length;e++) {
      this.any[e].apply(c, b)
    }
    if(d = this.eventsOnce[a]) {
      delete this.eventsOnce[a];
      for(e = 0;e < d.length;e++) {
        d[e].apply(c, b)
      }
    }
    if(d = this.events[a]) {
      for(e = 0;e < d.length;e++) {
        d[e].apply(c, b)
      }
    }
  };
  z.prototype.once = function(a, b) {
    1 == arguments.length && "function" == typeof a ? this.anyOnce.push(a) : null === a ? this.anyOnce.push(b) : (this.eventsOnce[a] = this.eventsOnce[a] || []).push(b)
  };
  var e = function() {
  }, mb = 4, nb = function() {
  };
  e.LOG_NONE = 0;
  e.LOG_ERROR = 1;
  e.LOG_MAJOR = 2;
  e.LOG_MINOR = 3;
  e.LOG_MICRO = 4;
  e.LOG_DEFAULT = 3;
  e.LOG_DEBUG = 4;
  e.logAction = function(a, b, c) {
    a <= mb && nb("Ably: " + b + ": " + c)
  };
  e.setLog = function(a, b) {
    mb = a || 3;
    nb = b || console.log.bind(console)
  };
  var n, r = function() {
  }, Db = "object" == typeof window;
  r.addProperties = r.mixin = function(a, b) {
    for(var c in b) {
      a[c] = b[c]
    }
    return a
  };
  r.copy = function(a) {
    return r.mixin({}, a)
  };
  r.isArray = function(a) {
    return"[object Array]" == Object.prototype.toString.call(a)
  };
  r.isEmpty = function(a) {
    for(var b in a) {
      return!1
    }
    return!0
  };
  r.shallowClone = function(a) {
    var b = {}, c;
    for(c in a) {
      b[c] = a[c]
    }
    return b
  };
  r.prototypicalClone = function(a, b) {
    function c() {
    }
    c.prototype = a;
    var d = new c;
    b && r.mixin(d, b);
    return d
  };
  r.inherits = function(a, b) {
    a.super_ = b;
    a.prototype = Object.create(b.prototype, {constructor:{value:a, enumerable:!1, writable:!0, configurable:!0}})
  };
  r.containsValue = function(a, b) {
    for(var c in a) {
      if(a[c] == b) {
        return!0
      }
    }
    return!1
  };
  r.intersect = function(a, b) {
    return Array.isArray(b) ? r.arrIntersect(a, b) : r.arrIntersectOb(a, b)
  };
  r.arrIntersect = function(a, b) {
    for(var c = [], d = 0;d < a.length;d++) {
      var e = a[d];
      -1 != b.indexOf(e) && c.push(e)
    }
    return c
  };
  r.arrIntersectOb = function(a, b) {
    for(var c = [], d = 0;d < a.length;d++) {
      var e = a[d];
      e in b && c.push(e)
    }
    return c
  };
  r.arrSubtract = function(a, b) {
    for(var c = [], d = 0;d < a.length;d++) {
      var e = a[d];
      -1 == b.indexOf(e) && c.push(e)
    }
    return c
  };
  r.keysArray = function(a, b) {
    var c = [], d;
    for(d in a) {
      (!b || a.hasOwnProperty(d)) && c.push(d)
    }
    return c.length ? c : void 0
  };
  r.valuesArray = function(a, b) {
    var c = [], d;
    for(d in a) {
      (!b || a.hasOwnProperty(d)) && c.push(a[d])
    }
    return c.length ? c : void 0
  };
  r.nextTick = Db ? function(a) {
    setTimeout(a, 0)
  } : process.nextTick;
  r.defaultGetHeaders = function(a) {
    return{accept:a ? "application/x-thrift,application/json" : "application/json"}
  };
  r.defaultPostHeaders = function(a) {
    return{accept:a ? "application/x-thrift,application/json" : "application/json", "content-type":a ? "application/x-thrift" : "application/json"}
  };
  r.arrRandomElement = function(a) {
    return a.splice(Math.floor(Math.random() * a.length))
  };
  n = r;
  var ka = function(a) {
    var a = a || [], b = function(b, d) {
      for(var e = 0;e < a.length;e++) {
        try {
          a[e](b, d)
        }catch(k) {
        }
      }
    };
    b.__proto__ = this.__proto__;
    b.members = a;
    return b
  };
  n.inherits(ka, Function);
  ka.prototype.push = function() {
    Array.prototype.push.apply(this.members, arguments)
  };
  var G, Ua = function(a, b, c, d, e) {
    this.options = a;
    this.binary = !a.useTextProtocol;
    this.host = b;
    this.mode = c;
    this.connectionId = d;
    this.connectionSerial = e
  }, p = function(a, b) {
    z.call(this);
    this.realtime = a;
    this.options = b;
    this.state = H.initialized;
    this.error = null;
    this.queuedMessages = [];
    this.pendingMessages = [];
    this.msgSerial = 0;
    this.connectionSerial = this.connectionId = void 0;
    this.httpTransports = n.intersect(b.transports || vb, p.httpTransports);
    this.transports = n.intersect(b.transports || $a, p.transports);
    this.upgradeTransports = n.arrSubtract(this.transports, this.httpTransports);
    var c = b.fallbackHosts;
    if(c) {
      var d;
      this.httpHosts = d = c.slice();
      d.unshift(b.restHost);
      this.wsHosts = d = c.slice();
      d.unshift(b.wsHost)
    }else {
      this.httpHosts = [b.restHost], this.wsHosts = [b.wsHost]
    }
    this.host = this.pendingTransport = this.transport = null;
    e.logAction(e.LOG_MINOR, "Realtime.ConnectionManager()", "started");
    e.logAction(e.LOG_MICRO, "Realtime.ConnectionManager()", "requested transports = [" + (b.transports || $a) + "]");
    e.logAction(e.LOG_MICRO, "Realtime.ConnectionManager()", "available http transports = [" + this.httpTransports + "]");
    e.logAction(e.LOG_MICRO, "Realtime.ConnectionManager()", "available transports = [" + this.transports + "]");
    e.logAction(e.LOG_MICRO, "Realtime.ConnectionManager()", "http hosts = [" + this.httpHosts + "]");
    e.logAction(e.LOG_MICRO, "Realtime.ConnectionManager()", "ws hosts = [" + this.wsHosts + "]");
    if(!this.transports.length) {
      throw e.logAction(e.LOG_ERROR, "realtime.ConnectionManager()", "no requested transports available"), Error("no requested transports available");
    }
    Ba && b.recover && window.addEventListener("beforeunload", function() {
      self.persistConnection()
    })
  }, ob = function(a, b) {
    this.msg = a;
    this.callback = b;
    this.merged = !1
  }, pb = "undefined" !== typeof Cookie && Cookie.read, Ba = "undefined" !== typeof Cookie && Cookie.create, Eb = function() {
  }, H = {initialized:{state:"initialized", terminal:!1, queueEvents:!0, sendEvents:!1}, connecting:{state:"connecting", terminal:!1, queueEvents:!0, sendEvents:!1, retryDelay:15E3, failState:"disconnected"}, connected:{state:"connected", terminal:!1, queueEvents:!1, sendEvents:!0, failState:"disconnected"}, disconnected:{state:"disconnected", terminal:!1, queueEvents:!0, sendEvents:!1, retryDelay:3E4}, suspended:{state:"suspended", terminal:!1, queueEvents:!1, sendEvents:!1, retryDelay:12E4}, closed:{state:"closed", 
  terminal:!1, queueEvents:!1, sendEvents:!1}, failed:{state:"failed", terminal:!0, queueEvents:!1, sendEvents:!1}};
  Ua.prototype.getConnectParams = function(a) {
    a = a || {};
    switch(this.mode) {
      case "resume":
        a.resume = this.connectionId;
        a.connection_serial = this.connectionSerial;
        break;
      case "recover":
        if(!0 === this.options.recover) {
          a.recover = pb("ably-connection-id"), a.connection_serial = pb("ably-connection-serial")
        }else {
          var b = this.options.recover.match(/^([\w|\d]+):([\w|\d]+)$/);
          b && (a.recover = b[1], a.connection_serial = b[2])
        }
    }
    return a
  };
  n.inherits(p, z);
  p.httpTransports = p.transports = {};
  p.prototype.chooseTransport = function(a) {
    if(this.transport) {
      a(null, this.transport)
    }else {
      var b = new Ua(this.options, null, this.connectionId ? "resume" : this.options.recover ? "recover" : "clean", this.connectionId, this.connectionSerial), c = this;
      this.chooseHttpTransport(b, function(d, e) {
        d ? a(d) : c.upgradeTransports.length ? (b = new Ua(c.options, b.host, "resume", c.connectionId, c.connectionSerial), c.chooseTransportForHost(b, c.upgradeTransports.slice(), function(b, c) {
          a(null, c)
        })) : a(null, e)
      })
    }
  };
  p.prototype.chooseTransportForHost = function(a, b, c) {
    var d = b.shift();
    if(d) {
      var m = this;
      e.logAction(e.LOG_MICRO, "ConnectionManager.chooseTransportForHost()", "trying " + d);
      p.transports[d].tryConnect(this, this.realtime.auth, a, function(l, k) {
        l ? m.chooseTransportForHost(a, b, c) : (e.logAction(e.LOG_MICRO, "ConnectionManager.chooseTransport()", "transport " + d + " connecting"), m.setTransportPending(k), c(null, k))
      })
    }else {
      var k = Error("Unable to connect (no available transport)");
      k.statusCode = 404;
      k.code = 8E4;
      c(k)
    }
  };
  p.prototype.chooseHttpTransport = function(a, b) {
    function c() {
      p.httpTransports[k.httpTransports[0]].checkConnectivity(function(e, m) {
        e ? b(e) : m ? (a.host = n.arrRandomElement(d), k.chooseTransportForHost(a, k.httpTransports.slice(), function(a, d) {
          a ? c() : b(null, d)
        })) : (e = Error("Unable to connect (network unreachable)"), e.statusCode = 404, e.code = 8E4, b(e))
      })
    }
    var d = this.httpHosts.slice(), e = d.shift();
    if(e) {
      a.host = e;
      var k = this;
      this.chooseTransportForHost(a, this.httpTransports.slice(), function(a, d) {
        a ? c() : b(null, d)
      })
    }else {
      e = Error("Unable to connect (no available host)"), e.statusCode = 404, e.code = 8E4, b(e)
    }
  };
  p.prototype.setTransportPending = function(a) {
    this.pendingTransport && this.pendingTransport.abort();
    this.pendingTransport = a;
    for(var b = this, c = function(c) {
      return function(d, f) {
        e.logAction(e.LOG_MINOR, "ConnectionManager.setTransportPending", "on state = " + c);
        d && d.reason && e.logAction(e.LOG_MICRO, "ConnectionManager.setTransportPending", "reason =  " + d.reason);
        f && e.logAction(e.LOG_MICRO, "ConnectionManager.setTransportPending", "connectionId =  " + f);
        "connected" == c ? b.activateTransport(a, f) : b.deactivateTransport(a);
        b.transport === a && b.notifyState({state:c, error:d})
      }
    }, d = ["connected", "disconnected", "closed", "failed"], m = 0;m < d.length;m++) {
      var k = d[m];
      a.on(k, c(k))
    }
  };
  p.prototype.activateTransport = function(a, b) {
    if(this.state != H.closed) {
      var c = this.transport;
      c && (this.transport = null, c.close());
      if(c = this.pendingTransport) {
        this.pendingTransport = null
      }
      this.transport = a;
      this.host = a.params.host;
      b && (this.realtime.connection.id = this.connectionId = b);
      var d = this;
      a.on("ack", function(a, b) {
        e.logAction(e.LOG_MICRO, "ConnectionManager on(ack)", "serial = " + a + "; count = " + b);
        d.ackMessage(a, b)
      });
      a.on("nack", function(a, b, c) {
        e.logAction(e.LOG_ERROR, "ConnectionManager on(ack)", "serial = " + a + "; count = " + b + "; err = " + c);
        c || (c = Error("Unknown error"), c.statusCode = 500, c.code = 50001, c.reason = "Unable to send message; channel not responding");
        d.ackMessage(a, b, c)
      });
      this.msgSerial = 0;
      this.emit("transport.active", a, b, a.params)
    }
  };
  p.prototype.deactivateTransport = function(a) {
    a.off("ack");
    a.off("nack");
    this.transport === a ? this.transport = this.host = null : this.pendingTransport === a && (this.pendingTransport = null);
    this.msgSerial = null;
    this.emit("transport.inactive", a)
  };
  p.prototype.persistConnection = function() {
    Ba && (this.connectionId && Ba("ably-connection-id", this.connectionId), this.connectionSerial && Ba("ably-connection-serial", this.connectionSerial))
  };
  p.activeState = function(a) {
    return a.queueEvents || a.sendEvents
  };
  p.prototype.enactStateChange = function(a) {
    e.logAction(e.LOG_MINOR, "ConnectionManager.enactStateChange", "setting new state: " + a.current);
    this.state = H[a.current];
    this.state.terminal && (this.error = a.error);
    this.emit("connectionstate", a, this.transport)
  };
  p.prototype.startConnectTimer = function() {
    var a = this;
    this.connectTimer = setTimeout(function() {
      a.connectTimer && (e.logAction(e.LOG_MINOR, "ConnectionManager connect timer expired", "requesting new state: " + H.connecting.failState), a.notifyState({state:H.connecting.failState}))
    }, 15E3)
  };
  p.prototype.cancelConnectTimer = function() {
    this.connectTimer && (clearTimeout(this.connectTimer), this.connectTimer = void 0)
  };
  p.prototype.startSuspendTimer = function() {
    var a = this;
    this.suspendTimer || (this.suspendTimer = setTimeout(function() {
      a.suspendTimer && (e.logAction(e.LOG_MINOR, "ConnectionManager suspend timer expired", "requesting new state: suspended"), H.connecting.failState = "suspended", H.connecting.queueEvents = !1, a.notifyState({state:"suspended"}))
    }, 12E4))
  };
  p.prototype.cancelSuspendTimer = function() {
    H.connecting.failState = "disconnected";
    H.connecting.queueEvents = !0;
    this.suspendTimer && (clearTimeout(this.suspendTimer), delete this.suspendTimer)
  };
  p.prototype.startRetryTimer = function(a) {
    var b = this;
    this.retryTimer = setTimeout(function() {
      e.logAction(e.LOG_MINOR, "ConnectionManager retry timer expired", "retrying");
      b.requestState({state:"connecting"})
    }, a)
  };
  p.prototype.cancelRetryTimer = function() {
    this.retryTimer && (clearTimeout(this.retryTimer), delete this.retryTimer)
  };
  p.prototype.notifyState = function(a) {
    if(!(this.state.terminal || a.state == this.state.state)) {
      e.logAction(e.LOG_MINOR, "ConnectionManager.notifyState()", "new state: " + a.state);
      var b = H[a.state];
      !b.sendEvents && this.transport && (e.logAction(e.LOG_MINOR, "ConnectionManager.notifyState()", "deleting transport " + this.transport), this.transport.dispose(), delete this.transport);
      this.cancelConnectTimer();
      this.cancelRetryTimer();
      "connected" == a.state && this.cancelSuspendTimer();
      a = new Ca(this.state.state, b.state, b.retryDelay, a.error || pa[b.state]);
      b.retryDelay && this.startRetryTimer(b.retryDelay);
      this.enactStateChange(a);
      this.state.sendEvents ? this.sendQueuedMessages() : this.state.queueEvents && this.queuePendingMessages()
    }
  };
  p.prototype.requestState = function(a) {
    this.cancelConnectTimer();
    this.cancelRetryTimer();
    if(a.state != this.state.state) {
      if(this.state.terminal) {
        throw Error(this.error.reason);
      }
      if("connecting" == a.state) {
        if("connected" == this.state.state) {
          return
        }
        this.connectImpl()
      }else {
        this.pendingTransport && (this.pendingTransport.close(), this.pendingTransport = null), "failed" == a.state ? this.transport && (this.transport.abort(a.reason), this.transport = null) : (a.state = "closed", this.cancelConnectTimer(), this.cancelRetryTimer(), this.cancelSuspendTimer(), this.transport && (this.transport.close(), this.transport = null))
      }
      if(a.state != this.state.state) {
        var b = H[a.state], a = new Ca(this.state.state, b.state, b.retryIn, a.error || pa[b.state]);
        this.enactStateChange(a)
      }
    }
  };
  p.prototype.connectImpl = function() {
    e.logAction(e.LOG_MINOR, "ConnectionManager.connectImpl()", "starting connection");
    this.startSuspendTimer();
    this.startConnectTimer();
    var a = this, b = this.realtime.auth, c = function(d) {
      e.logAction(e.LOG_ERROR, "ConnectionManager.connectImpl()", d);
      401 == d.statusCode && (-1 != d.message.indexOf("expire") && "token" == b.method) && b.getToken(!0, function(b) {
        b ? c(b) : a.connectImpl()
      });
      a.notifyState({state:H.connecting.failState, error:d})
    }, d = function() {
      a.chooseTransport(function(a) {
        a && c(a)
      })
    };
    "basic" == b.method ? d() : b.getToken(!1, function(a) {
      a ? c(a) : d()
    })
  };
  p.prototype.send = function(a, b, c) {
    c = c || Eb;
    this.state.queueEvents && (b ? this.queue(a, c) : (e.logAction(e.LOG_MICRO, "ConnectionManager.send()", "rejecting event"), c(this.error)));
    this.state.sendEvents && (e.logAction(e.LOG_MICRO, "ConnectionManager.send()", "sending event"), this.sendImpl(new ob(a, c)))
  };
  p.prototype.sendImpl = function(a) {
    var b = a.msg;
    b.msgSerial = this.msgSerial++;
    this.pendingMessages.push(a);
    try {
      this.transport.send(b, function() {
      })
    }catch(c) {
      e.logAction(e.LOG_ERROR, "ConnectionManager.sendQueuedMessages()", "Unexpected exception in transport.send(): " + c)
    }
  };
  p.prototype.ackMessage = function(a, b, c) {
    var c = c || null, d = this.pendingMessages, e = d[0];
    if(e && (e = e.msg.msgSerial, a += b, a > e)) {
      d = d.splice(0, a - e);
      for(a = 0;a < d.length;a++) {
        d[a].callback(c)
      }
    }
  };
  p.prototype.queue = function(a, b) {
    e.logAction(e.LOG_MICRO, "ConnectionManager.queue()", "queueing event");
    var c = this.queuedMessages[this.queuedMessages.length - 1];
    c && Va.mergeTo(c.msg, a) ? (c.merged || (c.callback = new ka([c.callback]), c.merged = !0), c.listener.push(b)) : this.queuedMessages.push(new ob(a, b))
  };
  p.prototype.sendQueuedMessages = function() {
    e.logAction(e.LOG_MICRO, "ConnectionManager.sendQueuedMessages()", "sending " + this.queuedMessages.length + " queued messages");
    for(var a;a = this.queuedMessages.shift();) {
      this.sendImpl(a)
    }
  };
  p.prototype.queuePendingMessages = function() {
    e.logAction(e.LOG_MICRO, "ConnectionManager.queuePendingMessages()", "queueing " + this.pendingMessages.length + " pending messages");
    this.queuedMessages = this.pendingMessages.concat(this.queuedMessages);
    this.pendingMessages = []
  };
  p.prototype.onChannelMessage = function(a, b) {
    if(b === this.transport || b.connectionId == this.connectionId) {
      this.realtime.channels.onChannelMessage(a)
    }else {
      this.realtime.channels.retryChannelMessage(a)
    }
  };
  G = p;
  var u = function(a, b, c) {
    z.call(this);
    this.connectionManager = a;
    this.auth = b;
    this.params = c;
    c.binary ? (this.thriftTransport = la.TTransport, this.thriftProtocol = la.TBinaryProtocol, this.protocolBuffer = new la.CheckedBuffer(Fb)) : (this.thriftTransport = la.TStringTransport, this.thriftProtocol = la.TJSONProtocol);
    this.isConnected = !1
  }, Gb = "object" == typeof window, ma = ("object" == typeof F ? F : require("../nodejs/lib/protocol/clientmessage_types")).TAction, la = Gb ? d : require("thrift"), Fb = 1024;
  n.inherits(u, z);
  u.prototype.connect = function() {
  };
  u.prototype.close = function() {
    this.isConnected = !1;
    this.emit("closed", pa.closed)
  };
  u.prototype.abort = function(a) {
    this.isConnected = !1;
    this.emit("failed", a)
  };
  u.prototype.onChannelMessage = function(a) {
    switch(a.action) {
      case ma.HEARTBEAT:
        this.emit("heartbeat");
        break;
      case ma.CONNECTED:
        this.connectionId = a.connectionId;
        this.isConnected = !0;
        this.onConnect();
        this.emit("connected", null, this.connectionId);
        break;
      case ma.ACK:
        this.emit("ack", a.msgSerial, a.count);
        break;
      case ma.NACK:
        this.emit("nack", a.msgSerial, a.count, a.error);
        break;
      case ma.ERROR:
        this.abort({statusCode:a.statusCode, code:a.code, reason:a.reason});
        break;
      default:
        this.connectionManager.onChannelMessage(a, this)
    }
  };
  u.prototype.onConnect = function() {
  };
  u.prototype.onClose = function(a, b) {
    if("closed" != this.connectionManager.state.state) {
      var c = a ? "disconnected" : "failed";
      this.isConnected = !1;
      var d = n.copy(pa[c]);
      b && (d.reason = b);
      this.emit(c, d)
    }
  };
  u.prototype.dispose = function() {
    this.off()
  };
  var v = function(a, b, c) {
    this.sendOptions = {binary:c.binary = c.binary && Hb};
    u.call(this, a, b, c)
  }, Wa = "object" == typeof window, qb = Wa ? window.WebSocket || window.MozWebSocket : require("ws"), Hb = Wa ? !1 : E, Ib = "object" == typeof F ? F : require("../nodejs/lib/protocol/clientmessage_types"), Da = Wa ? d : require("thrift");
  n.inherits(v, u);
  v.isAvailable = function() {
    return!!qb
  };
  v.isAvailable() && (G.transports.web_socket = v);
  v.tryConnect = function(a, b, c, d) {
    var m = new v(a, b, c), k = function(a) {
      d(a)
    };
    m.on("wserror", k);
    m.on("wsopen", function() {
      e.logAction(e.LOG_MINOR, "WebSocketTransport.tryConnect()", "viable transport " + m);
      m.off("wserror", k);
      d(null, m)
    });
    m.connect()
  };
  v.prototype.createWebSocket = function(a, b) {
    var c = 0;
    if(b) {
      for(var d in b) {
        a += (c++ ? "&" : "?") + d + "=" + b[d]
      }
    }
    this.uri = a;
    return new qb(a)
  };
  v.prototype.toString = function() {
    return"WebSocketTransport; uri=" + this.uri
  };
  v.prototype.connect = function() {
    e.logAction(e.LOG_MINOR, "WebSocketTransport.connect()", "starting");
    u.prototype.connect.call(this);
    var a = this, b = this.params, c = b.options, d = (c.encrypted ? "wss://" : "ws://") + b.host + ":" + c.wsPort + "/applications/" + c.appId;
    e.logAction(e.LOG_MINOR, "WebSocketTransport.connect()", "uri: " + d);
    this.auth.getAuthParams(function(c, k) {
      var l = "", h;
      for(h in k) {
        l += " " + h + ": " + k[h] + ";"
      }
      e.logAction(e.LOG_MINOR, "WebSocketTransport.connect()", "authParams:" + l);
      if(c) {
        a.abort(UIMessages.FAIL_REASON_REFUSED)
      }else {
        l = b.getConnectParams(k);
        try {
          var g = a.wsConnection = a.createWebSocket(d, l);
          g.binaryType = "arraybuffer";
          g.onopen = function() {
            a.onWsOpen()
          };
          g.onclose = function(b, c) {
            a.onWsClose(b, c)
          };
          g.onmessage = function(b) {
            a.onWsData(b.data, "string" != typeof b.data)
          };
          g.onerror = function(b) {
            a.onWsError(b)
          }
        }catch(j) {
          a.onWsError(j)
        }
      }
    })
  };
  v.prototype.close = function() {
    this.dispose();
    u.prototype.close.call(this)
  };
  v.prototype.abort = function() {
    this.dispose();
    u.prototype.abort.call(this)
  };
  v.prototype.send = function(a, b) {
    var c = this;
    try {
      var d = new this.thriftProtocol(new this.thriftTransport(this.protocolBuffer, function(a) {
        c.wsConnection.send(a.buf || a, c.sendOptions);
        b(null)
      }));
      a.write(d);
      d.flush()
    }catch(m) {
      a = "Unexpected send exception: " + m, e.logAction(e.LOG_ERROR, "WebSocketTransport.send()", a), b(Error(a))
    }
  };
  v.prototype.onWsData = function(a, b) {
    var c = b ? new Da.TBinaryProtocol(new Da.TTransport(a)) : new Da.TJSONProtocol(new Da.TStringTransport(a)), d = new Ib.TChannelMessage;
    try {
      d.read(c), this.onChannelMessage(d)
    }catch(m) {
      e.logAction(e.LOG_ERROR, "Transport.onChannelEvent()", "Unexpected exception handing channel event: " + m.stack)
    }
  };
  v.prototype.onWsOpen = function() {
    e.logAction(e.LOG_MINOR, "WebSocketTransport.onWsOpen()", "opened WebSocket");
    this.emit("wsopen")
  };
  v.prototype.onWsClose = function(a, b) {
    var c, d, m;
    "object" == typeof a ? (c = a.wasClean, d = a.code, m = a.reason) : (d = a, m = b || "", c = 1E3 == d);
    e.logAction(e.LOG_MINOR, "WebSocketTransport.onWsClose()", "closed WebSocket; wasClean = " + c + "; code = " + d);
    delete this.wsConnection;
    u.prototype.onClose.call(this, c, m)
  };
  v.prototype.onWsError = function(a) {
    e.logAction(e.LOG_ERROR, "WebSocketTransport.onError()", "Unexpected error from WebSocket: " + a);
    this.emit("wserror", a);
    this.abort()
  };
  v.prototype.dispose = function() {
    this.wsConnection && (this.wsConnection.close(), delete this.wsConnection)
  };
  var w = function(a, b, c) {
    u.call(this, a, b, c);
    this.binary = this.params.binary;
    this.pendingMessage = this.pendingCallback = this.recvRequest = this.sendRequest = null
  }, Xa = "object" == typeof F ? F : require("../nodejs/lib/protocol/clientmessage_types");
  (n || require("util")).inherits(w, u);
  w.paramStr = function(a, b) {
    var c = 0, d = b || "";
    if(a) {
      for(var e in a) {
        d += (c++ ? "&" : "?") + e + "=" + a[e]
      }
    }
    return d
  };
  w.prototype.connect = function() {
    e.logAction(e.LOG_MINOR, "CometTransport.connect()", "starting");
    u.prototype.connect.call(this);
    var a = this, b = this.params, c = b.options;
    this.baseUri = (c.encrypted ? "https://" : "http://") + b.host + ":" + c.wsPort + "/comet/";
    var d = this.baseUri + c.appId + "/connect";
    e.logAction(e.LOG_MINOR, "CometTransport.connect()", "uri: " + d);
    this.auth.getAuthParams(function(b, c) {
      if(b) {
        a.abort(UIMessages.FAIL_REASON_REFUSED)
      }else {
        a.authParams = c;
        var l = a.params.getConnectParams(c);
        e.logAction(e.LOG_MINOR, "CometTransport.connect()", "connectParams:" + w.paramStr(l));
        try {
          a.request(d, l, null, !1, function(b, c) {
            b ? a.emit("error", b) : (a.emit("preconnect"), a.onResponseData(c))
          })
        }catch(h) {
          a.emit("error", h)
        }
      }
    })
  };
  w.prototype.close = function() {
    u.prototype.close.call(this);
    this.isConnected = !1;
    this.recvRequest && (this.recvRequest.abort(), this.recvRequest = null);
    var a = this;
    this.recvRequest = this.request(this.closeUri, this.authParams, null, !1, function(b) {
      a.recvRequest = null;
      b && a.emit("error", b)
    })
  };
  w.prototype.abort = function(a) {
    u.prototype.abort.call(this, a)
  };
  w.prototype.onConnect = function() {
    var a = this.baseUri + this.connectionId;
    this.sendUri = a + "/send";
    this.recvUri = a + "/recv";
    this.closeUri = a + "/close";
    this.recv()
  };
  w.prototype.send = function(a, b) {
    if(this.sendRequest) {
      this.pendingMessage = this.pendingMessage || new Xa.TMessageSet({items:[]}), this.pendingMessage.items.push(a), this.pendingCallback = this.pendingCallback || new ka, this.pendingCallback.push(b)
    }else {
      var c = this.pendingMessage || new Xa.TMessageSet({items:[]});
      c.items.push(a);
      this.pendingMessage = null;
      var d = this.pendingCallback;
      d && (d.push(b), b = d, this.pendingCallback = null);
      this.sendMessage(c, b)
    }
  };
  w.prototype.sendMessage = function(a, b) {
    var c = this;
    try {
      var d = new this.thriftProtocol(new this.thriftTransport(this.protocolBuffer, function(a) {
        c.sendRequest = c.request(c.sendUri, c.authParams, a, !1, function(a, d) {
          c.sendRequest = null;
          c.pendingMessage && (c.sendMessage(c.pendingMessage, c.pendingCallback), c.pendingMessage = null, c.pendingCallback = null);
          a ? b(a) : (c.onResponseData(d), b(null))
        })
      }));
      a.write(d);
      d.flush()
    }catch(m) {
      d = "Unexpected send exception: " + m, e.logAction(e.LOG_ERROR, "CometTransport.sendMessage()", d), b(Error(d))
    }
  };
  w.prototype.recv = function() {
    this.recvRequest && (this.recvRequest.abort(), this.recvRequest = null);
    if(this.isConnected) {
      var a = this;
      this.recvRequest = this.request(this.recvUri, this.authParams, null, !0, function(b, c) {
        b ? a.emit("error", b) : (a.onRecvResponse(c), a.recvRequest = null, a.recv())
      })
    }
  };
  w.prototype.onResponseData = function(a) {
    var a = new this.thriftProtocol(new this.thriftTransport(a)), b = new Xa.TMessageSet;
    try {
      b.read(a);
      require("util").inspect(b);
      var c = b.items;
      if(c && c.length) {
        for(a = 0;a < c.length;a++) {
          this.onChannelMessage(c[a])
        }
      }
    }catch(d) {
      e.logAction(e.LOG_ERROR, "CometTransport.onSendResponse()", "Unexpected exception handing channel event: " + d.stack)
    }
  };
  w.prototype.onRecvResponse = function(a) {
    this.onResponseData(a)
  };
  var Ka, x = function(a, b, c) {
    c.binary = c.binary && x.binary;
    w.call(this, a, b, c)
  }, rb = function() {
    var a = new XMLHttpRequest;
    return"withCredentials" in a ? a : "undefined" !== typeof XDomainRequest ? new XDomainRequest : null
  };
  n.inherits(x, w);
  x.isAvailable = function() {
    if(!rb()) {
      return!1
    }
    x.binary = !1;
    return!0
  };
  x.isAvailable() && (G.httpTransports.xhr = G.transports.xhr = x);
  x.get = function() {
  };
  x.post = function() {
  };
  x.checkConnectivity = function(a) {
    new x.Request("http://live.cdn.ably-realtime.com/is-the-internet-up.txt", null, null, !1, function(b, c) {
      a(null, !b && "yes" == c)
    })
  };
  x.tryConnect = function(a, b, c, d) {
    var m = new x(a, b, c), k = function(a) {
      d(a)
    };
    m.on("error", k);
    m.on("preconnect", function() {
      e.logAction(e.LOG_MINOR, "XHRTransport.tryConnect()", "viable transport " + m);
      m.off("error", k);
      d(null, m)
    });
    m.connect()
  };
  x.prototype.request = function(a, b, c, d, e) {
    return new x.Request(a, b, c, d, this.binary, e)
  };
  x.prototype.toString = function() {
    return"XHRTransport; uri=" + this.baseUri + "; isConnected=" + this.isConnected
  };
  x.Request = function(a, b, c, d, e, k) {
    var a = w.paramStr(b, a), h;
    c ? (b = "POST", h = 201) : (b = "GET", h = 200);
    var g = this.xhr = rb();
    e && (g.responseType = "arraybuffer");
    var j = setTimeout(d ? 9E4 : 1E4, function() {
      g.abort()
    });
    g.open(b, a, !0);
    g.setRequestHeader("Accept", e ? "application/x-thrift" : "application/json");
    g.onreadystatechange = function() {
      if(4 == g.readyState) {
        clearTimeout(j);
        var a = null;
        g.status != h ? (a = Error("Unexpected response: statusCode = " + g.status), a.statusCode = g.status, a.statusText = g.statusText, k(a)) : (a = null, e ? g.response && (a = new E, a.buf = g.response, a.view = new DataView(a.buf)) : a = g.responseText, k(null, a))
      }
    };
    g.send(c)
  };
  x.Request.prototype.abort = function() {
    this.xhr && this.xhr.abort()
  };
  Ka = x;
  var bb, B = function(a, b, c) {
    c.binary = !1;
    w.call(this, a, b, c);
    Ably._ = {}
  };
  n.inherits(B, w);
  B.isAvailable = function() {
    return!0
  };
  G.httpTransports.jsonp = G.transports.jsonp = B;
  B.get = function() {
  };
  var da = null;
  B.checkConnectivity = function(a) {
    da ? da.push(a) : (da = [a], new B.Request("http://live.cdn.ably-realtime.com/is-the-internet-up.js", null, null, !1, "isTheInternetUp", function(a, c) {
      for(var d = !a && c, e = 0;e < da.length;e++) {
        da[e](null, d)
      }
      da = null
    }))
  };
  B.tryConnect = function(a, b, c, d) {
    var m = new B(a, b, c), g = function(a) {
      d(a)
    };
    m.on("error", g);
    m.on("preconnect", function() {
      e.logAction(e.LOG_MINOR, "JSONPTransport.tryConnect()", "viable transport " + m);
      m.off("error", g);
      d(null, m)
    });
    m.connect()
  };
  B.prototype.toString = function() {
    return"JSONPTransport; uri=" + uri + "; state=" + this.state
  };
  B.prototype.toString = function() {
    return"JSONPTransport; uri=" + this.baseUri + "; isConnected=" + this.isConnected
  };
  B.prototype.request = function(a, b, c, d, e) {
    return new B.Request(a, b, c, d, null, e)
  };
  var Jb = 0;
  B.Request = function(a, b, c, d, e, g) {
    var h = Ably._;
    this.callback = g;
    null === e && (e = this.requestId = Jb++);
    var j = this.timer = setTimeout(d ? 9E4 : 1E4, function() {
      n.abort()
    });
    b.callback = "Ably._._" + e;
    c ? b.body = encodeUriComponent(c) : delete b.body;
    var i = document.createElement("script");
    i.async = !0;
    i.onerror = function() {
      n.abort()
    };
    i.src = w.paramStr(b, a);
    var n = this;
    Ably._["_" + e] = function(a) {
      clearTimeout(j);
      delete h["_" + e];
      n.aborted || (i.parentNode.removeChild(i), g(null, a))
    };
    a = document.getElementsByTagName("script")[0];
    a.parentNode.insertBefore(i, a);
    this.script = i
  };
  B.Request.prototype.abort = function() {
    clearTimeout(this.timer);
    this.aborted = !0;
    delete Ably._["_" + this.requestId];
    this.callback(Error("JSONPTransport: requestId " + this.requestId + " aborted"))
  };
  bb = B;
  var Q = function(a, b, c) {
    c.binary = !1;
    v.call(this, a, b, c)
  }, Kb = "object" == typeof window;
  n.inherits(Q, v);
  Q.isAvailable = function() {
    return Kb && V && 10 <= V.getFlashPlayerVersion().major && Aa
  };
  Q.isAvailable() && (G.transports.flash_socket = Q);
  Q.tryConnect = function(a, b, c, d) {
    Aa.__initialize();
    var g = new Q(a, b, c);
    errorCb = function(a) {
      d(a)
    };
    g.on("wserror", errorCb);
    g.on("wsopen", function() {
      e.logAction(e.LOG_MINOR, "FlashTransport.tryConnect()", "viable transport " + g);
      g.off("wsopen", errorCb);
      d(null, g)
    });
    g.connect()
  };
  Q.prototype.createWebSocket = function(a, b) {
    var c = 0;
    if(b) {
      for(var d in b) {
        a += (c++ ? "&" : "?") + d + "=" + b[d]
      }
    }
    this.uri = a;
    c = this.params.options;
    return new Aa(a, [], c.proxyHost, c.proxyPort)
  };
  Q.prototype.toString = function() {
    return"FlashTransport; uri=" + this.uri
  };
  var ea = function(a, b, c, d) {
    this.channelSerial = a;
    this.timestamp = b;
    this.name = c;
    this.data = d
  }, C = "object" == typeof F ? F : require("../nodejs/lib/protocol/clientmessage_types"), Lb = {"[object Null]":function(a) {
    a.type = C.TType.NONE;
    return!0
  }, "[object Buffer]":function(a, b) {
    a.type = C.TType.BUFFER;
    a.binaryData = b;
    return!0
  }, "[object ArrayBuffer]":function(a, b) {
    a.type = C.TType.BUFFER;
    a.binaryData = b;
    return!0
  }, "[object Array]":function(a, b) {
    a.type = C.TType.JSONARRAY;
    a.stringData = JSON.stringify(b);
    return!0
  }, "[object String]":function(a, b) {
    a.type = C.TType.STRING;
    a.stringData = b.valueOf();
    return!0
  }, "[object Number]":function(a, b) {
    a.type = C.TType.DOUBLE;
    a.doubleData = b.valueOf();
    return!0
  }, "[object Boolean]":function(a, b) {
    a.type = b.valueOf() ? C.TType.TRUE : C.TType.FALSE;
    return!0
  }, "[object Object]":function(a, b) {
    "undefined" !== typeof E && E.isBuffer(b) ? (a.type = ctypes.TType.BUFFER, a.binaryData = b) : (a.type = ctypes.TType.JSONOBJECT, a.stringData = JSON.stringify(b));
    return!0
  }, "[object Function]":function(a, b) {
    a.type = C.TType.JSONOBJECT;
    a.stringData = JSON.stringify(b);
    return!0
  }}, Mb = {undefined:function(a) {
    a.type = C.TType.NONE;
    return!0
  }, "boolean":function(a, b) {
    a.type = b ? C.TType.TRUE : C.TType.FALSE;
    return!0
  }, string:function(a, b) {
    a.type = C.TType.STRING;
    a.stringData = b;
    return!0
  }, number:function(a, b) {
    a.type = C.TType.DOUBLE;
    a.doubleData = b;
    return!0
  }, object:function(a, b) {
    var c = Lb[Object.prototype.toString.call(b)];
    return c && c(a, b)
  }};
  ea.createPayload = function(a) {
    var b = new C.TData, c = Mb[typeof a];
    if(c && c(b, a)) {
      return b
    }
    throw Error("Unsupported data type: " + Object.prototype.toString.call(a));
  };
  ea.getPayload = function(a) {
    var b = void 0;
    switch(a.type) {
      case 1:
        b = !0;
        break;
      case 2:
        b = !1;
        break;
      case 3:
        b = a.i32Data;
        break;
      case 4:
        b = a.i64Data;
        break;
      case 5:
        b = a.doubleData;
        break;
      case 6:
        b = a.stringData;
        break;
      case 7:
        b = a.binaryData;
        break;
      case 8:
      ;
      case 9:
        b = JSON.parse(a.stringData)
    }
    return b
  };
  var Ya = function() {
  };
  Ya.fromTStatsArray = function() {
  };
  Ya.fromTStats = function() {
  };
  this.Stats = Ya;
  var sb = function() {
  }, na = function() {
  };
  na.get = function(a, b, c, d, e) {
    function g() {
      a.auth.getAuthHeaders(function(h, i) {
        h ? e(h) : Http.get(a, b, n.mixin(i, c), d, function(b, c) {
          b && 40140 == b.code ? a.auth.authorise({force:!0}, function(a) {
            a ? e(a) : g()
          }) : e(b, c)
        })
      })
    }
    void 0 === e && ("function" == typeof d ? (e = d, d = null) : e = sb);
    g()
  };
  na.post = function(a, b, c, d, e, g) {
    function h() {
      a.auth.getAuthHeaders(function(i, j) {
        i ? g(i) : Http.post(a, b, n.mixin(j, d), c, e, function(b, c) {
          b && 40140 == b.code ? a.auth.authorise({force:!0}, function(a) {
            a ? g(a) : h()
          }) : g(b, c)
        })
      })
    }
    void 0 === g && ("function" == typeof e ? (g = e, e = null) : g = sb);
    h()
  };
  "object" == typeof window || require("crypto");
  var Za = function(a) {
    Rest.call(this, a);
    a.wsHost = a.wsHost || "realtime.ably.io";
    a.wsPort = a.encrypted ? a.tlsPort || 443 : a.port || 80;
    this.connection = new tb(this, a);
    this.channels = new Ea(this);
    this.connection.connect()
  }, Ea = function(a) {
    this.realtime = a;
    this.attached = {}
  };
  n.inherits(Za, Rest);
  Za.prototype.close = function() {
    e.logAction(e.LOG_MINOR, "Realtime.close()", "");
    this.connection.close()
  };
  Ea.prototype.onChannelMessage = function(a) {
    var b = a.channel;
    if(b) {
      var c = this.attached[b];
      if(c) {
        c.onMessage(a)
      }else {
        e.logAction(e.LOG_ERROR, "ConnectionManager on(channelmessage)", "received event for non-existent channel: " + b)
      }
    }else {
      e.logAction(e.LOG_ERROR, "ConnectionManager on(channelmessage)", "received event unspecified channel: " + b)
    }
  };
  Ea.prototype.retryChannelMessage = function(a) {
    var b = a.channel;
    if(b) {
      var c = this.attached[b];
      c ? c.retryMessage(a) : e.logAction(e.LOG_ERROR, "ConnectionManager on(channelmessage)", "received event for non-existent channel: " + b)
    }else {
      e.logAction(e.LOG_ERROR, "ConnectionManager on(channelmessage)", "received event unspecified channel: " + b)
    }
  };
  Ea.prototype.get = function(a, b) {
    var a = String(a), c = this.attached[a];
    c || (this.attached[a] = c = new Va(this.realtime, a, b || {}));
    return c
  };
  this.Realtime = Za;
  var Ca;
  Ca = function(a, b, c, d) {
    this.previous = a;
    this.current = b;
    c && (this.retryIn = c);
    d && (this.reason = d)
  };
  var tb, oa = function(a, b) {
    z.call(this);
    this.ably = a;
    this.connectionManager = new G(a, b);
    this.state = this.connectionManager.state.state;
    this.id = void 0;
    var c = this;
    this.connectionManager.on("connectionstate", function(a) {
      var b = c.state = a.current;
      n.nextTick(function() {
        c.emit(b, a)
      })
    })
  };
  n.inherits(oa, z);
  oa.prototype.on = function(a, b) {
    z.prototype.on.call(this, a, b);
    if(this.state == a && b) {
      try {
        b(new Ca(void 0, a))
      }catch(c) {
      }
    }
  };
  oa.prototype.connect = function() {
    this.connectionManager.requestState({state:"connecting"})
  };
  oa.prototype.close = function() {
    this.connectionManager.requestState({state:"closed"})
  };
  tb = oa;
  var Y = function(a, b) {
    e.logAction(e.LOG_MINOR, "Channel()", "started; name = " + b);
    z.call(this);
    this.rest = a;
    this.name = b
  };
  n.inherits(Y, z);
  Y.prototype.presence = function(a, b) {
    e.logAction(e.LOG_MICRO, "Channel.presence()", "channel = " + this.name);
    var c = this.rest, d = n.copy(n.defaultGetHeaders(!c.options.useTextProtocol));
    c.options.headers && n.mixin(d, c.options.headers);
    na.get(c, "/channels/" + this.name + "/presence", d, a, b)
  };
  Y.prototype.history = function(a, b) {
    e.logAction(e.LOG_MICRO, "Channel.history()", "channel = " + this.name);
    var c = this.rest, d = n.copy(n.defaultGetHeaders(!c.options.useTextProtocol));
    c.options.headers && n.mixin(d, c.options.headers);
    na.get(c, "/channels/" + this.name + "/history", d, a, b)
  };
  Y.prototype.publish = function(a, b, c) {
    e.logAction(e.LOG_MICRO, "Channel.publish()", "channel = " + this.name + "; name = " + a);
    var d = this.rest, g = !d.options.useTextProtocol;
    g && (e.logAction(e.LOG_ERROR, "Channel.publish()", "Unable to publish message in binary format (not supported yet)"), g = !1);
    a = {name:a, data:b};
    g = n.copy(n.defaultPostHeaders(g));
    d.options.headers && n.mixin(g, d.options.headers);
    na.post(d, "/channels/" + this.name + "/publish", a, g, null, c)
  };
  var Va, y = function(a, b, c) {
    e.logAction(e.LOG_MINOR, "RealtimeChannel()", "started; name = " + b);
    Y.call(this, a, b, c);
    this.presence = new ub(this, c);
    this.connectionManager = a.connection.connectionManager;
    this.options = n.prototypicalClone(Nb, c);
    this.state = "initialized";
    this.subscriptions = new z;
    this.pendingEvents = []
  }, I = "object" == typeof F ? F : require("../nodejs/lib/protocol/clientmessage_types"), R = I.TAction, fa = function() {
  }, Nb = {queueEvents:!0};
  n.inherits(y, Y);
  y.prototype.publish = function(a, b, c) {
    e.logAction(e.LOG_MICRO, "RealtimeChannel.publish()", "name = " + a);
    var c = c || fa, d = this.connectionManager.state;
    G.activeState(d) ? (d = new I.TMessage, d.name = a, d.data = ea.createPayload(b), "attached" == this.state ? (e.logAction(e.LOG_MICRO, "RealtimeChannel.publish()", "sending message"), a = new I.TChannelMessage, a.action = I.TAction.MESSAGE, a.channel = this.name, a.messages = [d], this.sendMessage(a, c)) : ("pending" != this.state && this.attach(), e.logAction(e.LOG_MICRO, "RealtimeChannel.publish()", "queueing message"), this.pendingEvents.push({message:d, listener:c}))) : c(d.defaultMessage)
  };
  y.prototype.onEvent = function(a) {
    e.logAction(e.LOG_MICRO, "RealtimeChannel.onEvent()", "received message");
    for(var b = this.subscriptions, c = 0;c < a.length;c++) {
      var d = a[c];
      b.emit(d.name, d)
    }
  };
  y.prototype.attach = function(a) {
    var a = a || fa, b = this.connectionManager, c = b.state;
    G.activeState(c) ? "attached" == this.state ? a() : "failed" == this.state ? a(c.defaultMessage) : (this.once(function(c) {
      switch(this.event) {
        case "attached":
          a();
          break;
        case "detached":
        ;
        case "failed":
          a(c || b.state.defaultMessage)
      }
    }), this.attachImpl()) : a(c.defaultMessage)
  };
  y.prototype.attachImpl = function(a) {
    e.logAction(e.LOG_MICRO, "RealtimeChannel.attachImpl()", "sending ATTACH message");
    this.state = "pending";
    var b = new I.TChannelMessage({action:I.TAction.ATTACH, channel:this.name});
    this.sendMessage(b, a || fa)
  };
  y.prototype.detach = function(a) {
    var a = a || fa, b = this.connectionManager, c = b.state;
    G.activeState(c) ? "detached" == this.state ? a() : (this.once(function(c) {
      switch(this.event) {
        case "detached":
          a();
          break;
        case "attached":
          a(UIMessages.FAIL_REASON_UNKNOWN);
          break;
        case "failed":
          a(c || b.state.defaultMessage)
      }
    }), this.detachImpl()) : a(c.defaultMessage)
  };
  y.prototype.detachImpl = function(a) {
    e.logAction(e.LOG_MICRO, "RealtimeChannel.attach()", "sending DETACH message");
    var b = new I.TChannelMessage({action:I.TAction.DETACH, channel:this.name});
    this.sendMessage(b, a || fa)
  };
  y.prototype.subscribe = function() {
    var a = Array.prototype.slice.call(arguments);
    1 == a.length && "function" == typeof a[0] && a.unshift(null);
    var b = a[0], c = a[1], a = a[2] = a[2] || fa, d = this.subscriptions;
    if(null === b || !n.isArray(b)) {
      d.on(b, c)
    }else {
      for(var e = 0;e < b.length;e++) {
        d.on(b[e], c)
      }
    }
    this.attach(a)
  };
  y.prototype.unsubscribe = function() {
    var a = Array.prototype.slice.call(arguments);
    1 == a.length && "function" == typeof a[0] && a.unshift(null);
    var b = a[0], a = a[1], c = this.subscriptions;
    if(null === b || !n.isArray(b)) {
      c.off(b, a)
    }else {
      for(var d = 0;d < b.length;d++) {
        c.off(b[d], a)
      }
    }
  };
  y.prototype.sendMessage = function(a, b) {
    this.connectionManager.send(a, this.options.queueEvents, b)
  };
  y.prototype.sendPresence = function(a, b) {
    var c = new I.TChannelMessage({action:I.TAction.PRESENCE, name:name});
    this.sendMessage(c, b)
  };
  y.prototype.onMessage = function(a) {
    switch(a.action) {
      case R.ATTACHED:
        this.setAttached(a);
        break;
      case R.DETACHED:
        this.setDetached(a);
        break;
      case R.PRESENCE:
        this.setPresence(a.presence);
        break;
      case R.MESSAGE:
        if(a = a.messages) {
          for(var b = Array(a.length), c = 0;c < b.length;c++) {
            var d = a[c];
            b[c] = new ea(d.channelSerial, d.timestamp, d.name, ea.getPayload(d.data))
          }
          this.onEvent(b)
        }
        break;
      default:
        e.logAction(e.LOG_ERROR, "RealtimeChannel.onMessage()", "Fatal protocol error: unrecognised action (" + a.action + ")"), this.connectionManager.abort(UIMessages.FAIL_REASON_FAILED)
    }
  };
  y.mergeTo = function(a, b) {
    var c = !1, d;
    if(a.channel == b.channel && (d = a.action) == b.action) {
      switch(d) {
        case R.MESSAGE:
          for(c = 0;c < b.messages.length;c++) {
            a.messages.push(b.messages[c])
          }
          c = !0;
          break;
        case R.PRESENCE:
          for(c = 0;c < b.presence.length;c++) {
            a.presence.push(b.presence[c])
          }
          c = !0
      }
    }
    return c
  };
  y.prototype.setAttached = function(a) {
    e.logAction(e.LOG_MINOR, "RealtimeChannel.setAttached", "activating channel; name = " + this.name);
    this.state = "attached";
    a.presence && this.presence.setPresence(a.presence, !1);
    this.emit("attached");
    try {
      if(this.pendingEvents.length) {
        var b = new I.TChannelMessage({action:I.TAction.MESSAGE, channel:this.name, messages:[]}), c = new ka;
        e.logAction(e.LOG_MICRO, "RealtimeChannel.setAttached", "sending " + this.pendingEvents.length + " queued messages");
        for(a = 0;a < this.pendingEvents.length;a++) {
          var d = this.pendingEvents[a];
          b.messages.push(d.message);
          c.push(d.callback)
        }
        this.sendMessage(b, c)
      }
      this.presence.setAttached()
    }catch(g) {
      e.logAction(e.LOG_ERROR, "RealtimeChannel.setSubscribed()", "Unexpected exception sending pending messages: " + g.stack)
    }
  };
  y.prototype.setDetached = function(a) {
    a.code ? (this.state = "failed", this.emit("failed", {statusCode:a.statusCode, code:a.code, reason:a.reason})) : (this.state = "detached", this.emit("detached"))
  };
  y.prototype.setSuspended = function(a) {
    e.logAction(e.LOG_MINOR, "RealtimeChannel.setSuspended", "deactivating channel; name = " + this.name);
    this.state = "detached";
    for(var b = 0;b < this.pendingEvents.length;b++) {
      try {
        this.pendingEvents[b].callback(a.defaultMessage)
      }catch(c) {
      }
    }
    this.pendingEvents = [];
    this.presence.setSuspended(a);
    this.emit("detached")
  };
  y.prototype.retryMessage = function(a) {
    switch(a.action) {
      case R.ATTACHED:
        this.attachImpl();
        break;
      case R.DETACHED:
        this.detachImpl();
        break;
      default:
        e.logAction(e.LOG_ERROR, "RealtimeChannel.retryMessage()", "Unable to retry action (" + a.action + "); ignoring")
    }
  };
  Va = y;
  var ub, L = function(a, b) {
    z.call(this);
    this.channel = a;
    this.clientId = b.clientId;
    this.clients = {}
  }, Fa = "object" == typeof F ? F : require("../nodejs/lib/protocol/clientmessage_types");
  n.inherits(L, z);
  L.prototype.enter = function(a, b) {
    if(!this.clientId) {
      throw Error("clientId must be specified to enter a presence channel");
    }
    this.enterClient(this.clientId, a, b)
  };
  L.prototype.enterClient = function(a, b, c) {
    e.logAction("Presence.enterClient()", "entering; channel = " + this.channel.name + ", client = " + a);
    this.clients[a] = b;
    a = new Fa.TPresence({state:Fa.TPresenceState.ENTER, clientId:this.clientId, clientData:Y.createPayload(b)});
    "pending" == this.channel.state ? this.pendingPresence = {presence:"enter", callback:c} : "subscribed" == this.channel.state && channel.sendPresence(a, listener)
  };
  L.prototype.leave = function(a) {
    if(!this.clientId) {
      throw Error("clientId must have been specified to enter or leave a presence channel");
    }
    this.leaveClient(this.clientId, a)
  };
  L.prototype.leaveClient = function(a, b) {
    e.logAction(e.LOG_MICRO, "Presence.leaveClient()", "leaving; channel = " + this.channel.name + ", client = " + a);
    delete this.clients[a];
    var c = new Fa.TPresence({state:Fa.TPresenceState.LEAVE, clientId:this.channel.ably.options.clientId});
    "subscribed" == this.channel.state ? this.channel.sendPresence(c, b) : "pending" == this.channel.state ? this.pendingPresence = {presence:"leave", callback:b} : delete this.pendingPresence
  };
  L.prototype.get = function(a) {
    return this.clients[a || this.clientId]
  };
  L.prototype.setPresence = function(a, b) {
    e.logAction(e.LOG_MICRO, "Presence.setPresence()", "received presence for " + a.length + " participants; channel = " + this.channel.name + ", client = " + h);
    for(var c = 0;c < a.length;c++) {
      var d = a[c], g = void 0, h = d.clientId;
      "leave" == d.state ? delete this.clients[h] : g = this.clients[h] = ea.getPayload(d.clientData);
      b && this.emit(d.state, h, g)
    }
  };
  L.prototype.setAttached = function() {
    this.pendingPresence && (e.logAction(e.LOG_MICRO, "Presence.setAttached", "sending queued presence; state = " + this.state), this.channel.sendPresence(this.pendingPresence.presence, this.pendingPresence.callback), delete this.pendingPresence)
  };
  L.prototype.setSuspended = function(a) {
    this.pendingPresence && (this.pendingPresence.callback(a.defaultMessage), delete this.pendingPresence)
  };
  ub = L;
  window.Ably = {Realtime:this.Realtime}
})();
