(function() {
  for(var F = {disconnected:{statusCode:408, code:80003, reason:"Connection to server temporarily unavailable"}, suspended:{statusCode:408, code:80002, reason:"Connection to server unavailable"}, failed:{statusCode:408, code:8E4, reason:"Connection failed or disconnected by server"}}, I = function(a, c, b) {
    function h() {
    }
    h.prototype = c.prototype;
    a.prototype = new h;
    if(b) {
      for(var e in b) {
        a.prototype[e] = b[e]
      }
    }
  }, ba = [], k = 0;256 > k;k++) {
    ba[k] = (15 < k ? "" : "0") + k.toString(16)
  }
  var K = function(a, c) {
    a instanceof Array ? (this.buffer = a, this.offset = c || 0) : (this.buffer = this.buffer || Array(8), this.offset = 0, this.setValue.apply(this, arguments))
  };
  K.MAX_INT = Math.pow(2, 53);
  K.MIN_INT = -Math.pow(2, 53);
  K.prototype = {_2scomp:function() {
    for(var a = this.buffer, c = this.offset, b = 1, h = c + 7;h >= c;h--) {
      b = (a[h] ^ 255) + b, a[h] = b & 255, b >>= 8
    }
  }, setValue:function(a, c) {
    var b = !1;
    if(1 == arguments.length) {
      if("number" == typeof a) {
        b = 0 > a;
        a = Math.abs(a);
        c = a % 4294967296;
        a /= 4294967296;
        if(4294967296 < a) {
          throw new RangeError(a + " is outside Int64 range");
        }
        a |= 0
      }else {
        if("string" == typeof a) {
          a = (a + "").replace(/^0x/, ""), c = a.substr(-8), a = 8 < a.length ? a.substr(0, a.length - 8) : "", a = parseInt(a, 16), c = parseInt(c, 16)
        }else {
          throw Error(a + " must be a Number or String");
        }
      }
    }
    for(var h = this.buffer, e = this.offset, g = 7;0 <= g;g--) {
      h[e + g] = c & 255, c = 4 == g ? a : c >>> 8
    }
    b && this._2scomp()
  }, toNumber:function(a) {
    for(var c = this.buffer, b = this.offset, h = c[0] & 128, e = 0, g = 1, d = 7, p = 1;0 <= d;d--, p *= 256) {
      var l = c[b + d];
      h && (l = (l ^ 255) + g, g = l >> 8, l &= 255);
      e += l * p
    }
    return!a && e >= K.MAX_INT ? h ? -Infinity : Infinity : h ? -e : e
  }, valueOf:function() {
    return this.toNumber(!1)
  }, toString:function(a) {
    return this.valueOf().toString(a || 10)
  }, toOctetString:function(a) {
    for(var c = Array(8), b = this.buffer, h = this.offset, e = 0;8 > e;e++) {
      c[e] = ba[b[h + e]]
    }
    return c.join(a || "")
  }, inspect:function() {
    return"[Int64 value:" + this + " octets:" + this.toOctetString(" ") + "]"
  }};
  var d = {Version:"0.8.0", Type:{STOP:0, VOID:1, BOOL:2, BYTE:3, I08:3, DOUBLE:4, I16:6, I32:8, I64:10, STRING:11, UTF7:11, STRUCT:12, MAP:13, SET:14, LIST:15, UTF8:16, UTF16:17}, MessageType:{CALL:1, REPLY:2, EXCEPTION:3}, objectLength:function(a) {
    var c = 0, b;
    for(b in a) {
      a.hasOwnProperty(b) && c++
    }
    return c
  }, inherits:function(a, c) {
    function b() {
    }
    b.prototype = c.prototype;
    a.prototype = new b
  }, TException:function(a) {
    this.message = a
  }};
  d.inherits(d.TException, Error);
  d.TException.prototype.name = "TException";
  d.TApplicationExceptionType = {UNKNOWN:0, UNKNOWN_METHOD:1, INVALID_MESSAGE_TYPE:2, WRONG_METHOD_NAME:3, BAD_SEQUENCE_ID:4, MISSING_RESULT:5, INTERNAL_ERROR:6, PROTOCOL_ERROR:7};
  d.TApplicationException = function(a, c) {
    this.message = a;
    this.code = null === c ? 0 : c
  };
  d.inherits(d.TApplicationException, d.TException);
  d.TApplicationException.prototype.name = "TApplicationException";
  d.TApplicationException.prototype.read = function(a) {
    for(;;) {
      var c = a.readFieldBegin();
      if(c.ftype == d.Type.STOP) {
        break
      }
      switch(c.fid) {
        case 1:
          c.ftype == d.Type.STRING ? (c = a.readString(), this.message = c.value) : a.skip(c.ftype);
          break;
        case 2:
          c.ftype == d.Type.I32 ? (c = a.readI32(), this.code = c.value) : a.skip(c.ftype);
          break;
        default:
          a.skip(c.ftype)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  d.TApplicationException.prototype.write = function(a) {
    a.writeStructBegin("TApplicationException");
    this.message && (a.writeFieldBegin("message", d.Type.STRING, 1), a.writeString(this.getMessage()), a.writeFieldEnd());
    this.code && (a.writeFieldBegin("type", d.Type.I32, 2), a.writeI32(this.code), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  d.TApplicationException.prototype.getCode = function() {
    return this.code
  };
  d.TApplicationException.prototype.getMessage = function() {
    return this.message
  };
  d.TXHRTransport = function(a) {
    this.url = a;
    this.rpos = this.wpos = 0;
    this.recv_buf = this.send_buf = ""
  };
  d.TXHRTransport.prototype = {getXmlHttpRequestObject:function() {
    try {
      return new XMLHttpRequest
    }catch(a) {
    }
    try {
      return new ActiveXObject("Msxml2.XMLHTTP")
    }catch(c) {
    }
    try {
      return new ActiveXObject("Microsoft.XMLHTTP")
    }catch(b) {
    }
    throw"Your browser doesn't support the XmlHttpRequest object.";
  }, flush:function(a) {
    if(a || void 0 === this.url || "" === this.url) {
      return this.send_buf
    }
    a = this.getXmlHttpRequestObject();
    a.overrideMimeType && a.overrideMimeType("application/json");
    a.open("POST", this.url, !1);
    a.send(this.send_buf);
    if(4 != a.readyState) {
      throw"encountered an unknown ajax ready state: " + a.readyState;
    }
    if(200 != a.status) {
      throw"encountered a unknown request status: " + a.status;
    }
    this.recv_buf = a.responseText;
    this.wpos = this.recv_buf_sz = this.recv_buf.length;
    this.rpos = 0
  }, jqRequest:function(a, c, b, h) {
    if("undefined" === typeof jQuery || "undefined" === typeof jQuery.Deferred) {
      throw"Thrift.js requires jQuery 1.5+ to use asynchronous requests";
    }
    var e = jQuery.Deferred(), g = jQuery._Deferred(), d = e.promise();
    d.success = d.done;
    d.error = d.fail;
    d.complete = g.done;
    c = jQuery.ajax({url:this.url, data:c, type:"POST", cache:!1, dataType:"text", context:this, success:this.jqResponse, error:function(b, c, g) {
      e.rejectWith(a, jQuery.merge([g], b.tArgs))
    }, complete:function(b, c) {
      g.resolveWith(a, [b, c])
    }});
    e.done(jQuery.makeArray(b).pop());
    c.tArgs = b;
    c.tClient = a;
    c.tRecvFn = h;
    c.tDfd = e;
    return d
  }, jqResponse:function(a, c, b) {
    this.setRecvBuffer(a);
    try {
      var h = b.tRecvFn.call(b.tClient);
      b.tDfd.resolveWith(b, jQuery.merge([h], b.tArgs))
    }catch(e) {
      b.tDfd.rejectWith(b, jQuery.merge([e], b.tArgs))
    }
  }, setRecvBuffer:function(a) {
    this.recv_buf = a;
    this.wpos = this.recv_buf_sz = this.recv_buf.length;
    this.rpos = 0
  }, isOpen:function() {
    return!0
  }, open:function() {
  }, close:function() {
  }, read:function(a) {
    var c = this.wpos - this.rpos;
    if(0 === c) {
      return""
    }
    var b = a;
    c < a && (b = c);
    a = this.read_buf.substr(this.rpos, b);
    this.rpos += b;
    return a
  }, readAll:function() {
    return this.recv_buf
  }, write:function(a) {
    this.send_buf = a
  }, getSendBuffer:function() {
    return this.send_buf
  }};
  d.TStringTransport = function(a, c) {
    this.send_buf = "";
    this.recv_buf = a || "";
    this.onFlush = c
  };
  d.TStringTransport.prototype = {flush:function() {
    if(this.onFlush) {
      this.onFlush(this.send_buf)
    }
  }, isOpen:function() {
    return!0
  }, open:function() {
  }, close:function() {
  }, read:function(a) {
    return this.recv_buf
  }, readAll:function() {
    return this.recv_buf
  }, write:function(a) {
    this.send_buf = a
  }};
  d.Protocol = function(a) {
    this.transport = a
  };
  d.Protocol.Type = {};
  d.Protocol.Type[d.Type.BOOL] = '"tf"';
  d.Protocol.Type[d.Type.BYTE] = '"i8"';
  d.Protocol.Type[d.Type.I16] = '"i16"';
  d.Protocol.Type[d.Type.I32] = '"i32"';
  d.Protocol.Type[d.Type.I64] = '"i64"';
  d.Protocol.Type[d.Type.DOUBLE] = '"dbl"';
  d.Protocol.Type[d.Type.STRUCT] = '"rec"';
  d.Protocol.Type[d.Type.STRING] = '"str"';
  d.Protocol.Type[d.Type.MAP] = '"map"';
  d.Protocol.Type[d.Type.LIST] = '"lst"';
  d.Protocol.Type[d.Type.SET] = '"set"';
  d.Protocol.RType = {};
  d.Protocol.RType.tf = d.Type.BOOL;
  d.Protocol.RType.i8 = d.Type.BYTE;
  d.Protocol.RType.i16 = d.Type.I16;
  d.Protocol.RType.i32 = d.Type.I32;
  d.Protocol.RType.i64 = d.Type.I64;
  d.Protocol.RType.dbl = d.Type.DOUBLE;
  d.Protocol.RType.rec = d.Type.STRUCT;
  d.Protocol.RType.str = d.Type.STRING;
  d.Protocol.RType.map = d.Type.MAP;
  d.Protocol.RType.lst = d.Type.LIST;
  d.Protocol.RType.set = d.Type.SET;
  d.Protocol.Version = 1;
  d.Protocol.prototype = {getTransport:function() {
    return this.transport
  }, writeMessageBegin:function(a, c, b) {
    this.tstack = [];
    this.tpos = [];
    this.tstack.push([d.Protocol.Version, '"' + a + '"', c, b])
  }, writeMessageEnd:function() {
    var a = this.tstack.pop();
    this.wobj = this.tstack.pop();
    this.wobj.push(a);
    this.wbuf = "[" + this.wobj.join(",") + "]";
    this.transport.write(this.wbuf)
  }, writeStructBegin:function(a) {
    this.tpos.push(this.tstack.length);
    this.tstack.push({})
  }, writeStructEnd:function() {
    var a = this.tpos.pop(), c = this.tstack[a], b = "{", h = !0, e;
    for(e in c) {
      h ? h = !1 : b += ",", b += e + ":" + c[e]
    }
    this.tstack[a] = b + "}"
  }, writeFieldBegin:function(a, c, b) {
    this.tpos.push(this.tstack.length);
    this.tstack.push({fieldId:'"' + b + '"', fieldType:d.Protocol.Type[c]})
  }, writeFieldEnd:function() {
    var a = this.tstack.pop(), c = this.tstack.pop();
    this.tstack[this.tstack.length - 1][c.fieldId] = "{" + c.fieldType + ":" + a + "}";
    this.tpos.pop()
  }, writeFieldStop:function() {
  }, writeMapBegin:function(a, c, b) {
    this.tpos.push(this.tstack.length);
    this.tstack.push([d.Protocol.Type[a], d.Protocol.Type[c], 0])
  }, writeMapEnd:function() {
    var a = this.tpos.pop();
    if(a != this.tstack.length) {
      0 !== (this.tstack.length - a - 1) % 2 && this.tstack.push("");
      this.tstack[a][this.tstack[a].length - 1] = (this.tstack.length - a - 1) / 2;
      for(var c = "}", b = !0;this.tstack.length > a + 1;) {
        var h = this.tstack.pop(), e = this.tstack.pop();
        b ? b = !1 : c = "," + c;
        isNaN(e) || (e = '"' + e + '"');
        c = e + ":" + h + c
      }
      this.tstack[a].push("{" + c);
      this.tstack[a] = "[" + this.tstack[a].join(",") + "]"
    }
  }, writeListBegin:function(a, c) {
    this.tpos.push(this.tstack.length);
    this.tstack.push([d.Protocol.Type[a], c])
  }, writeListEnd:function() {
    for(var a = this.tpos.pop();this.tstack.length > a + 1;) {
      var c = this.tstack[a + 1];
      this.tstack.splice(a + 1, 1);
      this.tstack[a].push(c)
    }
    this.tstack[a] = "[" + this.tstack[a].join(",") + "]"
  }, writeSetBegin:function(a, c) {
    this.tpos.push(this.tstack.length);
    this.tstack.push([d.Protocol.Type[a], c])
  }, writeSetEnd:function() {
    for(var a = this.tpos.pop();this.tstack.length > a + 1;) {
      var c = this.tstack[a + 1];
      this.tstack.splice(a + 1, 1);
      this.tstack[a].push(c)
    }
    this.tstack[a] = "[" + this.tstack[a].join(",") + "]"
  }, writeBool:function(a) {
    this.tstack.push(a ? 1 : 0)
  }, writeByte:function(a) {
    this.tstack.push(a)
  }, writeI16:function(a) {
    this.tstack.push(a)
  }, writeI32:function(a) {
    this.tstack.push(a)
  }, writeI64:function(a) {
    this.tstack.push(a)
  }, writeDouble:function(a) {
    this.tstack.push(a)
  }, writeString:function(a) {
    if(null === a) {
      this.tstack.push(null)
    }else {
      for(var c = "", b = 0;b < a.length;b++) {
        var h = a.charAt(b), c = '"' === h ? c + '\\"' : "\\" === h ? c + "\\\\" : "\b" === h ? c + "\\b" : "\f" === h ? c + "\\f" : "\n" === h ? c + "\\n" : "\r" === h ? c + "\\r" : "\t" === h ? c + "\\t" : c + h
      }
      this.tstack.push('"' + c + '"')
    }
  }, writeBinary:function(a) {
    this.writeString(a)
  }, readMessageBegin:function(a, c, b) {
    this.rstack = [];
    this.rpos = [];
    this.robj = "undefined" !== typeof jQuery ? jQuery.parseJSON(this.transport.readAll()) : eval(this.transport.readAll());
    a = {};
    c = this.robj.shift();
    if(c != d.Protocol.Version) {
      throw"Wrong thrift protocol version: " + c;
    }
    a.fname = this.robj.shift();
    a.mtype = this.robj.shift();
    a.rseqid = this.robj.shift();
    this.rstack.push(this.robj.shift());
    return a
  }, readMessageEnd:function() {
  }, readStructBegin:function(a) {
    this.rstack[this.rstack.length - 1] instanceof Array && this.rstack.push(this.rstack[this.rstack.length - 1].shift());
    return{fname:""}
  }, readStructEnd:function() {
    this.rstack[this.rstack.length - 2] instanceof Array && this.rstack.pop()
  }, readFieldBegin:function() {
    var a = {}, c = -1, b = d.Type.STOP, h;
    for(h in this.rstack[this.rstack.length - 1]) {
      if(null !== h) {
        c = parseInt(h, 10);
        this.rpos.push(this.rstack.length);
        h = this.rstack[this.rstack.length - 1][c];
        delete this.rstack[this.rstack.length - 1][c];
        this.rstack.push(h);
        break
      }
    }
    if(-1 != c) {
      for(var e in this.rstack[this.rstack.length - 1]) {
        null !== d.Protocol.RType[e] && (b = d.Protocol.RType[e], this.rstack[this.rstack.length - 1] = this.rstack[this.rstack.length - 1][e])
      }
    }
    a.fname = "";
    a.ftype = b;
    a.fid = c;
    return a
  }, readFieldEnd:function() {
    for(var a = this.rpos.pop();this.rstack.length > a;) {
      this.rstack.pop()
    }
  }, readMapBegin:function(a, c, b) {
    a = this.rstack.pop();
    c = {};
    c.ktype = d.Protocol.RType[a.shift()];
    c.vtype = d.Protocol.RType[a.shift()];
    c.size = a.shift();
    this.rpos.push(this.rstack.length);
    this.rstack.push(a.shift());
    return c
  }, readMapEnd:function() {
    this.readFieldEnd()
  }, readListBegin:function(a, c) {
    var b = this.rstack[this.rstack.length - 1], h = {};
    h.etype = d.Protocol.RType[b.shift()];
    h.size = b.shift();
    this.rpos.push(this.rstack.length);
    this.rstack.push(b);
    return h
  }, readListEnd:function() {
    this.readFieldEnd()
  }, readSetBegin:function(a, c) {
    return this.readListBegin(a, c)
  }, readSetEnd:function() {
    return this.readListEnd()
  }, readBool:function() {
    var a = this.readI32();
    a.value = null !== a && "1" == a.value ? !0 : !1;
    return a
  }, readByte:function() {
    return this.readI32()
  }, readI16:function() {
    return this.readI32()
  }, readI32:function(a) {
    void 0 === a && (a = this.rstack[this.rstack.length - 1]);
    var c = {};
    if(a instanceof Array) {
      c.value = 0 === a.length ? void 0 : a.shift()
    }else {
      if(a instanceof Object) {
        for(var b in a) {
          if(null !== b) {
            this.rstack.push(a[b]);
            delete a[b];
            c.value = b;
            break
          }
        }
      }else {
        c.value = a, this.rstack.pop()
      }
    }
    return c
  }, readI64:function() {
    return this.readI32()
  }, readDouble:function() {
    return this.readI32()
  }, readString:function() {
    return this.readI32()
  }, readBinary:function() {
    return this.readString()
  }, skip:function(a) {
    throw"skip not supported yet";
  }};
  d.TJSONProtocol = function(a) {
    this.transport = a;
    this.reset()
  };
  d.TJSONProtocol.Type = {};
  d.TJSONProtocol.Type[d.Type.BOOL] = "tf";
  d.TJSONProtocol.Type[d.Type.BYTE] = "i8";
  d.TJSONProtocol.Type[d.Type.I16] = "i16";
  d.TJSONProtocol.Type[d.Type.I32] = "i32";
  d.TJSONProtocol.Type[d.Type.I64] = "i64";
  d.TJSONProtocol.Type[d.Type.DOUBLE] = "dbl";
  d.TJSONProtocol.Type[d.Type.STRUCT] = "rec";
  d.TJSONProtocol.Type[d.Type.STRING] = "str";
  d.TJSONProtocol.Type[d.Type.MAP] = "map";
  d.TJSONProtocol.Type[d.Type.LIST] = "lst";
  d.TJSONProtocol.Type[d.Type.SET] = "set";
  d.TJSONProtocol.getValueFromScope = function(a) {
    var c = a.listvalue;
    return c ? c.shift() : a.value
  };
  d.TJSONProtocol.getScopeFromScope = function(a) {
    var c = a.listvalue;
    c && (a = {value:c.shift()});
    return a
  };
  d.TJSONProtocol.prototype = {reset:function() {
    this.elementStack = []
  }, writeMessageBegin:function(a, c, b) {
    throw Error("TJSONProtocol: Message not supported");
  }, writeMessageEnd:function() {
  }, writeStructBegin:function(a) {
    this.elementStack.unshift({})
  }, writeStructEnd:function() {
    var a = this.elementStack.shift();
    0 == this.elementStack.length ? this.transport.write(JSON.stringify(a)) : this.elementStack[0].value.push(a)
  }, writeFieldBegin:function(a, c, b) {
    this.elementStack.unshift({name:a, fieldType:d.TJSONProtocol.Type[c], fieldId:b, value:[]})
  }, writeFieldEnd:function() {
    var a = this.elementStack.shift(), c = {};
    c[a.fieldType] = a.value[0];
    this.elementStack[0][a.fieldId] = c
  }, writeFieldStop:function() {
  }, writeMapBegin:function(a, c, b) {
    this.elementStack.unshift({value:[d.TJSONProtocol.Type[a], d.TJSONProtocol.Type[c], b]})
  }, writeMapEnd:function() {
    var a = this.elementStack.shift();
    this.elementStack[0].value.push(a.value)
  }, writeListBegin:function(a, c) {
    this.elementStack.unshift({name:name, value:[d.TJSONProtocol.Type[a], c]})
  }, writeListEnd:function() {
    var a = this.elementStack.shift();
    this.elementStack[0].value.push(a.value)
  }, writeSetBegin:function(a, c) {
    this.elementStack.unshift({name:name, value:[d.TJSONProtocol.Type[a], c]})
  }, writeSetEnd:function() {
    var a = this.elementStack.shift();
    this.elementStack[0].value.push(a.value)
  }, writeBool:function(a) {
    this.elementStack[0].value.push(a ? 1 : 0)
  }, writeByte:function(a) {
    this.elementStack[0].value.push(a)
  }, writeI16:function(a) {
    this.elementStack[0].value.push(a)
  }, writeI32:function(a) {
    this.elementStack[0].value.push(a)
  }, writeI64:function(a) {
    this.elementStack[0].value.push(a)
  }, writeDouble:function(a) {
    this.elementStack[0].value.push(a)
  }, writeString:function(a) {
    this.elementStack[0].value.push(a)
  }, writeBinary:function(a) {
    this.elementStack[0].value.push(a)
  }, readMessageBegin:function(a, c, b) {
    throw Error("TJSONProtocol: Message not supported");
  }, readMessageEnd:function() {
  }, readStructBegin:function(a) {
    a = 0 == this.elementStack.length ? JSON.parse(this.transport.readAll()) : d.TJSONProtocol.getValueFromScope(this.elementStack[0]);
    var c = [], b;
    for(b in a) {
      c.push(b)
    }
    this.elementStack.unshift({fields:c, value:a});
    return{fname:""}
  }, readStructEnd:function() {
    this.elementStack.shift()
  }, readFieldBegin:function() {
    var a = this.elementStack[0], c = d.TJSONProtocol.getValueFromScope(a), a = a.fields.shift();
    if(!a) {
      return{fname:"", ftype:d.Type.STOP}
    }
    var c = c[a], b;
    for(b in c) {
      return this.elementStack.unshift({value:c[b]}), {fname:"", fid:Number(a), ftype:d.Protocol.RType[b]}
    }
    throw Error("TJSONProtocol: parse error reading field value");
  }, readFieldEnd:function() {
    this.elementStack.shift()
  }, readMapBegin:function(a, c, b) {
    a = d.TJSONProtocol.getValueFromScope(this.elementStack[0]);
    c = {ktype:d.Protocol.RType[a.shift()], vtype:d.Protocol.RType[a.shift()], size:a.shift()};
    this.elementStack.unshift({listvalue:a});
    return c
  }, readMapEnd:function() {
    this.elementStack.shift()
  }, readListBegin:function(a, c) {
    var b = d.TJSONProtocol.getValueFromScope(this.elementStack[0]), h = {etype:d.Protocol.RType[b.shift()], size:b.shift()};
    this.elementStack.unshift({listvalue:b});
    return h
  }, readListEnd:function() {
    this.elementStack.shift()
  }, readSetBegin:function(a, c) {
    var b = d.TJSONProtocol.getValueFromScope(this.elementStack[0]), h = {etype:d.Protocol.RType[b.shift()], size:b.shift()};
    this.elementStack.unshift({listvalue:b});
    return h
  }, readSetEnd:function() {
    this.elementStack.shift()
  }, readBool:function() {
    return!!d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readByte:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readI16:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readI32:function(a) {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readI64:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readDouble:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readString:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, readBinary:function() {
    return d.TJSONProtocol.getValueFromScope(this.elementStack[0])
  }, flush:function() {
    this.transport.flush()
  }};
  var W = {encode:function(a, c, b) {
    for(var h = b, e = 0;e < a.length;e++) {
      var g = a.charCodeAt(e);
      128 > g ? c.setInt8(h++, g) : (127 < g && 2048 > g ? c.setInt8(h++, g >> 6 | 192) : (c.setInt8(h++, g >> 12 | 224), c.setInt8(h++, g >> 6 & 63 | 128)), c.setInt8(h++, g & 63 | 128))
    }
    return h - b
  }, decode:function(a, c, b) {
    var h = "", e = c;
    b += c;
    for(c = c1 = c2 = 0;e < b;) {
      c = a.getInt8(e++), 128 > c ? h += String.fromCharCode(c) : 191 < c && 224 > c ? (c2 = a.getInt8(e++), h += String.fromCharCode((c & 31) << 6 | c2 & 63)) : (c2 = a.getInt8(e++), c3 = a.getInt8(e++), h += String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63))
    }
    return h
  }}, u = function(a) {
    this.offset = 0;
    if(this.length = a) {
      a = this.buf = new ArrayBuffer(a), this.view = new DataView(a)
    }
  };
  u.prototype = {getArray:function() {
    this.array || (this.array = new Uint8Array(this.buf, this.offset, this.length));
    return this.array
  }, slice:function(a, c) {
    a = a || 0;
    c = c || this.length;
    var b = new u, h = b.length = c - a, e = b.offset = this.offset + a, g = b.buf = this.buf;
    b.view = new DataView(g, e, h);
    return b
  }, getInt8:function(a) {
    return this.view.getInt8(a)
  }, getInt16:function(a) {
    return this.view.getInt16(a, !1)
  }, getInt32:function(a) {
    return this.view.getInt32(a, !1)
  }, getInt64:function(a) {
    var c = this.view.getInt32(a, !1);
    a = this.view.getUint32(a + 4, !1);
    return new K(c, a)
  }, getFloat64:function(a) {
    return this.view.getFloat64(a, !1)
  }, getUtf8String:function(a, c) {
    return W.decode(this.view, a, c)
  }, setInt8:function(a, c) {
    this.view.setInt8(a, c)
  }, setInt16:function(a, c) {
    this.view.setInt16(a, c, !1)
  }, setInt32:function(a, c) {
    this.view.setInt32(a, c, !1)
  }, setInt64:function(a, c) {
    this.getArray().set(c.buffer, a)
  }, setFloat64:function(a, c) {
    this.view.setFloat64(a, c, !1)
  }, setBuffer:function(a, c) {
    this.getArray().set(c.getArray(), a)
  }, setUtf8String:function(a, c) {
    return W.encode(c, this.view, a)
  }, inspect:function() {
    for(var a = "length: " + this.length + "\n", c = 0;c < this.length;) {
      for(var b = 0;c < this.length && 32 > b;b++) {
        a += this.view.getInt8(c++).toString(16) + " "
      }
      a += "\n"
    }
    return a
  }};
  k = d.CheckedBuffer = function(a) {
    u.call(this, a)
  };
  I(k, u, {grow:function(a) {
    a = this.length + Math.max(a || 0, 0.41 * this.length);
    var c = getArray();
    this.buf = new ArrayBuffer(a);
    this.view = new DataView(this.buf);
    this.getArray().set(c);
    this.offset = 0;
    this.length = a
  }, checkAvailable:function(a, c) {
    a + c >= this.length && this.grow(c)
  }, setInt8:function(a, c) {
    this.checkAvailable(1);
    this.view.setInt8(a, c)
  }, setInt16:function(a, c) {
    this.checkAvailable(2);
    this.view.setInt16(a, c, !1)
  }, setInt32:function(a, c) {
    this.checkAvailable(4);
    this.view.setInt32(a, c, !1)
  }, setInt64:function(a, c) {
    this.checkAvailable(8);
    this.getArray().set(c.buffer, a)
  }, setFloat64:function(a, c) {
    this.checkAvailable(8);
    this.view.setFloat64(a, c, !1)
  }, setBuffer:function(a, c) {
    this.checkAvailable(c.length);
    this.getArray().set(c.getArray(), a)
  }, setUtf8String:function(a, c) {
    for(;;) {
      try {
        return W.encode(c, this.view, a)
      }catch(b) {
        this.grow()
      }
    }
  }});
  var A = d.Type, X = function(a, c) {
    Error.call(this, c);
    this.name = "TProtocolException";
    this.type = a
  };
  I(X, Error);
  k = d.TBinaryProtocol = function(a, c, b) {
    this.trans = a;
    this.strictRead = void 0 !== c ? c : !1;
    this.strictWrite = void 0 !== b ? b : !0
  };
  k.prototype.flush = function() {
    return this.trans.flush()
  };
  k.prototype.writeMessageBegin = function(a, c, b) {
    this.strictWrite ? (this.writeI32(-2147418112 | c), this.writeString(a)) : (this.writeString(a), this.writeByte(c));
    this.writeI32(b)
  };
  k.prototype.writeMessageEnd = function() {
  };
  k.prototype.writeStructBegin = function(a) {
  };
  k.prototype.writeStructEnd = function() {
  };
  k.prototype.writeFieldBegin = function(a, c, b) {
    this.writeByte(c);
    this.writeI16(b)
  };
  k.prototype.writeFieldEnd = function() {
  };
  k.prototype.writeFieldStop = function() {
    this.writeByte(A.STOP)
  };
  k.prototype.writeMapBegin = function(a, c, b) {
    this.writeByte(a);
    this.writeByte(c);
    this.writeI32(b)
  };
  k.prototype.writeMapEnd = function() {
  };
  k.prototype.writeListBegin = function(a, c) {
    this.writeByte(a);
    this.writeI32(c)
  };
  k.prototype.writeListEnd = function() {
  };
  k.prototype.writeSetBegin = function(a, c) {
    this.writeByte(a);
    this.writeI32(c)
  };
  k.prototype.writeSetEnd = function() {
  };
  k.prototype.writeBool = function(a) {
    this.writeByte(a ? 1 : 0)
  };
  k.prototype.writeByte = function(a) {
    this.trans.writeByte(a)
  };
  k.prototype.writeI16 = function(a) {
    this.trans.writeI16(a)
  };
  k.prototype.writeI32 = function(a) {
    this.trans.writeI32(a)
  };
  k.prototype.writeI64 = function(a) {
    a.buffer ? this.trans.writeI64(a) : this.trans.writeI64(new K(a))
  };
  k.prototype.writeDouble = function(a) {
    this.trans.writeDouble(a)
  };
  k.prototype.writeString = function(a) {
    this.trans.writeWithLength(a)
  };
  k.prototype.writeBinary = function(a) {
    this.trans.writeWithLength(a)
  };
  k.prototype.readMessageBegin = function() {
    var a = this.readI32(), c, b;
    if(0 > a) {
      c = a & -65536;
      if(-2147418112 != c) {
        throw console.log("BAD: " + c), X(4, "Bad version in readMessageBegin: " + a);
      }
      a &= 255;
      c = this.readString()
    }else {
      if(this.strictRead) {
        throw X(4, "No protocol version header");
      }
      c = this.trans.read(a);
      a = this.readByte()
    }
    b = this.readI32();
    return{fname:c, mtype:a, rseqid:b}
  };
  k.prototype.readMessageEnd = function() {
  };
  k.prototype.readStructBegin = function() {
    return{fname:""}
  };
  k.prototype.readStructEnd = function() {
  };
  k.prototype.readFieldBegin = function() {
    var a = this.readByte();
    if(a == A.STOP) {
      return{fname:null, ftype:a, fid:0}
    }
    var c = this.readI16();
    return{fname:null, ftype:a, fid:c}
  };
  k.prototype.readFieldEnd = function() {
  };
  k.prototype.readMapBegin = function() {
    var a = this.readByte(), c = this.readByte(), b = this.readI32();
    return{ktype:a, vtype:c, size:b}
  };
  k.prototype.readMapEnd = function() {
  };
  k.prototype.readListBegin = function() {
    var a = this.readByte(), c = this.readI32();
    return{etype:a, size:c}
  };
  k.prototype.readListEnd = function() {
  };
  k.prototype.readSetBegin = function() {
    var a = this.readByte(), c = this.readI32();
    return{etype:a, size:c}
  };
  k.prototype.readSetEnd = function() {
  };
  k.prototype.readBool = function() {
    return 0 == this.readByte() ? !1 : !0
  };
  k.prototype.readByte = function() {
    return this.trans.readByte()
  };
  k.prototype.readI16 = function() {
    return this.trans.readI16()
  };
  k.prototype.readI32 = function() {
    return this.trans.readI32()
  };
  k.prototype.readI64 = function() {
    return this.trans.readI64()
  };
  k.prototype.readDouble = function() {
    return this.trans.readDouble()
  };
  k.prototype.readBinary = function() {
    var a = this.readI32();
    return this.trans.read(a)
  };
  k.prototype.readString = function() {
    var a = this.readI32();
    return this.trans.readString(a)
  };
  k.prototype.getTransport = function() {
    return this.trans
  };
  k.prototype.skip = function(a) {
    switch(a) {
      case A.STOP:
        break;
      case A.BOOL:
        this.readBool();
        break;
      case A.BYTE:
        this.readByte();
        break;
      case A.I16:
        this.readI16();
        break;
      case A.I32:
        this.readI32();
        break;
      case A.I64:
        this.readI64();
        break;
      case A.DOUBLE:
        this.readDouble();
        break;
      case A.STRING:
        this.readString();
        break;
      case A.STRUCT:
        for(this.readStructBegin();;) {
          a = this.readFieldBegin();
          if(a.ftype === A.STOP) {
            break
          }
          this.skip(a.ftype);
          this.readFieldEnd()
        }
        this.readStructEnd();
        break;
      case A.MAP:
        a = this.readMapBegin();
        for(var c = 0;c < a.size;++c) {
          this.skip(a.ktype), this.skip(a.vtype)
        }
        this.readMapEnd();
        break;
      case A.SET:
        a = this.readSetBegin();
        for(c = 0;c < a.size;++c) {
          this.skip(a.etype)
        }
        this.readSetEnd();
        break;
      case A.LIST:
        a = this.readListBegin();
        for(c = 0;c < a.size;++c) {
          this.skip(a.etype)
        }
        this.readListEnd();
        break;
      default:
        throw Error("Invalid type: " + a);
    }
  };
  var fa = new u(0), M = d.TTransport = function(a, c) {
    this.buf = a || fa;
    this.onFlush = c;
    this.reset()
  };
  M.receiver = function(a) {
    return function(c) {
      a(new M(c))
    }
  };
  M.prototype = {commitPosition:function() {
  }, rollbackPosition:function() {
  }, reset:function() {
    this.pos = 0
  }, isOpen:function() {
    return!0
  }, open:function() {
  }, close:function() {
  }, read:function(a) {
    var c = this.pos + a;
    if(this.buf.length < c) {
      throw Error("read(" + a + ") failed - not enough data");
    }
    a = this.buf.slice(this.pos, c);
    this.pos = c;
    return a
  }, readByte:function() {
    return this.buf.getInt8(this.pos++)
  }, readI16:function() {
    var a = this.buf.getInt16(this.pos);
    this.pos += 2;
    return a
  }, readI32:function() {
    var a = this.buf.getInt32(this.pos);
    this.pos += 4;
    return a
  }, readDouble:function() {
    var a = this.buf.getFloat64(this.pos);
    this.pos += 8;
    return a
  }, readString:function(a) {
    var c = this.buf.getUtf8String(this.pos, a);
    this.pos += a;
    return c
  }, readAll:function() {
    return this.buf
  }, writeByte:function(a) {
    this.buf.setInt8(this.pos++, a)
  }, writeI16:function(a) {
    this.buf.setInt16(this.pos, a);
    this.pos += 2
  }, writeI32:function(a) {
    this.buf.setInt32(this.pos, a);
    this.pos += 4
  }, writeI64:function(a) {
    this.buf.setInt64(this.pos, a);
    this.pos += 8
  }, writeDouble:function(a) {
    this.buf.setFloat64(this.pos, a);
    this.pos += 8
  }, write:function(a) {
    "string" === typeof a ? this.pos += this.setUtf8String(this.pos, a) : (this.setBuffer(this.pos, a), this.pos += a.length)
  }, writeWithLength:function(a) {
    "string" === typeof a ? a = this.buf.setUtf8String(this.pos + 4, a) : (this.setBuffer(this.pos + 4, a), a = a.length);
    this.buf.setInt32(this.pos, a);
    this.pos += a + 4
  }, flush:function(a) {
    if(a = a || this.onFlush) {
      var c = this.buf.slice(0, this.pos);
      a(c)
    }
  }};
  var Y = d.TFramedTransport = function(a, c) {
    M.call(this, a, c)
  };
  Y.receiver = function(a) {
    var c = 0, b = 0, h = null, e = null;
    return function(g) {
      if(e) {
        var d = new u(g.length + e.length);
        e.copy(d, 0, 0);
        g.copy(d, e.length, 0);
        e = null
      }
      for(;g.length;) {
        if(0 === c) {
          if(4 > g.length) {
            console.log("Expecting \x3e 4 bytes, found only " + g.length);
            e = g;
            break
          }
          c = binary.readI32(g, 0);
          h = new u(c);
          b = 0;
          g = g.slice(4, g.length)
        }
        g.length >= c ? (g.copy(h, b, 0, c), g = g.slice(c, g.length), c = 0, a(new Y(h))) : g.length && (g.copy(h, b, 0, g.length), c -= g.length, b += g.length, g = g.slice(g.length, g.length))
      }
    }
  };
  I(Y, M, {flush:function() {
    var a = this;
    M.prototype.flush.call(this, function(c) {
      if(a.onFlush) {
        var b = new u(c.length + 4);
        binary.writeI32(b, c.length);
        c.copy(b, 4, 0, c.length);
        a.onFlush(b)
      }
    })
  }});
  var G, D, E, J;
  TAction = {HEARTBEAT:0, ACK:1, NACK:2, CONNECT:3, CONNECTED:4, DISCONNECT:5, DISCONNECTED:6, ERROR:7, ATTACH:8, ATTACHED:9, DETACH:10, DETACHED:11, PRESENCE:12, MESSAGE:13};
  TType = {NONE:0, TRUE:1, FALSE:2, INT32:3, INT64:4, DOUBLE:5, STRING:6, BUFFER:7, JSONARRAY:8, JSONOBJECT:9};
  TFlags = {SYNC_TIME:0};
  TPresenceState = {ENTER:0, LEAVE:1, UPDATE:2};
  TError = function(a) {
    this.reason = this.code = this.statusCode = void 0;
    a && (void 0 !== a.statusCode && (this.statusCode = a.statusCode), void 0 !== a.code && (this.code = a.code), void 0 !== a.reason && (this.reason = a.reason))
  };
  TError.prototype = {};
  TError.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var c = a.readFieldBegin(), b = c.ftype;
      if(b == d.Type.STOP) {
        break
      }
      switch(c.fid) {
        case 1:
          b == d.Type.I16 ? this.statusCode = a.readI16() : a.skip(b);
          break;
        case 2:
          b == d.Type.I16 ? this.code = a.readI16() : a.skip(b);
          break;
        case 3:
          b == d.Type.STRING ? this.reason = a.readString() : a.skip(b);
          break;
        default:
          a.skip(b)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  TError.prototype.write = function(a) {
    a.writeStructBegin("TError");
    void 0 !== this.statusCode && (a.writeFieldBegin("statusCode", d.Type.I16, 1), a.writeI16(this.statusCode), a.writeFieldEnd());
    void 0 !== this.code && (a.writeFieldBegin("code", d.Type.I16, 2), a.writeI16(this.code), a.writeFieldEnd());
    void 0 !== this.reason && (a.writeFieldBegin("reason", d.Type.STRING, 3), a.writeString(this.reason), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  G = function(a) {
    this.binaryData = this.stringData = this.doubleData = this.i64Data = this.i32Data = this.type = void 0;
    a && (void 0 !== a.type && (this.type = a.type), void 0 !== a.i32Data && (this.i32Data = a.i32Data), void 0 !== a.i64Data && (this.i64Data = a.i64Data), void 0 !== a.doubleData && (this.doubleData = a.doubleData), void 0 !== a.stringData && (this.stringData = a.stringData), void 0 !== a.binaryData && (this.binaryData = a.binaryData))
  };
  G.prototype = {};
  G.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var c = a.readFieldBegin(), b = c.ftype;
      if(b == d.Type.STOP) {
        break
      }
      switch(c.fid) {
        case 1:
          b == d.Type.I32 ? this.type = a.readI32() : a.skip(b);
          break;
        case 2:
          b == d.Type.I32 ? this.i32Data = a.readI32() : a.skip(b);
          break;
        case 3:
          b == d.Type.I64 ? this.i64Data = a.readI64() : a.skip(b);
          break;
        case 4:
          b == d.Type.DOUBLE ? this.doubleData = a.readDouble() : a.skip(b);
          break;
        case 5:
          b == d.Type.STRING ? this.stringData = a.readString() : a.skip(b);
          break;
        case 6:
          b == d.Type.STRING ? this.binaryData = a.readBinary() : a.skip(b);
          break;
        default:
          a.skip(b)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  G.prototype.write = function(a) {
    a.writeStructBegin("TData");
    void 0 !== this.type && (a.writeFieldBegin("type", d.Type.I32, 1), a.writeI32(this.type), a.writeFieldEnd());
    void 0 !== this.i32Data && (a.writeFieldBegin("i32Data", d.Type.I32, 2), a.writeI32(this.i32Data), a.writeFieldEnd());
    void 0 !== this.i64Data && (a.writeFieldBegin("i64Data", d.Type.I64, 3), a.writeI64(this.i64Data), a.writeFieldEnd());
    void 0 !== this.doubleData && (a.writeFieldBegin("doubleData", d.Type.DOUBLE, 4), a.writeDouble(this.doubleData), a.writeFieldEnd());
    void 0 !== this.stringData && (a.writeFieldBegin("stringData", d.Type.STRING, 5), a.writeString(this.stringData), a.writeFieldEnd());
    void 0 !== this.binaryData && (a.writeFieldBegin("binaryData", d.Type.STRING, 6), a.writeString(this.binaryData), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  D = function(a) {
    this.clientData = this.connectionId = this.clientId = this.state = void 0;
    a && (void 0 !== a.state && (this.state = a.state), void 0 !== a.clientId && (this.clientId = a.clientId), void 0 !== a.connectionId && (this.connectionId = a.connectionId), void 0 !== a.clientData && (this.clientData = a.clientData))
  };
  D.prototype = {};
  D.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var c = a.readFieldBegin(), b = c.ftype;
      if(b == d.Type.STOP) {
        break
      }
      switch(c.fid) {
        case 1:
          b == d.Type.I32 ? this.state = a.readI32() : a.skip(b);
          break;
        case 2:
          b == d.Type.STRING ? this.clientId = a.readString() : a.skip(b);
          break;
        case 3:
          b == d.Type.STRING ? this.connectionId = a.readString() : a.skip(b);
          break;
        case 4:
          b == d.Type.STRUCT ? (this.clientData = new G, this.clientData.read(a)) : a.skip(b);
          break;
        default:
          a.skip(b)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  D.prototype.write = function(a) {
    a.writeStructBegin("TPresence");
    void 0 !== this.state && (a.writeFieldBegin("state", d.Type.I32, 1), a.writeI32(this.state), a.writeFieldEnd());
    void 0 !== this.clientId && (a.writeFieldBegin("clientId", d.Type.STRING, 2), a.writeString(this.clientId), a.writeFieldEnd());
    void 0 !== this.connectionId && (a.writeFieldBegin("connectionId", d.Type.STRING, 3), a.writeString(this.connectionId), a.writeFieldEnd());
    void 0 !== this.clientData && (a.writeFieldBegin("clientData", d.Type.STRUCT, 4), this.clientData.write(a), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  TPresenceArray = function(a) {
    this.items = void 0;
    a && void 0 !== a.items && (this.items = a.items)
  };
  TPresenceArray.prototype = {};
  TPresenceArray.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var c = a.readFieldBegin(), b = c.ftype;
      if(b == d.Type.STOP) {
        break
      }
      switch(c.fid) {
        case 1:
          if(b == d.Type.LIST) {
            c = 0;
            this.items = [];
            c = a.readListBegin().size;
            for(b = 0;b < c;++b) {
              var h = void 0, h = new D;
              h.read(a);
              this.items.push(h)
            }
            a.readListEnd()
          }else {
            a.skip(b)
          }
          break;
        case 0:
          a.skip(b);
          break;
        default:
          a.skip(b)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  TPresenceArray.prototype.write = function(a) {
    a.writeStructBegin("TPresenceArray");
    if(void 0 !== this.items) {
      a.writeFieldBegin("items", d.Type.LIST, 1);
      a.writeListBegin(d.Type.STRUCT, this.items.length);
      for(var c in this.items) {
        this.items.hasOwnProperty(c) && (c = this.items[c], c.write(a))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  E = function(a) {
    this.tags = this.data = this.timestamp = this.clientId = this.name = void 0;
    a && (void 0 !== a.name && (this.name = a.name), void 0 !== a.clientId && (this.clientId = a.clientId), void 0 !== a.timestamp && (this.timestamp = a.timestamp), void 0 !== a.data && (this.data = a.data), void 0 !== a.tags && (this.tags = a.tags))
  };
  E.prototype = {};
  E.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var c = a.readFieldBegin(), b = c.ftype;
      if(b == d.Type.STOP) {
        break
      }
      switch(c.fid) {
        case 1:
          b == d.Type.STRING ? this.name = a.readString() : a.skip(b);
          break;
        case 2:
          b == d.Type.STRING ? this.clientId = a.readString() : a.skip(b);
          break;
        case 3:
          b == d.Type.I64 ? this.timestamp = a.readI64() : a.skip(b);
          break;
        case 4:
          b == d.Type.STRUCT ? (this.data = new G, this.data.read(a)) : a.skip(b);
          break;
        case 5:
          if(b == d.Type.LIST) {
            c = 0;
            this.tags = [];
            c = a.readListBegin().size;
            for(b = 0;b < c;++b) {
              var h = void 0, h = a.readString();
              this.tags.push(h)
            }
            a.readListEnd()
          }else {
            a.skip(b)
          }
          break;
        default:
          a.skip(b)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  E.prototype.write = function(a) {
    a.writeStructBegin("TMessage");
    void 0 !== this.name && (a.writeFieldBegin("name", d.Type.STRING, 1), a.writeString(this.name), a.writeFieldEnd());
    void 0 !== this.clientId && (a.writeFieldBegin("clientId", d.Type.STRING, 2), a.writeString(this.clientId), a.writeFieldEnd());
    void 0 !== this.timestamp && (a.writeFieldBegin("timestamp", d.Type.I64, 3), a.writeI64(this.timestamp), a.writeFieldEnd());
    void 0 !== this.data && (a.writeFieldBegin("data", d.Type.STRUCT, 4), this.data.write(a), a.writeFieldEnd());
    if(void 0 !== this.tags) {
      a.writeFieldBegin("tags", d.Type.LIST, 5);
      a.writeListBegin(d.Type.STRING, this.tags.length);
      for(var c in this.tags) {
        this.tags.hasOwnProperty(c) && (c = this.tags[c], a.writeString(c))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  TMessageArray = function(a) {
    this.items = void 0;
    a && void 0 !== a.items && (this.items = a.items)
  };
  TMessageArray.prototype = {};
  TMessageArray.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var c = a.readFieldBegin(), b = c.ftype;
      if(b == d.Type.STOP) {
        break
      }
      switch(c.fid) {
        case 1:
          if(b == d.Type.LIST) {
            c = 0;
            this.items = [];
            c = a.readListBegin().size;
            for(b = 0;b < c;++b) {
              var h = void 0, h = new E;
              h.read(a);
              this.items.push(h)
            }
            a.readListEnd()
          }else {
            a.skip(b)
          }
          break;
        case 0:
          a.skip(b);
          break;
        default:
          a.skip(b)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  TMessageArray.prototype.write = function(a) {
    a.writeStructBegin("TMessageArray");
    if(void 0 !== this.items) {
      a.writeFieldBegin("items", d.Type.LIST, 1);
      a.writeListBegin(d.Type.STRUCT, this.items.length);
      for(var c in this.items) {
        this.items.hasOwnProperty(c) && (c = this.items[c], c.write(a))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  J = function(a) {
    this.presence = this.messages = this.timestamp = this.msgSerial = this.channelSerial = this.channel = this.connectionSerial = this.connectionId = this.applicationId = this.error = this.count = this.flags = this.action = void 0;
    a && (void 0 !== a.action && (this.action = a.action), void 0 !== a.flags && (this.flags = a.flags), void 0 !== a.count && (this.count = a.count), void 0 !== a.error && (this.error = a.error), void 0 !== a.applicationId && (this.applicationId = a.applicationId), void 0 !== a.connectionId && (this.connectionId = a.connectionId), void 0 !== a.connectionSerial && (this.connectionSerial = a.connectionSerial), void 0 !== a.channel && (this.channel = a.channel), void 0 !== a.channelSerial && (this.channelSerial = 
    a.channelSerial), void 0 !== a.msgSerial && (this.msgSerial = a.msgSerial), void 0 !== a.timestamp && (this.timestamp = a.timestamp), void 0 !== a.messages && (this.messages = a.messages), void 0 !== a.presence && (this.presence = a.presence))
  };
  J.prototype = {};
  J.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var c = a.readFieldBegin(), b = c.ftype;
      if(b == d.Type.STOP) {
        break
      }
      switch(c.fid) {
        case 1:
          b == d.Type.I32 ? this.action = a.readI32() : a.skip(b);
          break;
        case 2:
          b == d.Type.BYTE ? this.flags = a.readByte() : a.skip(b);
          break;
        case 3:
          b == d.Type.I32 ? this.count = a.readI32() : a.skip(b);
          break;
        case 4:
          b == d.Type.STRUCT ? (this.error = new TError, this.error.read(a)) : a.skip(b);
          break;
        case 5:
          b == d.Type.STRING ? this.applicationId = a.readString() : a.skip(b);
          break;
        case 6:
          b == d.Type.STRING ? this.connectionId = a.readString() : a.skip(b);
          break;
        case 7:
          b == d.Type.I64 ? this.connectionSerial = a.readI64() : a.skip(b);
          break;
        case 8:
          b == d.Type.STRING ? this.channel = a.readString() : a.skip(b);
          break;
        case 9:
          b == d.Type.STRING ? this.channelSerial = a.readString() : a.skip(b);
          break;
        case 10:
          b == d.Type.I64 ? this.msgSerial = a.readI64() : a.skip(b);
          break;
        case 11:
          b == d.Type.I64 ? this.timestamp = a.readI64() : a.skip(b);
          break;
        case 12:
          if(b == d.Type.LIST) {
            c = 0;
            this.messages = [];
            c = a.readListBegin().size;
            for(b = 0;b < c;++b) {
              var h = void 0, h = new E;
              h.read(a);
              this.messages.push(h)
            }
            a.readListEnd()
          }else {
            a.skip(b)
          }
          break;
        case 13:
          if(b == d.Type.SET) {
            c = 0;
            this.presence = [];
            c = a.readSetBegin().size;
            for(b = 0;b < c;++b) {
              h = void 0, h = new D, h.read(a), this.presence.push(h)
            }
            a.readSetEnd()
          }else {
            a.skip(b)
          }
          break;
        default:
          a.skip(b)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  J.prototype.write = function(a) {
    a.writeStructBegin("TChannelMessage");
    void 0 !== this.action && (a.writeFieldBegin("action", d.Type.I32, 1), a.writeI32(this.action), a.writeFieldEnd());
    void 0 !== this.flags && (a.writeFieldBegin("flags", d.Type.BYTE, 2), a.writeByte(this.flags), a.writeFieldEnd());
    void 0 !== this.count && (a.writeFieldBegin("count", d.Type.I32, 3), a.writeI32(this.count), a.writeFieldEnd());
    void 0 !== this.error && (a.writeFieldBegin("error", d.Type.STRUCT, 4), this.error.write(a), a.writeFieldEnd());
    void 0 !== this.applicationId && (a.writeFieldBegin("applicationId", d.Type.STRING, 5), a.writeString(this.applicationId), a.writeFieldEnd());
    void 0 !== this.connectionId && (a.writeFieldBegin("connectionId", d.Type.STRING, 6), a.writeString(this.connectionId), a.writeFieldEnd());
    void 0 !== this.connectionSerial && (a.writeFieldBegin("connectionSerial", d.Type.I64, 7), a.writeI64(this.connectionSerial), a.writeFieldEnd());
    void 0 !== this.channel && (a.writeFieldBegin("channel", d.Type.STRING, 8), a.writeString(this.channel), a.writeFieldEnd());
    void 0 !== this.channelSerial && (a.writeFieldBegin("channelSerial", d.Type.STRING, 9), a.writeString(this.channelSerial), a.writeFieldEnd());
    void 0 !== this.msgSerial && (a.writeFieldBegin("msgSerial", d.Type.I64, 10), a.writeI64(this.msgSerial), a.writeFieldEnd());
    void 0 !== this.timestamp && (a.writeFieldBegin("timestamp", d.Type.I64, 11), a.writeI64(this.timestamp), a.writeFieldEnd());
    if(void 0 !== this.messages) {
      a.writeFieldBegin("messages", d.Type.LIST, 12);
      a.writeListBegin(d.Type.STRUCT, this.messages.length);
      for(var c in this.messages) {
        this.messages.hasOwnProperty(c) && (c = this.messages[c], c.write(a))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    if(void 0 !== this.presence) {
      a.writeFieldBegin("presence", d.Type.SET, 13);
      a.writeSetBegin(d.Type.STRUCT, this.presence.length);
      for(var b in this.presence) {
        this.presence.hasOwnProperty(b) && (b = this.presence[b], b.write(a))
      }
      a.writeSetEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  I = function(a) {
    this.items = void 0;
    a && void 0 !== a.items && (this.items = a.items)
  };
  I.prototype = {};
  I.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var c = a.readFieldBegin(), b = c.ftype;
      if(b == d.Type.STOP) {
        break
      }
      switch(c.fid) {
        case 1:
          if(b == d.Type.LIST) {
            c = 0;
            this.items = [];
            c = a.readListBegin().size;
            for(b = 0;b < c;++b) {
              var h = void 0, h = new J;
              h.read(a);
              this.items.push(h)
            }
            a.readListEnd()
          }else {
            a.skip(b)
          }
          break;
        case 0:
          a.skip(b);
          break;
        default:
          a.skip(b)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  I.prototype.write = function(a) {
    a.writeStructBegin("TMessageSet");
    if(void 0 !== this.items) {
      a.writeFieldBegin("items", d.Type.LIST, 1);
      a.writeListBegin(d.Type.STRUCT, this.items.length);
      for(var c in this.items) {
        this.items.hasOwnProperty(c) && (c = this.items[c], c.write(a))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  SMessageCount = function(a) {
    this.data = this.count = void 0;
    a && (void 0 !== a.count && (this.count = a.count), void 0 !== a.data && (this.data = a.data))
  };
  SMessageCount.prototype = {};
  SMessageCount.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var c = a.readFieldBegin(), b = c.ftype;
      if(b == d.Type.STOP) {
        break
      }
      switch(c.fid) {
        case 1:
          b == d.Type.DOUBLE ? this.count = a.readDouble() : a.skip(b);
          break;
        case 2:
          b == d.Type.DOUBLE ? this.data = a.readDouble() : a.skip(b);
          break;
        default:
          a.skip(b)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  SMessageCount.prototype.write = function(a) {
    a.writeStructBegin("SMessageCount");
    void 0 !== this.count && (a.writeFieldBegin("count", d.Type.DOUBLE, 1), a.writeDouble(this.count), a.writeFieldEnd());
    void 0 !== this.data && (a.writeFieldBegin("data", d.Type.DOUBLE, 2), a.writeDouble(this.data), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  SMessageTypes = function(a) {
    this.presence = this.messages = this.all = void 0;
    a && (void 0 !== a.all && (this.all = a.all), void 0 !== a.messages && (this.messages = a.messages), void 0 !== a.presence && (this.presence = a.presence))
  };
  SMessageTypes.prototype = {};
  SMessageTypes.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var c = a.readFieldBegin(), b = c.ftype;
      if(b == d.Type.STOP) {
        break
      }
      switch(c.fid) {
        case 1:
          b == d.Type.STRUCT ? (this.all = new SMessageCount, this.all.read(a)) : a.skip(b);
          break;
        case 2:
          b == d.Type.STRUCT ? (this.messages = new SMessageCount, this.messages.read(a)) : a.skip(b);
          break;
        case 3:
          b == d.Type.STRUCT ? (this.presence = new SMessageCount, this.presence.read(a)) : a.skip(b);
          break;
        default:
          a.skip(b)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  SMessageTypes.prototype.write = function(a) {
    a.writeStructBegin("SMessageTypes");
    void 0 !== this.all && (a.writeFieldBegin("all", d.Type.STRUCT, 1), this.all.write(a), a.writeFieldEnd());
    void 0 !== this.messages && (a.writeFieldBegin("messages", d.Type.STRUCT, 2), this.messages.write(a), a.writeFieldEnd());
    void 0 !== this.presence && (a.writeFieldBegin("presence", d.Type.STRUCT, 3), this.presence.write(a), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  SResourceCount = function(a) {
    this.sample_sum = this.sample_count = this.refused = this.min = this.mean = this.peak = this.opened = void 0;
    a && (void 0 !== a.opened && (this.opened = a.opened), void 0 !== a.peak && (this.peak = a.peak), void 0 !== a.mean && (this.mean = a.mean), void 0 !== a.min && (this.min = a.min), void 0 !== a.refused && (this.refused = a.refused), void 0 !== a.sample_count && (this.sample_count = a.sample_count), void 0 !== a.sample_sum && (this.sample_sum = a.sample_sum))
  };
  SResourceCount.prototype = {};
  SResourceCount.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var c = a.readFieldBegin(), b = c.ftype;
      if(b == d.Type.STOP) {
        break
      }
      switch(c.fid) {
        case 1:
          b == d.Type.DOUBLE ? this.opened = a.readDouble() : a.skip(b);
          break;
        case 2:
          b == d.Type.DOUBLE ? this.peak = a.readDouble() : a.skip(b);
          break;
        case 3:
          b == d.Type.DOUBLE ? this.mean = a.readDouble() : a.skip(b);
          break;
        case 4:
          b == d.Type.DOUBLE ? this.min = a.readDouble() : a.skip(b);
          break;
        case 5:
          b == d.Type.DOUBLE ? this.refused = a.readDouble() : a.skip(b);
          break;
        case 10:
          b == d.Type.DOUBLE ? this.sample_count = a.readDouble() : a.skip(b);
          break;
        case 11:
          b == d.Type.DOUBLE ? this.sample_sum = a.readDouble() : a.skip(b);
          break;
        default:
          a.skip(b)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  SResourceCount.prototype.write = function(a) {
    a.writeStructBegin("SResourceCount");
    void 0 !== this.opened && (a.writeFieldBegin("opened", d.Type.DOUBLE, 1), a.writeDouble(this.opened), a.writeFieldEnd());
    void 0 !== this.peak && (a.writeFieldBegin("peak", d.Type.DOUBLE, 2), a.writeDouble(this.peak), a.writeFieldEnd());
    void 0 !== this.mean && (a.writeFieldBegin("mean", d.Type.DOUBLE, 3), a.writeDouble(this.mean), a.writeFieldEnd());
    void 0 !== this.min && (a.writeFieldBegin("min", d.Type.DOUBLE, 4), a.writeDouble(this.min), a.writeFieldEnd());
    void 0 !== this.refused && (a.writeFieldBegin("refused", d.Type.DOUBLE, 5), a.writeDouble(this.refused), a.writeFieldEnd());
    void 0 !== this.sample_count && (a.writeFieldBegin("sample_count", d.Type.DOUBLE, 10), a.writeDouble(this.sample_count), a.writeFieldEnd());
    void 0 !== this.sample_sum && (a.writeFieldBegin("sample_sum", d.Type.DOUBLE, 11), a.writeDouble(this.sample_sum), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  SConnectionTypes = function(a) {
    this.tls = this.plain = this.all = void 0;
    a && (void 0 !== a.all && (this.all = a.all), void 0 !== a.plain && (this.plain = a.plain), void 0 !== a.tls && (this.tls = a.tls))
  };
  SConnectionTypes.prototype = {};
  SConnectionTypes.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var c = a.readFieldBegin(), b = c.ftype;
      if(b == d.Type.STOP) {
        break
      }
      switch(c.fid) {
        case 1:
          b == d.Type.STRUCT ? (this.all = new SResourceCount, this.all.read(a)) : a.skip(b);
          break;
        case 2:
          b == d.Type.STRUCT ? (this.plain = new SResourceCount, this.plain.read(a)) : a.skip(b);
          break;
        case 3:
          b == d.Type.STRUCT ? (this.tls = new SResourceCount, this.tls.read(a)) : a.skip(b);
          break;
        default:
          a.skip(b)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  SConnectionTypes.prototype.write = function(a) {
    a.writeStructBegin("SConnectionTypes");
    void 0 !== this.all && (a.writeFieldBegin("all", d.Type.STRUCT, 1), this.all.write(a), a.writeFieldEnd());
    void 0 !== this.plain && (a.writeFieldBegin("plain", d.Type.STRUCT, 2), this.plain.write(a), a.writeFieldEnd());
    void 0 !== this.tls && (a.writeFieldBegin("tls", d.Type.STRUCT, 3), this.tls.write(a), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  SMessageTraffic = function(a) {
    this.httpStream = this.post = this.rest = this.realtime = this.all = void 0;
    a && (void 0 !== a.all && (this.all = a.all), void 0 !== a.realtime && (this.realtime = a.realtime), void 0 !== a.rest && (this.rest = a.rest), void 0 !== a.post && (this.post = a.post), void 0 !== a.httpStream && (this.httpStream = a.httpStream))
  };
  SMessageTraffic.prototype = {};
  SMessageTraffic.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var c = a.readFieldBegin(), b = c.ftype;
      if(b == d.Type.STOP) {
        break
      }
      switch(c.fid) {
        case 1:
          b == d.Type.STRUCT ? (this.all = new SMessageTypes, this.all.read(a)) : a.skip(b);
          break;
        case 2:
          b == d.Type.STRUCT ? (this.realtime = new SMessageTypes, this.realtime.read(a)) : a.skip(b);
          break;
        case 3:
          b == d.Type.STRUCT ? (this.rest = new SMessageTypes, this.rest.read(a)) : a.skip(b);
          break;
        case 4:
          b == d.Type.STRUCT ? (this.post = new SMessageTypes, this.post.read(a)) : a.skip(b);
          break;
        case 5:
          b == d.Type.STRUCT ? (this.httpStream = new SMessageTypes, this.httpStream.read(a)) : a.skip(b);
          break;
        default:
          a.skip(b)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  SMessageTraffic.prototype.write = function(a) {
    a.writeStructBegin("SMessageTraffic");
    void 0 !== this.all && (a.writeFieldBegin("all", d.Type.STRUCT, 1), this.all.write(a), a.writeFieldEnd());
    void 0 !== this.realtime && (a.writeFieldBegin("realtime", d.Type.STRUCT, 2), this.realtime.write(a), a.writeFieldEnd());
    void 0 !== this.rest && (a.writeFieldBegin("rest", d.Type.STRUCT, 3), this.rest.write(a), a.writeFieldEnd());
    void 0 !== this.post && (a.writeFieldBegin("post", d.Type.STRUCT, 4), this.post.write(a), a.writeFieldEnd());
    void 0 !== this.httpStream && (a.writeFieldBegin("httpStream", d.Type.STRUCT, 5), this.httpStream.write(a), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  SRequestCount = function(a) {
    this.refused = this.failed = this.succeeded = void 0;
    a && (void 0 !== a.succeeded && (this.succeeded = a.succeeded), void 0 !== a.failed && (this.failed = a.failed), void 0 !== a.refused && (this.refused = a.refused))
  };
  SRequestCount.prototype = {};
  SRequestCount.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var c = a.readFieldBegin(), b = c.ftype;
      if(b == d.Type.STOP) {
        break
      }
      switch(c.fid) {
        case 1:
          b == d.Type.DOUBLE ? this.succeeded = a.readDouble() : a.skip(b);
          break;
        case 2:
          b == d.Type.DOUBLE ? this.failed = a.readDouble() : a.skip(b);
          break;
        case 3:
          b == d.Type.DOUBLE ? this.refused = a.readDouble() : a.skip(b);
          break;
        default:
          a.skip(b)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  SRequestCount.prototype.write = function(a) {
    a.writeStructBegin("SRequestCount");
    void 0 !== this.succeeded && (a.writeFieldBegin("succeeded", d.Type.DOUBLE, 1), a.writeDouble(this.succeeded), a.writeFieldEnd());
    void 0 !== this.failed && (a.writeFieldBegin("failed", d.Type.DOUBLE, 2), a.writeDouble(this.failed), a.writeFieldEnd());
    void 0 !== this.refused && (a.writeFieldBegin("refused", d.Type.DOUBLE, 3), a.writeDouble(this.refused), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  SStats = function(a) {
    this.tokenRequests = this.apiRequests = this.channels = this.connections = this.persisted = this.outbound = this.inbound = this.all = void 0;
    a && (void 0 !== a.all && (this.all = a.all), void 0 !== a.inbound && (this.inbound = a.inbound), void 0 !== a.outbound && (this.outbound = a.outbound), void 0 !== a.persisted && (this.persisted = a.persisted), void 0 !== a.connections && (this.connections = a.connections), void 0 !== a.channels && (this.channels = a.channels), void 0 !== a.apiRequests && (this.apiRequests = a.apiRequests), void 0 !== a.tokenRequests && (this.tokenRequests = a.tokenRequests))
  };
  SStats.prototype = {};
  SStats.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var c = a.readFieldBegin(), b = c.ftype;
      if(b == d.Type.STOP) {
        break
      }
      switch(c.fid) {
        case 1:
          b == d.Type.STRUCT ? (this.all = new SMessageTypes, this.all.read(a)) : a.skip(b);
          break;
        case 2:
          b == d.Type.STRUCT ? (this.inbound = new SMessageTraffic, this.inbound.read(a)) : a.skip(b);
          break;
        case 3:
          b == d.Type.STRUCT ? (this.outbound = new SMessageTraffic, this.outbound.read(a)) : a.skip(b);
          break;
        case 4:
          b == d.Type.STRUCT ? (this.persisted = new SMessageTypes, this.persisted.read(a)) : a.skip(b);
          break;
        case 5:
          b == d.Type.STRUCT ? (this.connections = new SConnectionTypes, this.connections.read(a)) : a.skip(b);
          break;
        case 6:
          b == d.Type.STRUCT ? (this.channels = new SResourceCount, this.channels.read(a)) : a.skip(b);
          break;
        case 7:
          b == d.Type.STRUCT ? (this.apiRequests = new SRequestCount, this.apiRequests.read(a)) : a.skip(b);
          break;
        case 8:
          b == d.Type.STRUCT ? (this.tokenRequests = new SRequestCount, this.tokenRequests.read(a)) : a.skip(b);
          break;
        default:
          a.skip(b)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  SStats.prototype.write = function(a) {
    a.writeStructBegin("SStats");
    void 0 !== this.all && (a.writeFieldBegin("all", d.Type.STRUCT, 1), this.all.write(a), a.writeFieldEnd());
    void 0 !== this.inbound && (a.writeFieldBegin("inbound", d.Type.STRUCT, 2), this.inbound.write(a), a.writeFieldEnd());
    void 0 !== this.outbound && (a.writeFieldBegin("outbound", d.Type.STRUCT, 3), this.outbound.write(a), a.writeFieldEnd());
    void 0 !== this.persisted && (a.writeFieldBegin("persisted", d.Type.STRUCT, 4), this.persisted.write(a), a.writeFieldEnd());
    void 0 !== this.connections && (a.writeFieldBegin("connections", d.Type.STRUCT, 5), this.connections.write(a), a.writeFieldEnd());
    void 0 !== this.channels && (a.writeFieldBegin("channels", d.Type.STRUCT, 6), this.channels.write(a), a.writeFieldEnd());
    void 0 !== this.apiRequests && (a.writeFieldBegin("apiRequests", d.Type.STRUCT, 7), this.apiRequests.write(a), a.writeFieldEnd());
    void 0 !== this.tokenRequests && (a.writeFieldBegin("tokenRequests", d.Type.STRUCT, 8), this.tokenRequests.write(a), a.writeFieldEnd());
    a.writeFieldStop();
    a.writeStructEnd()
  };
  SStatsArray = function(a) {
    this.items = void 0;
    a && void 0 !== a.items && (this.items = a.items)
  };
  SStatsArray.prototype = {};
  SStatsArray.prototype.read = function(a) {
    for(a.readStructBegin();;) {
      var c = a.readFieldBegin(), b = c.ftype;
      if(b == d.Type.STOP) {
        break
      }
      switch(c.fid) {
        case 1:
          if(b == d.Type.LIST) {
            c = 0;
            this.items = [];
            c = a.readListBegin().size;
            for(b = 0;b < c;++b) {
              var h = void 0, h = new SStats;
              h.read(a);
              this.items.push(h)
            }
            a.readListEnd()
          }else {
            a.skip(b)
          }
          break;
        case 0:
          a.skip(b);
          break;
        default:
          a.skip(b)
      }
      a.readFieldEnd()
    }
    a.readStructEnd()
  };
  SStatsArray.prototype.write = function(a) {
    a.writeStructBegin("SStatsArray");
    if(void 0 !== this.items) {
      a.writeFieldBegin("items", d.Type.LIST, 1);
      a.writeListBegin(d.Type.STRUCT, this.items.length);
      for(var c in this.items) {
        this.items.hasOwnProperty(c) && (c = this.items[c], c.write(a))
      }
      a.writeListEnd();
      a.writeFieldEnd()
    }
    a.writeFieldStop();
    a.writeStructEnd()
  };
  var C = {TAction:TAction, TFlags:TFlags, TType:TType, TData:G, TPresence:D, TMessage:E, TChannelMessage:J, TMessageSet:I};
  this.Cookie = function() {
    function a() {
    }
    "object" == typeof window && (a.create = function(a, b, h) {
      var e = "";
      h && (e = new Date, e.setTime(e.getTime() + h), e = "; expires\x3d" + e.toGMTString());
      document.cookie = a + "\x3d" + b + e + "; path\x3d/"
    }, a.read = function(a) {
      a += "\x3d";
      for(var b = document.cookie.split(";"), h = 0;h < b.length;h++) {
        for(var e = b[h];" " == e.charAt(0);) {
          e = e.substring(1, e.length)
        }
        if(0 == e.indexOf(a)) {
          return e.substring(a.length, e.length)
        }
      }
      return null
    }, a.erase = function(a) {
      createCookie(a, "", -36E5)
    });
    return a
  }();
  var x = {protocolVersion:1, REST_HOST:"rest.ably.io", WS_HOST:"realtime.ably.io", FALLBACK_HOSTS:["A.ably-realtime.com", "B.ably-realtime.com", "C.ably-realtime.com", "D.ably-realtime.com", "E.ably-realtime.com"], PORT:80, TLS_PORT:443, connectTimeout:15E3, disconnectTimeout:3E4, suspendedTimeout:12E4, cometRecvTimeout:9E4, cometSendTimeout:1E4, httpTransports:["xhr", "jsonp"], transports:["web_socket", "flash_socket", "xhr", "jsonp"], flashTransport:{swfLocation:window.location.protocol + "//cdn.ably.io/lib/swf/WebSocketMainInsecure-0.9.swf", 
  policyUrl:"xmlsocket://realtime.ably.io:8843"}};
  this.Http = function() {
    function a() {
    }
    var c = function() {
    };
    a.get = function(b, h, e, g, d) {
      function p(b, c) {
        a.Request(b, g, null, !1, v, d)
      }
      d = d || c;
      var l = "function" == typeof h ? h : function(a) {
        return b.baseUri(a) + h
      }, v = e && "application/json" != e.accept;
      if("string" == typeof l) {
        p(l, d)
      }else {
        var f;
        e = b.connection;
        var s = b.options, t = s.restHost;
        "connected" == e.state ? f = e.connectionManager.host : s.fallbackHosts || (f = t);
        if(f) {
          p(l(f), d)
        }else {
          var y = fallbackHosts.slice().unshift(t);
          p(y.shift(), function(a, b, c) {
            if(a) {
              var e = a.code;
              if("ENETUNREACH" == e || "EHOSTUNREACH" == e || "EHOSTDOWN" == e) {
                p(y, d);
                return
              }
            }
            d.apply(null, arguments)
          })
        }
      }
    };
    a.post = function(b, h, e, g, d, p) {
      function l(b, c) {
        a.Request(b, d, g, !1, P, p)
      }
      p = p || c;
      var f = "function" == typeof h ? h : function(a) {
        return b.baseUri(a) + h
      }, P = e && "application/json" != e.accept;
      if("string" == typeof f) {
        tryGet(f, p)
      }else {
        var s;
        e = b.connection;
        var t = b.options, y = t.restHost;
        "connected" == e.state ? s = e.connectionManager.host : t.fallbackHosts || (s = y);
        if(s) {
          l(f(s), p)
        }else {
          var k = fallbackHosts.slice().unshift(y);
          l(k.shift(), function(a, b, c) {
            if(a) {
              var e = a.code;
              if("ENETUNREACH" == e || "EHOSTUNREACH" == e || "EHOSTDOWN" == e) {
                l(k, p);
                return
              }
            }
            p.apply(null, arguments)
          })
        }
      }
    };
    return a
  }();
  this.ThriftUtil = function() {
    function a(a) {
      a = a || 0;
      if(g.length) {
        var b = g.shift();
        if(b.length >= a) {
          return b
        }
      }
      return new u(a || e)
    }
    function c() {
    }
    var b = new d.TTransport, h = new d.TBinaryProtocol(b), e = 16384, g = [];
    c.encode = function(a, b) {
      try {
        b(null, c.encodeSync(a))
      }catch(e) {
        var g = "Unexpected exception encoding Thrift; exception \x3d " + e;
        f.logAction(f.LOG_ERROR, "ThriftUtil.encode()", g, e);
        g = Error(g);
        g.statusCode = 400;
        b(g)
      }
    };
    c.encodeSync = function(c) {
      var e = void 0;
      if(c) {
        var d = a();
        b.reset(d, function(a) {
          e = a
        });
        c.write(h);
        h.flush();
        g.unshift(d)
      }
      return e
    };
    c.decode = function(a, b, e) {
      var g = c.decodeSync(a, b);
      g ? e(g) : e(null, a, b)
    };
    c.decodeSync = function(a, c) {
      try {
        return b.reset(c), a.read(h), a
      }catch(e) {
        var g = "Unexpected exception decoding thrift message; exception \x3d " + e;
        f.logAction(f.LOG_ERROR, "ThriftUtil.decode()", g, e);
        g = Error(g);
        g.statusCode = 400;
        throw g;
      }
    }
  }();
  var T = function() {
    function a() {
      if(!R) {
        try {
          var a = q.getElementsByTagName("body")[0].appendChild(q.createElement("span"));
          a.parentNode.removeChild(a)
        }catch(b) {
          return
        }
        R = !0;
        for(var a = F.length, c = 0;c < a;c++) {
          F[c]()
        }
      }
    }
    function c(a) {
      R ? a() : F[F.length] = a
    }
    function b(a) {
      if(typeof w.addEventListener != z) {
        w.addEventListener("load", a, !1)
      }else {
        if(typeof q.addEventListener != z) {
          q.addEventListener("load", a, !1)
        }else {
          if(typeof w.attachEvent != z) {
            y(w, "onload", a)
          }else {
            if("function" == typeof w.onload) {
              var b = w.onload;
              w.onload = function() {
                b();
                a()
              }
            }else {
              w.onload = a
            }
          }
        }
      }
    }
    function h() {
      var a = q.getElementsByTagName("body")[0], b = q.createElement(u);
      b.setAttribute("type", A);
      var c = a.appendChild(b);
      if(c) {
        var g = 0;
        (function() {
          if(typeof c.GetVariable != z) {
            var h = c.GetVariable("$version");
            h && (h = h.split(" ")[1].split(","), n.pv = [parseInt(h[0], 10), parseInt(h[1], 10), parseInt(h[2], 10)])
          }else {
            if(10 > g) {
              g++;
              setTimeout(arguments.callee, 10);
              return
            }
          }
          a.removeChild(b);
          c = null;
          e()
        })()
      }else {
        e()
      }
    }
    function e() {
      var a = O.length;
      if(0 < a) {
        for(var b = 0;b < a;b++) {
          var c = O[b].id, e = O[b].callbackFn, h = {success:!1, id:c};
          if(0 < n.pv[0]) {
            var v = t(c);
            if(v) {
              if(k(O[b].swfVersion) && !(n.wk && 312 > n.wk)) {
                Q(c, !0), e && (h.success = !0, h.ref = g(c), e(h))
              }else {
                if(O[b].expressInstall && d()) {
                  h = {};
                  h.data = O[b].expressInstall;
                  h.width = v.getAttribute("width") || "0";
                  h.height = v.getAttribute("height") || "0";
                  v.getAttribute("class") && (h.styleclass = v.getAttribute("class"));
                  v.getAttribute("align") && (h.align = v.getAttribute("align"));
                  for(var s = {}, v = v.getElementsByTagName("param"), P = v.length, y = 0;y < P;y++) {
                    "movie" != v[y].getAttribute("name").toLowerCase() && (s[v[y].getAttribute("name")] = v[y].getAttribute("value"))
                  }
                  f(h, s, c, e)
                }else {
                  l(v), e && e(h)
                }
              }
            }
          }else {
            if(Q(c, !0), e) {
              if((c = g(c)) && typeof c.SetVariable != z) {
                h.success = !0, h.ref = c
              }
              e(h)
            }
          }
        }
      }
    }
    function g(a) {
      var b = null;
      if((a = t(a)) && "OBJECT" == a.nodeName) {
        typeof a.SetVariable != z ? b = a : (a = a.getElementsByTagName(u)[0]) && (b = a)
      }
      return b
    }
    function d() {
      return!J && k("6.0.65") && (n.win || n.mac) && !(n.wk && 312 > n.wk)
    }
    function f(a, b, c, e) {
      J = !0;
      K = e || null;
      M = {success:!1, id:c};
      var g = t(c);
      if(g) {
        "OBJECT" == g.nodeName ? (E = v(g), H = null) : (E = g, H = c);
        a.id = C;
        if(typeof a.width == z || !/%$/.test(a.width) && 310 > parseInt(a.width, 10)) {
          a.width = "310"
        }
        if(typeof a.height == z || !/%$/.test(a.height) && 137 > parseInt(a.height, 10)) {
          a.height = "137"
        }
        q.title = q.title.slice(0, 47) + " - Flash Player Installation";
        e = n.ie && n.win ? "ActiveX" : "PlugIn";
        e = "MMredirectURL\x3d" + w.location.toString().replace(/&/g, "%26") + "\x26MMplayerType\x3d" + e + "\x26MMdoctitle\x3d" + q.title;
        b.flashvars = typeof b.flashvars != z ? b.flashvars + ("\x26" + e) : e;
        n.ie && (n.win && 4 != g.readyState) && (e = q.createElement("div"), c += "SWFObjectNew", e.setAttribute("id", c), g.parentNode.insertBefore(e, g), g.style.display = "none", function() {
          4 == g.readyState ? g.parentNode.removeChild(g) : setTimeout(arguments.callee, 10)
        }());
        P(a, b, c)
      }
    }
    function l(a) {
      if(n.ie && n.win && 4 != a.readyState) {
        var b = q.createElement("div");
        a.parentNode.insertBefore(b, a);
        b.parentNode.replaceChild(v(a), b);
        a.style.display = "none";
        (function() {
          4 == a.readyState ? a.parentNode.removeChild(a) : setTimeout(arguments.callee, 10)
        })()
      }else {
        a.parentNode.replaceChild(v(a), a)
      }
    }
    function v(a) {
      var b = q.createElement("div");
      if(n.win && n.ie) {
        b.innerHTML = a.innerHTML
      }else {
        if(a = a.getElementsByTagName(u)[0]) {
          if(a = a.childNodes) {
            for(var c = a.length, e = 0;e < c;e++) {
              !(1 == a[e].nodeType && "PARAM" == a[e].nodeName) && 8 != a[e].nodeType && b.appendChild(a[e].cloneNode(!0))
            }
          }
        }
      }
      return b
    }
    function P(a, b, c) {
      var e, g = t(c);
      if(n.wk && 312 > n.wk) {
        return e
      }
      if(g) {
        if(typeof a.id == z && (a.id = c), n.ie && n.win) {
          var h = "", d;
          for(d in a) {
            a[d] != Object.prototype[d] && ("data" == d.toLowerCase() ? b.movie = a[d] : "styleclass" == d.toLowerCase() ? h += ' class\x3d"' + a[d] + '"' : "classid" != d.toLowerCase() && (h += " " + d + '\x3d"' + a[d] + '"'))
          }
          d = "";
          for(var l in b) {
            b[l] != Object.prototype[l] && (d += '\x3cparam name\x3d"' + l + '" value\x3d"' + b[l] + '" /\x3e')
          }
          g.outerHTML = '\x3cobject classid\x3d"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + h + "\x3e" + d + "\x3c/object\x3e";
          G[G.length] = a.id;
          e = t(a.id)
        }else {
          l = q.createElement(u);
          l.setAttribute("type", A);
          for(var r in a) {
            a[r] != Object.prototype[r] && ("styleclass" == r.toLowerCase() ? l.setAttribute("class", a[r]) : "classid" != r.toLowerCase() && l.setAttribute(r, a[r]))
          }
          for(h in b) {
            b[h] != Object.prototype[h] && "movie" != h.toLowerCase() && (a = l, d = h, r = b[h], c = q.createElement("param"), c.setAttribute("name", d), c.setAttribute("value", r), a.appendChild(c))
          }
          g.parentNode.replaceChild(l, g);
          e = l
        }
      }
      return e
    }
    function s(a) {
      var b = t(a);
      b && "OBJECT" == b.nodeName && (n.ie && n.win ? (b.style.display = "none", function() {
        if(4 == b.readyState) {
          var c = t(a);
          if(c) {
            for(var e in c) {
              "function" == typeof c[e] && (c[e] = null)
            }
            c.parentNode.removeChild(c)
          }
        }else {
          setTimeout(arguments.callee, 10)
        }
      }()) : b.parentNode.removeChild(b))
    }
    function t(a) {
      var b = null;
      try {
        b = q.getElementById(a)
      }catch(c) {
      }
      return b
    }
    function y(a, b, c) {
      a.attachEvent(b, c);
      D[D.length] = [a, b, c]
    }
    function k(a) {
      var b = n.pv;
      a = a.split(".");
      a[0] = parseInt(a[0], 10);
      a[1] = parseInt(a[1], 10) || 0;
      a[2] = parseInt(a[2], 10) || 0;
      return b[0] > a[0] || b[0] == a[0] && b[1] > a[1] || b[0] == a[0] && b[1] == a[1] && b[2] >= a[2] ? !0 : !1
    }
    function m(a, b, c, e) {
      if(!n.ie || !n.mac) {
        var g = q.getElementsByTagName("head")[0];
        if(g) {
          c = c && "string" == typeof c ? c : "screen";
          e && (L = N = null);
          if(!N || L != c) {
            e = q.createElement("style"), e.setAttribute("type", "text/css"), e.setAttribute("media", c), N = g.appendChild(e), n.ie && (n.win && typeof q.styleSheets != z && 0 < q.styleSheets.length) && (N = q.styleSheets[q.styleSheets.length - 1]), L = c
          }
          n.ie && n.win ? N && typeof N.addRule == u && N.addRule(a, b) : N && typeof q.createTextNode != z && N.appendChild(q.createTextNode(a + " {" + b + "}"))
        }
      }
    }
    function Q(a, b) {
      if(S) {
        var c = b ? "visible" : "hidden";
        R && t(a) ? t(a).style.visibility = c : m("#" + a, "visibility:" + c)
      }
    }
    function x(a) {
      return null != /[\\\"<>\.;]/.exec(a) && typeof encodeURIComponent != z ? encodeURIComponent(a) : a
    }
    var z = "undefined", u = "object", A = "application/x-shockwave-flash", C = "SWFObjectExprInst", w = window, q = document, B = navigator, I = !1, F = [function() {
      I ? h() : e()
    }], O = [], G = [], D = [], E, H, K, M, R = !1, J = !1, N, L, S = !0, n = function() {
      var a = typeof q.getElementById != z && typeof q.getElementsByTagName != z && typeof q.createElement != z, b = B.userAgent.toLowerCase(), c = B.platform.toLowerCase(), e = c ? /win/.test(c) : /win/.test(b), c = c ? /mac/.test(c) : /mac/.test(b), b = /webkit/.test(b) ? parseFloat(b.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : !1, g = !+"\v1", h = [0, 0, 0], d = null;
      if(typeof B.plugins != z && typeof B.plugins["Shockwave Flash"] == u) {
        if((d = B.plugins["Shockwave Flash"].description) && !(typeof B.mimeTypes != z && B.mimeTypes[A] && !B.mimeTypes[A].enabledPlugin)) {
          I = !0, g = !1, d = d.replace(/^.*\s+(\S+\s+\S+$)/, "$1"), h[0] = parseInt(d.replace(/^(.*)\..*$/, "$1"), 10), h[1] = parseInt(d.replace(/^.*\.(.*)\s.*$/, "$1"), 10), h[2] = /[a-zA-Z]/.test(d) ? parseInt(d.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0
        }
      }else {
        if(typeof w.ActiveXObject != z) {
          try {
            var l = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
            if(l && (d = l.GetVariable("$version"))) {
              g = !0, d = d.split(" ")[1].split(","), h = [parseInt(d[0], 10), parseInt(d[1], 10), parseInt(d[2], 10)]
            }
          }catch(r) {
          }
        }
      }
      return{w3:a, pv:h, wk:b, ie:g, win:e, mac:c}
    }();
    (function() {
      n.w3 && ((typeof q.readyState != z && "complete" == q.readyState || typeof q.readyState == z && (q.getElementsByTagName("body")[0] || q.body)) && a(), R || (typeof q.addEventListener != z && q.addEventListener("DOMContentLoaded", a, !1), n.ie && n.win && (q.attachEvent("onreadystatechange", function() {
        "complete" == q.readyState && (q.detachEvent("onreadystatechange", arguments.callee), a())
      }), w == top && function() {
        if(!R) {
          try {
            q.documentElement.doScroll("left")
          }catch(b) {
            setTimeout(arguments.callee, 0);
            return
          }
          a()
        }
      }()), n.wk && function() {
        R || (/loaded|complete/.test(q.readyState) ? a() : setTimeout(arguments.callee, 0))
      }(), b(a)))
    })();
    (function() {
      n.ie && n.win && window.attachEvent("onunload", function() {
        for(var a = D.length, b = 0;b < a;b++) {
          D[b][0].detachEvent(D[b][1], D[b][2])
        }
        a = G.length;
        for(b = 0;b < a;b++) {
          s(G[b])
        }
        for(var c in n) {
          n[c] = null
        }
        n = null;
        for(var e in T) {
          T[e] = null
        }
        T = null
      })
    })();
    return{registerObject:function(a, b, c, e) {
      if(n.w3 && a && b) {
        var g = {};
        g.id = a;
        g.swfVersion = b;
        g.expressInstall = c;
        g.callbackFn = e;
        O[O.length] = g;
        Q(a, !1)
      }else {
        e && e({success:!1, id:a})
      }
    }, getObjectById:function(a) {
      if(n.w3) {
        return g(a)
      }
    }, embedSWF:function(a, b, e, g, h, l, v, s, t, y) {
      var m = {success:!1, id:b};
      n.w3 && !(n.wk && 312 > n.wk) && a && b && e && g && h ? (Q(b, !1), c(function() {
        e += "";
        g += "";
        var c = {};
        if(t && typeof t === u) {
          for(var n in t) {
            c[n] = t[n]
          }
        }
        c.data = a;
        c.width = e;
        c.height = g;
        n = {};
        if(s && typeof s === u) {
          for(var q in s) {
            n[q] = s[q]
          }
        }
        if(v && typeof v === u) {
          for(var U in v) {
            n.flashvars = typeof n.flashvars != z ? n.flashvars + ("\x26" + U + "\x3d" + v[U]) : U + "\x3d" + v[U]
          }
        }
        if(k(h)) {
          q = P(c, n, b), c.id == b && Q(b, !0), m.success = !0, m.ref = q
        }else {
          if(l && d()) {
            c.data = l;
            f(c, n, b, y);
            return
          }
          Q(b, !0)
        }
        y && y(m)
      })) : y && y(m)
    }, switchOffAutoHideShow:function() {
      S = !1
    }, ua:n, getFlashPlayerVersion:function() {
      return{major:n.pv[0], minor:n.pv[1], release:n.pv[2]}
    }, hasFlashPlayerVersion:k, createSWF:function(a, b, c) {
      if(n.w3) {
        return P(a, b, c)
      }
    }, showExpressInstall:function(a, b, c, e) {
      n.w3 && d() && f(a, b, c, e)
    }, removeSWF:function(a) {
      n.w3 && s(a)
    }, createCSS:function(a, b, c, e) {
      n.w3 && m(a, b, c, e)
    }, addDomLoadEvent:c, addLoadEvent:b, getQueryParamValue:function(a) {
      var b = q.location.search || q.location.hash;
      if(b) {
        /\?/.test(b) && (b = b.split("?")[1]);
        if(null == a) {
          return x(b)
        }
        for(var b = b.split("\x26"), c = 0;c < b.length;c++) {
          if(b[c].substring(0, b[c].indexOf("\x3d")) == a) {
            return x(b[c].substring(b[c].indexOf("\x3d") + 1))
          }
        }
      }
      return""
    }, expressInstallCallback:function() {
      if(J) {
        var a = t(C);
        a && E && (a.parentNode.replaceChild(E, a), H && (Q(H, !0), n.ie && n.win && (E.style.display = "block")), K && K(M));
        J = !1
      }
    }}
  }(), S = function() {
    window.WebSocket = window.WebSocket || {};
    logger = window.console && window.console.log && window.console.error ? window.console : {log:function() {
    }, error:function() {
    }};
    var a = function(c, b, h, e, g) {
      var d = this;
      d.__id = a.__nextId++;
      a.__instances[d.__id] = d;
      d.readyState = a.CONNECTING;
      d.bufferedAmount = 0;
      d.__events = {};
      b ? "string" == typeof b && (b = [b]) : b = [];
      d.__createTask = setTimeout(function() {
        a.__addTask(function() {
          d.__createTask = null;
          a.__flash.create(d.__id, c, b, h || null, e || 0, g || null)
        })
      }, 0)
    };
    a.prototype.send = function(c) {
      if(this.readyState == a.CONNECTING) {
        throw"INVALID_STATE_ERR: Web Socket connection has not been established";
      }
      c = a.__flash.send(this.__id, encodeURIComponent(c));
      if(0 > c) {
        return!0
      }
      this.bufferedAmount += c;
      return!1
    };
    a.prototype.close = function() {
      this.__createTask ? (clearTimeout(this.__createTask), this.__createTask = null, this.readyState = a.CLOSED) : this.readyState == a.CLOSED || this.readyState == a.CLOSING || (this.readyState = a.CLOSING, a.__flash.close(this.__id))
    };
    a.prototype.addEventListener = function(a, b, h) {
      a in this.__events || (this.__events[a] = []);
      this.__events[a].push(b)
    };
    a.prototype.removeEventListener = function(a, b, h) {
      if(a in this.__events) {
        a = this.__events[a];
        for(h = a.length - 1;0 <= h;--h) {
          if(a[h] === b) {
            a.splice(h, 1);
            break
          }
        }
      }
    };
    a.prototype.dispatchEvent = function(a) {
      for(var b = this.__events[a.type] || [], h = 0;h < b.length;++h) {
        b[h](a)
      }
      (b = this["on" + a.type]) && b.apply(this, [a])
    };
    a.prototype.__handleEvent = function(a) {
      "readyState" in a && (this.readyState = a.readyState);
      "protocol" in a && (this.protocol = a.protocol);
      var b;
      if("open" == a.type || "error" == a.type) {
        b = this.__createSimpleEvent(a.type)
      }else {
        if("close" == a.type) {
          b = this.__createSimpleEvent("close"), b.wasClean = a.wasClean ? !0 : !1, b.code = a.code, b.reason = a.reason
        }else {
          if("message" == a.type) {
            a = decodeURIComponent(a.message), b = this.__createMessageEvent("message", a)
          }else {
            throw"unknown event type: " + a.type;
          }
        }
      }
      this.dispatchEvent(b)
    };
    a.prototype.__createSimpleEvent = function(a) {
      if(document.createEvent && window.Event) {
        var b = document.createEvent("Event");
        b.initEvent(a, !1, !1);
        return b
      }
      return{type:a, bubbles:!1, cancelable:!1}
    };
    a.prototype.__createMessageEvent = function(a, b) {
      if(document.createEvent && window.MessageEvent && !window.opera) {
        var h = document.createEvent("MessageEvent");
        h.initMessageEvent("message", !1, !1, b, null, null, window, null);
        return h
      }
      return{type:a, data:b, bubbles:!1, cancelable:!1}
    };
    a.CONNECTING = 0;
    a.OPEN = 1;
    a.CLOSING = 2;
    a.CLOSED = 3;
    a.__isFlashImplementation = !0;
    a.__initialized = !1;
    a.__flash = null;
    a.__instances = {};
    a.__tasks = [];
    a.__nextId = 0;
    a.loadFlashPolicyFile = function(c) {
      a.__addTask(function() {
        a.__flash.loadManualPolicyFile(c)
      })
    };
    a.__initialize = function(c) {
      if(!a.__initialized) {
        a.__initialized = !0;
        var b = document.createElement("div");
        b.id = "webSocketContainer";
        b.style.position = "absolute";
        a.__isFlashLite() ? (b.style.left = "0px", b.style.top = "0px") : (b.style.left = "-100px", b.style.top = "-100px");
        var h = document.createElement("div");
        h.id = "webSocketFlash";
        b.appendChild(h);
        document.body.appendChild(b);
        T.embedSWF(c, "webSocketFlash", "1", "1", "10.0.0", null, null, {hasPriority:!0, swliveconnect:!0, allowScriptAccess:"always"}, null, function(a) {
          a.success || logger.error("[WebSocket] swfobject.embedSWF failed")
        })
      }
    };
    window.WebSocket.__onFlashInitialized = a.__onFlashInitialized = function() {
      setTimeout(function() {
        a.__flash = document.getElementById("webSocketFlash");
        a.__flash.setCallerUrl(location.href);
        a.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);
        for(var c = 0;c < a.__tasks.length;++c) {
          a.__tasks[c]()
        }
        a.__tasks = []
      }, 0)
    };
    window.WebSocket.__onFlashEvent = a.__onFlashEvent = function() {
      setTimeout(function() {
        try {
          for(var c = a.__flash.receiveEvents(), b = 0;b < c.length;++b) {
            a.__instances[c[b].webSocketId].__handleEvent(c[b])
          }
        }catch(h) {
          logger.error(h)
        }
      }, 0);
      return!0
    };
    window.WebSocket.__log = a.__log = function(a) {
      logger.log(decodeURIComponent(a))
    };
    window.WebSocket.__error = a.__error = function(a) {
      logger.error(decodeURIComponent(a))
    };
    a.__addTask = function(c) {
      a.__flash ? c() : a.__tasks.push(c)
    };
    a.__isFlashLite = function() {
      if(!window.navigator || !window.navigator.mimeTypes) {
        return!1
      }
      var a = window.navigator.mimeTypes["application/x-shockwave-flash"];
      return!a || !a.enabledPlugin || !a.enabledPlugin.filename ? !1 : a.enabledPlugin.filename.match(/flashlite/i) ? !0 : !1
    };
    return a
  }(), w = function() {
    function a() {
      this.any = [];
      this.events = {};
      this.anyOnce = [];
      this.eventsOnce = {}
    }
    a.prototype.on = function(a, b) {
      1 == arguments.length && "function" == typeof a ? this.any.push(a) : null === a ? this.any.push(b) : (this.events[a] = this.events[a] || []).push(b)
    };
    a.prototype.off = function(a, b) {
      if(0 == arguments.length) {
        this.any = [], this.events = {}, this.anyOnce = [], this.eventsOnce = {}
      }else {
        1 == arguments.length && "function" == typeof a && (b = a, a = null);
        var h, e = -1;
        if(null === a) {
          if(b) {
            if(!(h = this.any) || -1 == (e = h.indexOf(b))) {
              if(h = this.anyOnce) {
                e = h.indexOf(b)
              }
            }
            -1 < e && h.splice(e, 1)
          }else {
            this.any = [], this.anyOnce = []
          }
        }else {
          if(b) {
            e = -1;
            if(!(h = this.events[a]) || -1 == (e = h.indexOf(b))) {
              if(h = this.eventsOnce[a]) {
                e = h.indexOf(b)
              }
            }
            -1 < e && h.splice(e, 1)
          }else {
            delete this.events[a], delete this.eventsOnce[a]
          }
        }
      }
    };
    a.prototype.listeners = function(a) {
      if(a) {
        var b = this.events[a] || [];
        this.eventsOnce[a] && Array.prototype.push.apply(b, this.eventsOnce[a]);
        return b.length ? b : null
      }
      return this.any.length ? this.any : null
    };
    a.prototype.emit = function(a) {
      var b = Array.prototype.slice.call(arguments, 1), h = {event:a};
      if(this.anyOnce.length) {
        var e = this.anyOnce;
        this.anyOnce = [];
        for(var g = 0;g < e.length;g++) {
          e[g].apply(h, b)
        }
      }
      for(g = 0;g < this.any.length;g++) {
        this.any[g].apply(h, b)
      }
      if(e = this.eventsOnce[a]) {
        delete this.eventsOnce[a];
        for(g = 0;g < e.length;g++) {
          e[g].apply(h, b)
        }
      }
      if(e = this.events[a]) {
        for(g = 0;g < e.length;g++) {
          e[g].apply(h, b)
        }
      }
    };
    a.prototype.once = function(a, b) {
      1 == arguments.length && "function" == typeof a ? this.anyOnce.push(a) : null === a ? this.anyOnce.push(b) : (this.eventsOnce[a] = this.eventsOnce[a] || []).push(b)
    };
    return a
  }(), f = function() {
    function a(a) {
    }
    var c = 4, b = function() {
    };
    a.LOG_NONE = 0;
    a.LOG_ERROR = 1;
    a.LOG_MAJOR = 2;
    a.LOG_MINOR = 3;
    a.LOG_MICRO = 4;
    a.LOG_DEFAULT = 3;
    a.LOG_DEBUG = 4;
    a.logAction = function(a, e, g) {
      a <= c && b("Ably: " + e + ": " + g)
    };
    a.setLog = function(a, e) {
      c = a || 3;
      b = e || console.log.bind(console)
    };
    return a
  }(), m = function() {
    function a() {
    }
    var c = "object" == typeof window;
    a.addProperties = a.mixin = function(a, c) {
      for(var e in c) {
        a[e] = c[e]
      }
      return a
    };
    a.copy = function(b) {
      return a.mixin({}, b)
    };
    a.isArray = function(a) {
      return"[object Array]" == Object.prototype.toString.call(a)
    };
    a.isEmpty = function(a) {
      for(var c in a) {
        return!1
      }
      return!0
    };
    a.shallowClone = function(a) {
      var c = {}, e;
      for(e in a) {
        c[e] = a[e]
      }
      return c
    };
    a.prototypicalClone = function(b, c) {
      function e() {
      }
      e.prototype = b;
      var g = new e;
      c && a.mixin(g, c);
      return g
    };
    a.inherits = function(a, c) {
      a.super_ = c;
      a.prototype = Object.create(c.prototype, {constructor:{value:a, enumerable:!1, writable:!0, configurable:!0}})
    };
    a.containsValue = function(a, c) {
      for(var e in a) {
        if(a[e] == c) {
          return!0
        }
      }
      return!1
    };
    a.intersect = function(b, c) {
      return Array.isArray(c) ? a.arrIntersect(b, c) : a.arrIntersectOb(b, c)
    };
    a.arrIntersect = function(a, c) {
      for(var e = [], g = 0;g < a.length;g++) {
        var d = a[g];
        -1 != c.indexOf(d) && e.push(d)
      }
      return e
    };
    a.arrIntersectOb = function(a, c) {
      for(var e = [], g = 0;g < a.length;g++) {
        var d = a[g];
        d in c && e.push(d)
      }
      return e
    };
    a.arrSubtract = function(a, c) {
      for(var e = [], g = 0;g < a.length;g++) {
        var d = a[g];
        -1 == c.indexOf(d) && e.push(d)
      }
      return e
    };
    a.keysArray = function(a, c) {
      var e = [], g;
      for(g in a) {
        (!c || a.hasOwnProperty(g)) && e.push(g)
      }
      return e.length ? e : void 0
    };
    a.valuesArray = function(a, c) {
      var e = [], g;
      for(g in a) {
        (!c || a.hasOwnProperty(g)) && e.push(a[g])
      }
      return e.length ? e : void 0
    };
    a.nextTick = c ? function(a) {
      setTimeout(a, 0)
    } : process.nextTick;
    a.defaultGetHeaders = function(a) {
      return{accept:a ? "application/x-thrift,application/json" : "application/json"}
    };
    a.defaultPostHeaders = function(a) {
      return{accept:a ? "application/x-thrift,application/json" : "application/json", "content-type":a ? "application/x-thrift" : "application/json"}
    };
    a.arrRandomElement = function(a) {
      return a.splice(Math.floor(Math.random() * a.length))
    };
    return a
  }(), Z = function() {
    function a(a) {
      a = a || [];
      var b = function(b, e) {
        for(var g = 0;g < a.length;g++) {
          try {
            a[g](b, e)
          }catch(d) {
          }
        }
      };
      b.__proto__ = this.__proto__;
      b.members = a;
      return b
    }
    m.inherits(a, Function);
    a.prototype.push = function() {
      Array.prototype.push.apply(this.members, arguments)
    };
    return a
  }(), B = function() {
    function a(a, b, c, e, g) {
      this.options = a;
      this.binary = !a.useTextProtocol;
      this.host = b;
      this.mode = c;
      this.connectionId = e;
      this.connectionSerial = g
    }
    function c(a, b) {
      this.msg = a;
      var c = a.action;
      this.ackRequired = c == g.MESSAGE || c == g.PRESENCE;
      this.callback = b;
      this.merged = !1
    }
    function b(a, c) {
      w.call(this);
      this.realtime = a;
      this.options = c;
      this.state = p.initialized;
      this.error = null;
      this.queuedMessages = [];
      this.pendingMessages = [];
      this.msgSerial = 0;
      this.connectionSerial = this.connectionId = void 0;
      this.httpTransports = m.intersect(c.transports || x.httpTransports, b.httpTransports);
      this.transports = m.intersect(c.transports || x.transports, b.transports);
      this.upgradeTransports = m.arrSubtract(this.transports, this.httpTransports);
      var g = c.fallbackHosts;
      if(g) {
        var d;
        this.httpHosts = d = g.slice();
        d.unshift(c.restHost);
        this.wsHosts = d = g.slice();
        d.unshift(c.wsHost)
      }else {
        this.httpHosts = [c.restHost], this.wsHosts = [c.wsHost]
      }
      this.host = this.pendingTransport = this.transport = null;
      f.logAction(f.LOG_MINOR, "Realtime.ConnectionManager()", "started");
      f.logAction(f.LOG_MICRO, "Realtime.ConnectionManager()", "requested transports \x3d [" + (c.transports || x.transports) + "]");
      f.logAction(f.LOG_MICRO, "Realtime.ConnectionManager()", "available http transports \x3d [" + this.httpTransports + "]");
      f.logAction(f.LOG_MICRO, "Realtime.ConnectionManager()", "available transports \x3d [" + this.transports + "]");
      f.logAction(f.LOG_MICRO, "Realtime.ConnectionManager()", "http hosts \x3d [" + this.httpHosts + "]");
      f.logAction(f.LOG_MICRO, "Realtime.ConnectionManager()", "ws hosts \x3d [" + this.wsHosts + "]");
      if(!this.transports.length) {
        throw f.logAction(f.LOG_ERROR, "realtime.ConnectionManager()", "no requested transports available"), Error("no requested transports available");
      }
      e && c.recover && window.addEventListener("beforeunload", function() {
        self.persistConnection()
      })
    }
    var d = "undefined" !== typeof Cookie && Cookie.read, e = "undefined" !== typeof Cookie && Cookie.create, g = ("object" == typeof C ? C : require("../nodejs/lib/protocol/clientmessage_types")).TAction, r = function() {
    }, p = {initialized:{state:"initialized", terminal:!1, queueEvents:!0, sendEvents:!1}, connecting:{state:"connecting", terminal:!1, queueEvents:!0, sendEvents:!1, retryDelay:x.connectTimeout, failState:"disconnected"}, connected:{state:"connected", terminal:!1, queueEvents:!1, sendEvents:!0, failState:"disconnected"}, disconnected:{state:"disconnected", terminal:!1, queueEvents:!0, sendEvents:!1, retryDelay:x.disconnectTimeout}, suspended:{state:"suspended", terminal:!1, queueEvents:!1, sendEvents:!1, 
    retryDelay:x.suspendedTimeout}, closed:{state:"closed", terminal:!1, queueEvents:!1, sendEvents:!1}, failed:{state:"failed", terminal:!0, queueEvents:!1, sendEvents:!1}};
    a.prototype.getConnectParams = function(a) {
      a = a ? m.prototypicalClone(a) : {};
      var b = this.options;
      switch(this.mode) {
        case "resume":
          a.resume = this.connectionId;
          this.connectionSerial && (a.connection_serial = this.connectionSerial);
          break;
        case "recover":
          if(!0 === b.recover) {
            a.recover = d("ably-connection-id"), a.connection_serial = d("ably-connection-serial")
          }else {
            if(b = b.recover.match(/^([\w|\d]+):([\w|\d]+)$/)) {
              a.recover = b[1], a.connection_serial = b[2]
            }
          }
      }
      a.binary = this.binary;
      a.timestamp = Date.now();
      return a
    };
    m.inherits(b, w);
    b.httpTransports = {};
    b.transports = {};
    b.prototype.chooseTransport = function(b) {
      f.logAction(f.LOG_MAJOR, "ConnectionManager.chooseTransport()", "");
      if(this.transport) {
        f.logAction(f.LOG_MINOR, "ConnectionManager.chooseTransport()", "Transport already established"), b(null, this.transport)
      }else {
        var c = this.connectionId ? "resume" : this.options.recover ? "recover" : "clean", e = new a(this.options, null, c, this.connectionId, this.connectionSerial);
        f.logAction(f.LOG_MINOR, "ConnectionManager.chooseTransport()", "Transport recovery mode \x3d " + c + ("clean" == c ? "" : "; connectionId \x3d " + this.connectionId));
        var g = this;
        this.httpTransports.length ? this.chooseHttpTransport(e, function(c, d) {
          if(c) {
            f.logAction(f.LOG_ERROR, "ConnectionManager.chooseTransport()", "Unexpected error establishing transport; err \x3d " + c), b(c)
          }else {
            if(f.logAction(f.LOG_MINOR, "ConnectionManager.chooseTransport()", "Establishing http transport: " + d), b(null, d), g.upgradeTransports.length) {
              d.on("connected", function(b, c) {
                f.logAction(f.LOG_MAJOR, "ConnectionManager.chooseTransport()", "upgrading ... connectionId \x3d " + c);
                e = new a(g.options, e.host, "resume", c, g.connectionSerial);
                g.chooseTransportForHost(e, g.upgradeTransports.slice(), r)
              })
            }
          }
        }) : (e.host = this.httpHosts[0], f.logAction(f.LOG_MINOR, "ConnectionManager.chooseTransport()", "No http transports available; ignoring fallback hosts"), this.chooseTransportForHost(e, g.transports.slice(), b))
      }
    };
    b.prototype.chooseTransportForHost = function(a, c, e) {
      var g = c.shift();
      if(g) {
        var d = this;
        f.logAction(f.LOG_MICRO, "ConnectionManager.chooseTransportForHost()", "trying " + g);
        b.transports[g].tryConnect(this, this.realtime.auth, a, function(b, h) {
          b ? d.chooseTransportForHost(a, c, e) : (f.logAction(f.LOG_MICRO, "ConnectionManager.chooseTransport()", "transport " + g + " connecting"), d.setTransportPending(h), e(null, h))
        })
      }else {
        var h = Error("Unable to connect (no available transport)");
        h.statusCode = 404;
        h.code = 8E4;
        e(h)
      }
    };
    b.prototype.chooseHttpTransport = function(a, c) {
      function e() {
        if(g.length) {
          b.httpTransports[h.httpTransports[0]].checkConnectivity(function(b, d) {
            b ? c(b) : d ? (a.host = m.arrRandomElement(g), h.chooseTransportForHost(a, h.httpTransports.slice(), function(a, b) {
              a ? e() : c(null, b)
            })) : (b = Error("Unable to connect (network unreachable)"), b.statusCode = 404, b.code = 8E4, c(b))
          })
        }else {
          var d = Error("Unable to connect (no available host)");
          d.statusCode = 404;
          d.code = 8E4;
          c(d)
        }
      }
      var g = this.httpHosts.slice(), d = g.shift();
      if(d) {
        a.host = d;
        var h = this;
        this.chooseTransportForHost(a, this.httpTransports.slice(), function(a, b) {
          a ? e() : c(null, b)
        })
      }else {
        d = Error("Unable to connect (no available host)"), d.statusCode = 404, d.code = 8E4, c(d)
      }
    };
    b.prototype.setTransportPending = function(a) {
      f.logAction(f.LOG_MINOR, "ConnectionManager.setTransportPending()", "transport \x3d " + a);
      if(this.state == p.closed) {
        a.close(!0)
      }else {
        this.pendingTransport && this.pendingTransport.close(!1);
        this.pendingTransport = a;
        for(var b = this, c = function(c) {
          return function(e, g) {
            f.logAction(f.LOG_MINOR, "ConnectionManager.setTransportPending", "on state \x3d " + c);
            e && e.reason && f.logAction(f.LOG_MICRO, "ConnectionManager.setTransportPending", "reason \x3d  " + e.reason);
            g && f.logAction(f.LOG_MICRO, "ConnectionManager.setTransportPending", "connectionId \x3d  " + g);
            "connected" == c ? b.activateTransport(a, g) : b.deactivateTransport(a);
            b.transport === a && b.notifyState({state:c, error:e})
          }
        }, e = ["connected", "disconnected", "closed", "failed"], g = 0;g < e.length;g++) {
          var d = e[g];
          a.on(d, c(d))
        }
        this.emit("transport.pending", a)
      }
    };
    b.prototype.activateTransport = function(a, b) {
      f.logAction(f.LOG_MINOR, "ConnectionManager.activateTransport()", "transport \x3d " + a + "; connectionId \x3d " + b);
      if(this.state != p.closed) {
        var c = this.transport;
        c && (this.transport = null, c.close(!1));
        if(c = this.pendingTransport) {
          this.pendingTransport = null
        }
        this.transport = a;
        this.host = a.params.host;
        b && this.connectionId != b && (this.realtime.connection.id = this.connectionId = b, this.msgSerial = 0);
        var e = this;
        a.on("ack", function(a, b) {
          f.logAction(f.LOG_MICRO, "ConnectionManager on(ack)", "serial \x3d " + a + "; count \x3d " + b);
          e.ackMessage(a, b)
        });
        a.on("nack", function(a, b, c) {
          f.logAction(f.LOG_ERROR, "ConnectionManager on(nack)", "serial \x3d " + a + "; count \x3d " + b + "; err \x3d " + c);
          c || (c = Error("Unknown error"), c.statusCode = 500, c.code = 50001, c.reason = "Unable to send message; channel not responding");
          e.ackMessage(a, b, c)
        });
        this.emit("transport.active", a, b, a.params)
      }
    };
    b.prototype.deactivateTransport = function(a) {
      f.logAction(f.LOG_MINOR, "ConnectionManager.deactivateTransport()", "transport \x3d " + a);
      a.off("ack");
      a.off("nack");
      this.transport === a ? this.transport = this.host = null : this.pendingTransport === a && (this.pendingTransport = null);
      this.emit("transport.inactive", a)
    };
    b.prototype.persistConnection = function() {
      e && (this.connectionId && e("ably-connection-id", this.connectionId), this.connectionSerial && e("ably-connection-serial", this.connectionSerial))
    };
    b.prototype.getStateError = function() {
      return F[this.state.state]
    };
    b.activeState = function(a) {
      return a.queueEvents || a.sendEvents
    };
    b.prototype.enactStateChange = function(a) {
      f.logAction(f.LOG_MINOR, "ConnectionManager.enactStateChange", "setting new state: " + a.current);
      this.state = p[a.current];
      this.state.terminal && (this.error = a.error);
      this.emit("connectionstate", a, this.transport)
    };
    b.prototype.startConnectTimer = function() {
      var a = this;
      this.connectTimer = setTimeout(function() {
        a.connectTimer && (f.logAction(f.LOG_MINOR, "ConnectionManager connect timer expired", "requesting new state: " + p.connecting.failState), a.notifyState({state:p.connecting.failState}))
      }, x.connectTimeout)
    };
    b.prototype.cancelConnectTimer = function() {
      this.connectTimer && (clearTimeout(this.connectTimer), this.connectTimer = void 0)
    };
    b.prototype.startSuspendTimer = function() {
      var a = this;
      this.suspendTimer || (this.suspendTimer = setTimeout(function() {
        a.suspendTimer && (f.logAction(f.LOG_MINOR, "ConnectionManager suspend timer expired", "requesting new state: suspended"), p.connecting.failState = "suspended", p.connecting.queueEvents = !1, a.notifyState({state:"suspended"}))
      }, x.suspendedTimeout))
    };
    b.prototype.cancelSuspendTimer = function() {
      p.connecting.failState = "disconnected";
      p.connecting.queueEvents = !0;
      this.suspendTimer && (clearTimeout(this.suspendTimer), delete this.suspendTimer)
    };
    b.prototype.startRetryTimer = function(a) {
      var b = this;
      this.retryTimer = setTimeout(function() {
        f.logAction(f.LOG_MINOR, "ConnectionManager retry timer expired", "retrying");
        b.requestState({state:"connecting"})
      }, a)
    };
    b.prototype.cancelRetryTimer = function() {
      this.retryTimer && (clearTimeout(this.retryTimer), delete this.retryTimer)
    };
    b.prototype.notifyState = function(a) {
      if(!(this.state.terminal || a.state == this.state.state)) {
        f.logAction(f.LOG_MINOR, "ConnectionManager.notifyState()", "new state: " + a.state);
        var b = p[a.state];
        !b.sendEvents && this.transport && (f.logAction(f.LOG_MINOR, "ConnectionManager.notifyState()", "deleting transport " + this.transport), this.transport.dispose(), delete this.transport);
        this.cancelConnectTimer();
        this.cancelRetryTimer();
        "connected" == a.state && this.cancelSuspendTimer();
        a = new $(this.state.state, b.state, b.retryDelay, a.error || F[b.state]);
        b.retryDelay && this.startRetryTimer(b.retryDelay);
        this.enactStateChange(a);
        this.state.sendEvents ? this.sendQueuedMessages() : this.state.queueEvents && this.queuePendingMessages()
      }
    };
    b.prototype.requestState = function(a) {
      this.cancelConnectTimer();
      this.cancelRetryTimer();
      if(a.state != this.state.state) {
        if(this.state.terminal) {
          throw Error(this.error.reason);
        }
        if("connecting" == a.state) {
          if("connected" == this.state.state) {
            return
          }
          this.connectImpl()
        }else {
          this.pendingTransport && (this.pendingTransport.close(!0), this.pendingTransport = null), "failed" == a.state ? this.transport && (this.transport.abort(a.reason), this.transport = null) : (a.state = "closed", this.cancelConnectTimer(), this.cancelRetryTimer(), this.cancelSuspendTimer(), this.transport && (this.transport.close(!0), this.transport = null))
        }
        if(a.state != this.state.state) {
          var b = p[a.state];
          a = new $(this.state.state, b.state, b.retryIn, a.error || F[b.state]);
          this.enactStateChange(a)
        }
      }
    };
    b.prototype.connectImpl = function() {
      f.logAction(f.LOG_MINOR, "ConnectionManager.connectImpl()", "starting connection");
      this.startSuspendTimer();
      this.startConnectTimer();
      var a = this, b = this.realtime.auth, c = function(e) {
        f.logAction(f.LOG_ERROR, "ConnectionManager.connectImpl()", e);
        401 == e.statusCode && (-1 != e.message.indexOf("expire") && "token" == b.method) && b.getToken(!0, function(b) {
          b ? c(b) : a.connectImpl()
        });
        a.notifyState({state:p.connecting.failState, error:e})
      }, e = function() {
        a.chooseTransport(function(a, b) {
          a && c(a)
        })
      };
      "basic" == b.method ? e() : b.authorise(!1, function(a) {
        a ? c(a) : e()
      })
    };
    b.prototype.send = function(a, b, e) {
      e = e || r;
      this.state.queueEvents && (b ? this.queue(a, e) : (f.logAction(f.LOG_MICRO, "ConnectionManager.send()", "rejecting event"), e(this.error)));
      this.state.sendEvents && (f.logAction(f.LOG_MICRO, "ConnectionManager.send()", "sending event"), this.sendImpl(new c(a, e)))
    };
    b.prototype.sendImpl = function(a) {
      var b = a.msg;
      a.ackRequired && (b.msgSerial = this.msgSerial++, this.pendingMessages.push(a));
      try {
        this.transport.send(b, function(a) {
        })
      }catch(c) {
        f.logAction(f.LOG_ERROR, "ConnectionManager.sendQueuedMessages()", "Unexpected exception in transport.send(): " + c)
      }
    };
    b.prototype.ackMessage = function(a, b, c) {
      f.logAction(f.LOG_MICRO, "ConnectionManager.ackMessage()", "serial \x3d " + a + "; count \x3d " + b);
      c = c || null;
      var e = this.pendingMessages, g = e[0];
      if(g && (g = g.msg.msgSerial, a += b, a > g)) {
        e = e.splice(0, a - g);
        for(a = 0;a < e.length;a++) {
          e[a].callback(c)
        }
      }
    };
    b.prototype.queue = function(a, b) {
      f.logAction(f.LOG_MICRO, "ConnectionManager.queue()", "queueing event");
      var e = this.queuedMessages[this.queuedMessages.length - 1];
      e && ca.mergeTo(e.msg, a) ? (e.merged || (e.callback = new Z([e.callback]), e.merged = !0), e.listener.push(b)) : this.queuedMessages.push(new c(a, b))
    };
    b.prototype.sendQueuedMessages = function() {
      f.logAction(f.LOG_MICRO, "ConnectionManager.sendQueuedMessages()", "sending " + this.queuedMessages.length + " queued messages");
      for(var a;a = this.queuedMessages.shift();) {
        this.sendImpl(a)
      }
    };
    b.prototype.queuePendingMessages = function() {
      f.logAction(f.LOG_MICRO, "ConnectionManager.queuePendingMessages()", "queueing " + this.pendingMessages.length + " pending messages");
      this.queuedMessages = this.pendingMessages.concat(this.queuedMessages);
      this.pendingMessages = []
    };
    b.prototype.onChannelMessage = function(a, b) {
      if(b === this.transport || b.connectionId == this.connectionId) {
        this.realtime.channels.onChannelMessage(a)
      }else {
        this.realtime.channels.retryChannelMessage(a)
      }
    };
    return b
  }(), H = function() {
    function a(a, b, c) {
      w.call(this);
      this.connectionManager = a;
      this.auth = b;
      this.params = c;
      this.isConnected = !1
    }
    var c = "object" == typeof window ? C : require("../nodejs/lib/protocol/clientmessage_types"), b = c.TAction, d = c.TFlags, e = function() {
    };
    m.inherits(a, w);
    a.prototype.connect = function() {
    };
    a.prototype.close = function(a) {
      this.isConnected = !1;
      this.emit("closed", F.closed);
      a && this.sendDisconnect();
      this.dispose()
    };
    a.prototype.abort = function(a) {
      this.isConnected = !1;
      this.emit("failed", a);
      this.sendDisconnect();
      this.dispose()
    };
    a.prototype.sendDisconnect = function() {
      this.send(new c.TChannelMessage({action:b.DISCONNECT}), e)
    };
    a.prototype.onChannelMessage = function(a) {
      switch(a.action) {
        case b.HEARTBEAT:
          this.emit("heartbeat");
          break;
        case b.CONNECTED:
          this.connectionId = a.connectionId;
          this.isConnected = !0;
          this.onConnect(a);
          this.emit("connected", null, this.connectionId, a.flags);
          break;
        case b.DISCONNECTED:
          this.isConnected = !1;
          this.onDisconnect();
          break;
        case b.ACK:
          this.emit("ack", a.msgSerial, a.count);
          break;
        case b.NACK:
          this.emit("nack", a.msgSerial, a.count, a.error);
          break;
        case b.ERROR:
          this.abort({statusCode:a.statusCode, code:a.code, reason:a.reason});
          break;
        default:
          this.connectionManager.onChannelMessage(a, this)
      }
    };
    a.prototype.onConnect = function(a) {
      a.flags && a.flags & 1 << d.SYNC_TIME && this.connectionManager.realtime.time({connection_id:a.connectionId})
    };
    a.prototype.onDisconnect = function() {
    };
    a.prototype.onClose = function(a, b) {
      if("closed" != this.connectionManager.state.state) {
        var c = a ? "disconnected" : "failed";
        this.isConnected = !1;
        var e = m.copy(F[c]);
        b && (e.reason = b);
        this.emit(c, e)
      }
    };
    a.prototype.dispose = function() {
      this.off()
    };
    return a
  }(), da = function() {
    function a(a, b, c) {
      c.binary = c.binary && d;
      H.call(this, a, b, c)
    }
    var c = "object" == typeof window, b = c ? window.WebSocket || window.MozWebSocket : require("ws"), d = c ? !1 : !!u;
    m.inherits(a, H);
    a.isAvailable = function() {
      return!!b
    };
    a.isAvailable() && (B.transports.web_socket = a);
    a.tryConnect = function(b, c, d, h) {
      var l = new a(b, c, d), v = function(a) {
        h(a)
      };
      l.on("wserror", v);
      l.on("wsopen", function() {
        f.logAction(f.LOG_MINOR, "WebSocketTransport.tryConnect()", "viable transport " + l);
        l.off("wserror", v);
        h(null, l)
      });
      l.connect()
    };
    a.prototype.createWebSocket = function(a, c) {
      var d = 0;
      if(c) {
        for(var h in c) {
          a += (d++ ? "\x26" : "?") + h + "\x3d" + c[h]
        }
      }
      this.uri = a;
      return new b(a)
    };
    a.prototype.toString = function() {
      return"WebSocketTransport; uri\x3d" + this.uri
    };
    a.prototype.connect = function() {
      f.logAction(f.LOG_MINOR, "WebSocketTransport.connect()", "starting");
      H.prototype.connect.call(this);
      var a = this, b = this.params, c = b.options, d = (c.encrypted ? "wss://" : "ws://") + b.host + ":" + c.wsPort + "/";
      f.logAction(f.LOG_MINOR, "WebSocketTransport.connect()", "uri: " + d);
      this.auth.getAuthParams(function(c, h) {
        var r = "", s;
        for(s in h) {
          r += " " + s + ": " + h[s] + ";"
        }
        f.logAction(f.LOG_MINOR, "WebSocketTransport.connect()", "authParams:" + r);
        if(c) {
          a.abort(UIMessages.FAIL_REASON_REFUSED)
        }else {
          r = b.getConnectParams(h);
          try {
            var t = a.wsConnection = a.createWebSocket(d, r);
            t.binaryType = "arraybuffer";
            t.onopen = function() {
              a.onWsOpen()
            };
            t.onclose = function(b, c) {
              a.onWsClose(b, c)
            };
            t.onmessage = function(b) {
              a.onWsData(b.data, "string" != typeof b.data)
            };
            t.onerror = function(b) {
              a.onWsError(b)
            }
          }catch(k) {
            a.onWsError(k)
          }
        }
      })
    };
    a.prototype.send = function(a, b) {
      try {
        this.wsConnection.send(Serialize.TChannelMessage.encode(a, this.params.binary))
      }catch(c) {
        var d = "Unexpected send exception: " + c;
        f.logAction(f.LOG_ERROR, "WebSocketTransport.send()", d);
        b(Error(d))
      }
    };
    a.prototype.onWsData = function(a, b) {
      f.logAction(f.LOG_MICRO, "WebSocketTransport.onWsData()", "data received; length \x3d " + a.length + "; type \x3d " + typeof a + "; binary \x3d " + b);
      try {
        this.onChannelMessage(Serialize.TChannelMessage.decode(a, b))
      }catch(c) {
        f.logAction(f.LOG_ERROR, "WebSocketTransport.onWsData()", "Unexpected exception handing channel message: " + c.stack)
      }
    };
    a.prototype.onWsOpen = function() {
      f.logAction(f.LOG_MINOR, "WebSocketTransport.onWsOpen()", "opened WebSocket");
      this.emit("wsopen")
    };
    a.prototype.onWsClose = function(a, b) {
      var c, d, h;
      "object" == typeof a ? (c = a.wasClean, d = a.code, h = a.reason) : (d = a, h = b || "", c = 1E3 == d);
      f.logAction(f.LOG_MINOR, "WebSocketTransport.onWsClose()", "closed WebSocket; wasClean \x3d " + c + "; code \x3d " + d);
      delete this.wsConnection;
      H.prototype.onClose.call(this, c, h)
    };
    a.prototype.onWsError = function(a) {
      f.logAction(f.LOG_ERROR, "WebSocketTransport.onError()", "Unexpected error from WebSocket: " + a);
      this.emit("wserror", a);
      this.abort()
    };
    a.prototype.dispose = function() {
      this.wsConnection && (this.wsConnection.close(), delete this.wsConnection)
    };
    return a
  }(), L = function() {
    function a(a, b, d) {
      H.call(this, a, b, d);
      this.binary = this.params.binary;
      this.pendingItems = this.pendingCallback = this.recvRequest = this.sendRequest = null
    }
    "object" == typeof C || require("../nodejs/lib/protocol/clientmessage_types");
    (m || require("util")).inherits(a, H);
    a.paramStr = function(a, b) {
      var d = 0, e = b || "";
      if(a) {
        for(var g in a) {
          e += (d++ ? "\x26" : "?") + g + "\x3d" + a[g]
        }
      }
      return e
    };
    a.prototype.connect = function() {
      f.logAction(f.LOG_MINOR, "CometTransport.connect()", "starting");
      H.prototype.connect.call(this);
      var c = this, b = this.params, d = b.options;
      this.baseUri = (d.encrypted ? "https://" : "http://") + b.host + ":" + d.wsPort + "/comet/";
      var e = this.baseUri + "connect";
      f.logAction(f.LOG_MINOR, "CometTransport.connect()", "uri: " + e);
      this.auth.getAuthParams(function(b, d) {
        if(b) {
          c.abort(UIMessages.FAIL_REASON_REFUSED)
        }else {
          c.authParams = d;
          var h = c.params.getConnectParams(d);
          f.logAction(f.LOG_MINOR, "CometTransport.connect()", "connectParams:" + a.paramStr(h));
          try {
            c.request(e, h, null, !1, function(a, b) {
              a ? c.emit("error", a) : (c.emit("preconnect"), c.onResponseData(b))
            })
          }catch(l) {
            c.emit("error", l)
          }
        }
      })
    };
    a.prototype.sendDisconnect = function() {
      var a = this;
      this.request(this.closeUri, this.authParams, null, !1, function(b, d) {
        b && a.emit("error", b)
      })
    };
    a.prototype.dispose = function() {
      this.recvRequest && (this.recvRequest.abort(), this.recvRequest = null)
    };
    a.prototype.onConnect = function() {
      var a = this.baseUri + this.connectionId;
      this.sendUri = a + "/send";
      this.recvUri = a + "/recv";
      this.closeUri = a + "/close";
      this.recv()
    };
    a.prototype.send = function(a, b) {
      if(this.sendRequest) {
        this.pendingItems = this.pendingItems || [], this.pendingItems.push(a), this.pendingCallback = this.pendingCallback || new Z, this.pendingCallback.push(b)
      }else {
        var d = this.pendingItems || [];
        d.push(a);
        this.pendingItems = null;
        var e = this.pendingCallback;
        e && (e.push(b), b = e, this.pendingCallback = null);
        this.sendItems(d, b)
      }
    };
    a.prototype.sendItems = function(a, b) {
      var d = this;
      try {
        this.sendRequest = d.request(d.sendUri, d.authParams, this.encodeRequest(a), !1, function(a, c) {
          d.sendRequest = null;
          d.pendingItems && (d.sendItems(d.pendingItems, d.pendingCallback), d.pendingItems = null, d.pendingCallback = null);
          a ? b(a) : (d.onResponseData(c), b(null))
        })
      }catch(e) {
        var g = "Unexpected send exception: " + e;
        f.logAction(f.LOG_ERROR, "CometTransport.sendItems()", g);
        b(Error(g))
      }
    };
    a.prototype.recv = function() {
      this.recvRequest && (this.recvRequest.abort(), this.recvRequest = null);
      if(this.isConnected) {
        var a = this;
        this.recvRequest = this.request(this.recvUri, this.authParams, null, !0, function(b, d) {
          b ? a.emit("error", b) : (a.onRecvResponse(d), a.recvRequest = null, a.recv())
        })
      }
    };
    a.prototype.onResponseData = function(a) {
      try {
        var b = this.decodeResponse(a);
        if(b && b.length) {
          for(a = 0;a < b.length;a++) {
            this.onChannelMessage(b[a])
          }
        }
      }catch(d) {
        f.logAction(f.LOG_ERROR, "CometTransport.onResponseData()", "Unexpected exception handing channel event: " + d.stack)
      }
    };
    a.prototype.onRecvResponse = function(a) {
      this.onResponseData(a)
    };
    a.prototype.encodeRequest = function(a) {
      return Serialize.TMessageSet.encode(a, this.binary)
    };
    a.prototype.decodeResponse = function(a) {
      return Serialize.TMessageSet.decode(a, this.binary)
    };
    return a
  }();
  this.Data = function() {
    function a() {
    }
    var c = "object" == typeof C ? C : require("../nodejs/lib/protocol/clientmessage_types"), b = {"[object Null]":function(a, b) {
      a.type = c.TType.NONE;
      return!0
    }, "[object Buffer]":function(a, b) {
      a.type = c.TType.BUFFER;
      a.binaryData = b;
      return!0
    }, "[object ArrayBuffer]":function(a, b) {
      a.type = c.TType.BUFFER;
      a.binaryData = b;
      return!0
    }, "[object Array]":function(a, b) {
      a.type = c.TType.JSONARRAY;
      a.stringData = JSON.stringify(b);
      return!0
    }, "[object String]":function(a, b) {
      a.type = c.TType.STRING;
      a.stringData = b.valueOf();
      return!0
    }, "[object Number]":function(a, b) {
      a.type = c.TType.DOUBLE;
      a.doubleData = b.valueOf();
      return!0
    }, "[object Boolean]":function(a, b) {
      a.type = b.valueOf() ? c.TType.TRUE : c.TType.FALSE;
      return!0
    }, "[object Object]":function(a, b) {
      "undefined" !== typeof u && u.isBuffer(b) ? (a.type = c.TType.BUFFER, a.binaryData = b) : (a.type = c.TType.JSONOBJECT, a.stringData = JSON.stringify(b));
      return!0
    }, "[object Function]":function(a, b) {
      a.type = c.TType.JSONOBJECT;
      a.stringData = JSON.stringify(b);
      return!0
    }}, d = {undefined:function(a, b) {
      a.type = c.TType.NONE;
      return!0
    }, "boolean":function(a, b) {
      a.type = b ? c.TType.TRUE : c.TType.FALSE;
      return!0
    }, string:function(a, b) {
      a.type = c.TType.STRING;
      a.stringData = b;
      return!0
    }, number:function(a, b) {
      a.type = c.TType.DOUBLE;
      a.doubleData = b;
      return!0
    }, object:function(a, c) {
      var d = b[Object.prototype.toString.call(c)];
      return d && d(a, c)
    }};
    a.fromTData = function(a) {
      var b = void 0;
      switch(a.type) {
        case 1:
          b = !0;
          break;
        case 2:
          b = !1;
          break;
        case 3:
          b = a.i32Data;
          break;
        case 4:
          b = a.i64Data;
          break;
        case 5:
          b = a.doubleData;
          break;
        case 6:
          b = a.stringData;
          break;
        case 7:
          b = a.binaryData;
          break;
        case 8:
        ;
        case 9:
          b = JSON.parse(a.stringData)
      }
      return b
    };
    a.toTData = function(a) {
      var b = new c.TData, f = d[typeof a];
      if(f && f(b, a)) {
        return b
      }
      throw Error("Unsupported data type: " + Object.prototype.toString.call(a));
    };
    return a
  }();
  var ga = function() {
    "object" == typeof C || require("../nodejs/lib/protocol/clientmessage_types");
    return function(a, c, b, d) {
      this.channelSerial = a;
      this.timestamp = c;
      this.name = b;
      this.data = d
    }
  }();
  "object" == typeof C || require("../nodejs/lib/protocol/clientmessage_types");
  this.PresenceMessage = void 0;
  this.Serialize = function() {
    function a() {
    }
    var c = "object" == typeof C ? C : require("../nodejs/lib/protocol/clientmessage_types"), b = a.TData = {}, d = a.TMessage = {}, e = a.TPresence = {}, g = a.TChannelMessage = {}, f = a.TMessageArray = {}, p = a.TMessageSet = {}, l = c.TType.BUFFER;
    b.fromREST = function(a) {
      var c, d = a.data, e = a.encoding;
      e ? (c = new b, c.type = l, c.binaryData = new u(d, e)) : Data.toTData(d);
      a.data = d
    };
    c.TMessage.prototype.toJSON = function() {
      var a = this.data, b = {name:this.name, clientId:this.clientId, timestamp:this.timestamp, tags:this.tags}, c = Data.fromTData(a);
      a.type == l && (b.encoding = "base64", c = c.toString("base64"));
      b.data = c;
      return b
    };
    c.TPresence.prototype.toJSON = function() {
      var a = this.clientData, b = {name:this.name, clientId:this.clientId, timestamp:this.timestamp, tags:this.tags}, c = Data.fromTData(a);
      a.type == l && (b.encoding = "base64", c = c.toString("base64"));
      b.clientData = c;
      return b
    };
    b.fromREST = function(a, c) {
      var d, e = a.encoding;
      e ? (d = new b, d.type = l, d.binaryData = new u(c, e)) : d = Data.toTData(c);
      return d
    };
    d.fromJSON = function(a) {
      a.data = b.fromREST(a, a.data);
      return new c.TMessage(a)
    };
    e.fromJSON = function(a) {
      a.clientData = b.fromREST(a, a.clientData);
      return new c.TPresence(a)
    };
    g.fromJSON = function(a) {
      var b;
      if(b = a.messages) {
        for(var g = b.length, f = a.messages = Array(g), r = 0;r < g;r++) {
          f[r] = d.fromJSON(b[r])
        }
      }
      if(b = a.presence) {
        g = b.length;
        f = a.presence = Array(g);
        for(r = 0;r < g;r++) {
          f[r] = e.fromJSON(b[r])
        }
      }
      return new c.TChannelMessage(a)
    };
    g.decode = function(a, b) {
      var d, e;
      if(b) {
        if(e = ThriftUtil.decodeSync(d = new c.TChannelMessage, a)) {
          throw e;
        }
      }else {
        d = g.fromJSON(JSON.parse(a))
      }
      return d
    };
    p.decode = function(a, b) {
      var d = null;
      if(a) {
        if(b) {
          var e;
          if(d = ThriftUtil.decodeSync(e = new c.TMessageSet, a)) {
            throw d;
          }
          d = e.items
        }else {
          e = JSON.parse(a);
          for(var h = e.length, d = Array(h), f = 0;f < h;f++) {
            d[f] = g.fromJSON(e[f])
          }
        }
      }
      return d
    };
    g.encode = function(a, b) {
      return b ? ThriftUtil.encodeSync(a) : JSON.stringify(a)
    };
    p.encode = function(a, b) {
      return b ? ThriftUtil.encodeSync(new c.TMessageSet({items:a})) : JSON.stringify(a)
    };
    f.decode = function(a, b) {
      var e = null;
      if(a) {
        if(b) {
          var g;
          if(e = ThriftUtil.decodeSync(g = new c.TMessageArray, a)) {
            throw e;
          }
          e = g.items
        }else {
          g = JSON.parse(a);
          for(var f = g.length, e = Array(f), r = 0;r < f;r++) {
            e[r] = d.fromJSON(g[r])
          }
        }
      }
      return e
    };
    return a
  }();
  var V = function() {
    function a() {
    }
    a.get = function(a, b, d, e, g) {
      function f() {
        a.auth.getAuthHeaders(function(p, l) {
          p ? g(p) : Http.get(a, b, m.mixin(l, d), e, function(b, d) {
            b && 40140 == b.code ? a.auth.authorise({force:!0}, function(a) {
              a ? g(a) : f()
            }) : g(b, d)
          })
        })
      }
      f()
    };
    a.post = function(a, b, d, e, g, f) {
      function p() {
        a.auth.getAuthHeaders(function(l, v) {
          l ? f(l) : Http.post(a, b, m.mixin(v, e), d, g, function(b, d) {
            b && 40140 == b.code ? a.auth.authorise({force:!0}, function(a) {
              a ? f(a) : p()
            }) : f(b, d)
          })
        })
      }
      p()
    };
    return a
  }(), ha = function() {
    function a() {
    }
    function c(a) {
      if(!a) {
        return""
      }
      "string" == typeof a && (a = JSON.parse(a));
      var b = {}, c = m.keysArray(a, !0);
      if(!c) {
        return""
      }
      c.sort();
      for(var d = 0;d < c.length;d++) {
        b[c[d]] = a[c[d]].sort()
      }
      return JSON.stringify(b)
    }
    function b(a, b) {
      this.rest = a;
      var c = this.tokenOptions = {};
      b.keyId && (c.keyId = b.keyId);
      b.keyValue && (c.keyValue = b.keyValue);
      if(b.keyValue) {
        if(!b.clientId) {
          f.logAction(f.LOG_MINOR, "Auth()", "anonymous, using basic auth");
          this.method = "basic";
          this.basicKey = (new u(b.key || b.keyId + ":" + b.keyValue, "ascii")).toString("base64");
          this.keyId = b.keyId;
          this.keyValue = b.keyValue;
          return
        }
        if(!g) {
          throw c = "client-side token request signing not supported", f.logAction(f.LOG_ERROR, "Auth()", c), Error(c);
        }
      }
      this.method = "token";
      b.authToken && (this.token = {id:b.authToken});
      if(b.authCallback) {
        f.logAction(f.LOG_MINOR, "Auth()", "using token auth with authCallback"), c.authCallback = b.authCallback
      }else {
        if(b.authUrl) {
          f.logAction(f.LOG_MINOR, "Auth()", "using token auth with authUrl"), c.authUrl = b.authUrl
        }else {
          if(b.keyValue) {
            f.logAction(f.LOG_MINOR, "Auth()", "using token auth with client-side signing")
          }else {
            if(this.token) {
              f.logAction(f.LOG_MINOR, "Auth()", "using token auth with supplied token only")
            }else {
              throw c = "options must include valid authentication parameters", f.logAction(f.LOG_ERROR, "Auth()", c), Error(c);
            }
          }
        }
      }
    }
    var d = "object" == typeof window, e = d ? null : require("crypto"), g = void 0;
    d && (window.CryptoJS && CryptoJS.HmacSHA256 && CryptoJS.enc.Base64) && (g = function(a, b) {
      return CryptoJS.HmacSHA256(a, b).toString(CryptoJS.enc.Base64)
    });
    d || (g = function(a, b) {
      var c = e.createHmac("SHA256", b);
      c.update(a);
      return c.digest("base64")
    });
    b.prototype.authorise = function(a, b) {
      var c = this.token;
      if(c) {
        if(void 0 === c.expires || c.expires > this.getTimestamp()) {
          if(!a.force) {
            f.logAction(f.LOG_MINOR, "Auth.getToken()", "using cached token; expires \x3d " + c.expires);
            b(null, c);
            return
          }
        }else {
          f.logAction(f.LOG_MINOR, "Auth.getToken()", "deleting expired token"), this.token = null
        }
      }
      var d = this;
      this.requestToken(a, function(a, c) {
        a ? b(a) : b(null, d.token = c.access_token)
      })
    };
    b.prototype.requestToken = function(b, d) {
      "function" == typeof b && !d && (d = b, b = {});
      b = b || {};
      d = d || a;
      b = m.mixin(m.copy(this.tokenOptions), b);
      var e, g = this.rest;
      if(b.authCallback) {
        f.logAction(f.LOG_MINOR, "Auth.requestToken()", "using token auth with auth_callback"), e = b.authCallback
      }else {
        if(b.authUrl) {
          f.logAction(f.LOG_MINOR, "Auth.requestToken()", "using token auth with auth_url"), e = function(a, c) {
            Http.get(g, b.authUrl, b.authHeaders || {}, m.mixin(a, b.authParams), c)
          }
        }else {
          if(b.keyValue) {
            var h = this;
            f.logAction(f.LOG_MINOR, "Auth.requestToken()", "using token auth with client-side signing");
            e = function(a, c) {
              h.createTokenRequest(m.mixin(m.copy(b), a), c)
            }
          }else {
            throw Error("Auth.requestToken(): options must include valid authentication parameters");
          }
        }
      }
      var k = {}, t = b.clientId || this.rest.clientId;
      t && (k.client_id = t);
      t = b.ttl || "";
      "ttl" in b && (k.ttl = t);
      "capability" in b && (k.capability = c(b.capability));
      var g = this.rest, y = function(a) {
        return g.baseUri(a) + "/keys/" + b.keyId + "/authorise"
      }, u = function(a, b) {
        Http.post ? Http.post(g, y, m.defaultPostHeaders(), a, null, b) : Http.get(g, y, m.defaultGetHeaders(), a, b)
      };
      e(k, function(a, b) {
        a ? (f.logAction(f.LOG_ERROR, "Auth.requestToken()", "token request signing call returned error; err \x3d " + a), d(a)) : u(b, function(a, b) {
          a ? (f.logAction(f.LOG_ERROR, "Auth.requestToken()", "token request API call returned error; err \x3d " + a), d(a)) : (f.logAction(f.LOG_MINOR, "Auth.getToken()", "token received"), d(null, b.access_token))
        })
      })
    };
    b.prototype.createTokenRequest = function(a, b) {
      var c = a.keyId, d = a.keyValue;
      if(!c || !d) {
        b(Error("No key specified"))
      }else {
        var e = {id:c}, h = a.clientId || "";
        h && (e.client_id = a.clientId);
        var k = a.ttl || "";
        k && (e.ttl = k);
        var m = a.capability || "";
        m && (e.capability = m);
        var u = this.rest, x = this;
        (function(c) {
          a.timestamp ? c() : a.queryTime ? u.time(function(d, e) {
            d ? b(d) : (a.timestamp = Math.floor(e / 1E3), c())
          }) : (a.timestamp = x.getTimestamp(), c())
        })(function() {
          var c = e.nonce = a.nonce || ("000000" + Math.floor(1E16 * Math.random())).slice(-16), l = e.timestamp = a.timestamp, c = e.id + "\n" + k + "\n" + m + "\n" + h + "\n" + l + "\n" + c + "\n";
          e.mac = a.mac || g(c, d);
          f.logAction(f.LOG_MINOR, "Auth.getTokenRequest()", "generated signed request");
          b(null, e)
        })
      }
    };
    b.prototype.getAuthParams = function(a) {
      "basic" == this.method ? a(null, {key_id:this.keyId, key_value:this.keyValue}) : this.authorise({}, function(b, c) {
        b ? a(b) : a(null, {access_token:c.id})
      })
    };
    b.prototype.getAuthHeaders = function(a) {
      "basic" == this.method ? a(null, {authorization:"Basic " + this.basicKey}) : this.authorise({}, function(b, c) {
        b ? a(b) : a(null, {authorization:"Bearer " + (new u(c.id, "ascii")).toString("base64")})
      })
    };
    b.prototype.getTimestamp = function() {
      var a = Date.now() + (this.rest.serverTimeOffset || 0);
      return Math.floor(a / 1E3)
    };
    return b
  }(), ea = this.Rest = function() {
    function a(a) {
      if(!a) {
        var b = "no options provided";
        f.logAction(f.LOG_ERROR, "Rest()", b);
        throw Error(b);
      }
      "string" == typeof a && (a = {key:a});
      this.options = a;
      if(a.key) {
        b = a.key.match(/^([^:\s]+):([^:.\s]+)$/);
        if(!b) {
          throw b = "invalid key parameter", f.logAction(f.LOG_ERROR, "Rest()", b), Error(b);
        }
        a.keyId = b[1];
        a.keyValue = b[2]
      }
      a.log && f.setLog(a.log.level, a.log.handler);
      f.logAction(f.LOG_MINOR, "Rest()", "started");
      this.clientId = a.clientId;
      "object" == typeof window && ("https:" == window.location.protocol && !("encrypted" in a)) && (a.encrypted = !0);
      a.fallbackHosts = a.restHost ? null : x.fallbackHosts;
      a.restHost = a.restHost || x.REST_HOST;
      this.serverTimeOffset = null;
      this.baseUri = this.authority = function(b) {
        return"https://" + b + ":" + (a.tlsPort || x.TLS_PORT)
      };
      this.auth = new ha(this, a);
      this.channels = new c(this)
    }
    function c(a) {
      this.rest = a;
      this.attached = {}
    }
    var b = function() {
    };
    a.prototype.stats = function(a, c) {
      void 0 === c && ("function" == typeof a ? (c = a, a = null) : c = b);
      var d = m.copy(m.defaultGetHeaders());
      this.options.headers && m.mixin(d, this.options.headers);
      V.get(this, "/stats", d, a, c)
    };
    a.prototype.time = function(a, c) {
      void 0 === c && ("function" == typeof a ? (c = a, a = null) : c = b);
      var d = m.copy(m.defaultGetHeaders());
      this.options.headers && m.mixin(d, this.options.headers);
      var f = this;
      Http.get(this, function(a) {
        return f.authority(a) + "/time"
      }, d, a, function(a, b) {
        if(a) {
          c(a)
        }else {
          var d = b[0];
          d ? (f.serverTimeOffset = d - Date.now(), c(null, d)) : (a = Error("Internal error (unexpected result type from GET /time"), a.statusCode = 500, c(a))
        }
      })
    };
    c.prototype.get = function(a) {
      a = String(a);
      var b = this.attached[a];
      b || (this.attached[a] = b = new aa(this.rest, a));
      return b
    };
    return a
  }();
  this.Realtime = function() {
    function a(a) {
      ea.call(this, a);
      a.wsHost = a.wsHost || x.WS_HOST;
      a.wsPort = a.encrypted ? a.tlsPort || x.TLS_PORT : a.port || x.PORT;
      this.connection = new ia(this, a);
      this.channels = new c(this);
      this.connection.connect()
    }
    function c(a) {
      this.realtime = a;
      this.attached = {}
    }
    m.inherits(a, ea);
    a.prototype.close = function() {
      f.logAction(f.LOG_MINOR, "Realtime.close()", "");
      this.connection.close()
    };
    c.prototype.onChannelMessage = function(a) {
      var c = a.channel;
      if(c) {
        var d = this.attached[c];
        if(d) {
          d.onMessage(a)
        }else {
          f.logAction(f.LOG_ERROR, "ConnectionManager on(channelmessage)", "received event for non-existent channel: " + c)
        }
      }else {
        f.logAction(f.LOG_ERROR, "ConnectionManager on(channelmessage)", "received event unspecified channel: " + c)
      }
    };
    c.prototype.retryChannelMessage = function(a) {
      var c = a.channel;
      if(c) {
        var d = this.attached[c];
        d ? d.retryMessage(a) : f.logAction(f.LOG_ERROR, "ConnectionManager on(channelmessage)", "received event for non-existent channel: " + c)
      }else {
        f.logAction(f.LOG_ERROR, "ConnectionManager on(channelmessage)", "received event unspecified channel: " + c)
      }
    };
    c.prototype.get = function(a) {
      a = String(a);
      var c = this.attached[a];
      c || (this.attached[a] = c = new ca(this.realtime, a, this.realtime.options));
      return c
    };
    return a
  }();
  var $ = function() {
    return function(a, c, b, d) {
      this.previous = a;
      this.current = c;
      b && (this.retryIn = b);
      d && (this.reason = d)
    }
  }(), ia = function() {
    function a(a, b) {
      w.call(this);
      this.ably = a;
      this.connectionManager = new B(a, b);
      this.state = this.connectionManager.state.state;
      this.id = void 0;
      var d = this;
      this.connectionManager.on("connectionstate", function(a) {
        var b = d.state = a.current;
        m.nextTick(function() {
          d.emit(b, a)
        })
      })
    }
    m.inherits(a, w);
    a.prototype.on = function(a, b) {
      w.prototype.on.call(this, a, b);
      if(this.state == a && b) {
        try {
          b(new $(void 0, a))
        }catch(d) {
        }
      }
    };
    a.prototype.connect = function() {
      this.connectionManager.requestState({state:"connecting"})
    };
    a.prototype.close = function() {
      this.connectionManager.requestState({state:"closed"})
    };
    return a
  }(), aa = function() {
    function a() {
    }
    function c(a, c, d) {
      f.logAction(f.LOG_MINOR, "Channel()", "started; name \x3d " + c);
      w.call(this);
      this.rest = a;
      this.name = c
    }
    m.inherits(c, w);
    c.prototype.presence = function(b, c) {
      f.logAction(f.LOG_MICRO, "Channel.presence()", "channel \x3d " + this.name);
      void 0 === c && ("function" == typeof b ? (c = b, b = null) : c = a);
      var d = this.rest, g = !d.options.useTextProtocol, r = m.copy(m.defaultGetHeaders(g));
      d.options.headers && m.mixin(r, d.options.headers);
      V.get(d, "/channels/" + this.name + "/presence", r, b, function(a, b) {
        a ? c(a) : g ? PresenceMessage.decodeTPresenceArray(b, c) : c(null, b)
      })
    };
    c.prototype.history = function(b, c) {
      f.logAction(f.LOG_MICRO, "Channel.history()", "channel \x3d " + this.name);
      void 0 === c && ("function" == typeof b ? (c = b, b = null) : c = a);
      var d = this.rest, g = !d.options.useTextProtocol, r = m.copy(m.defaultGetHeaders(g));
      d.options.headers && m.mixin(r, d.options.headers);
      V.get(d, "/channels/" + this.name + "/history", r, b, function(a, b) {
        if(a) {
          c(a)
        }else {
          try {
            c(null, Serialize.TMessageArray.decode(b, g))
          }catch(d) {
            c(d)
          }
        }
      })
    };
    c.prototype.publish = function(b, c, d) {
      f.logAction(f.LOG_MICRO, "Channel.publish()", "channel \x3d " + this.name + "; name \x3d " + b);
      d = d || a;
      var g = this.rest;
      b = {name:b, data:c};
      c = m.copy(m.defaultPostHeaders(!1));
      g.options.headers && m.mixin(c, g.options.headers);
      V.post(g, "/channels/" + this.name + "/publish", b, c, null, d)
    };
    return c
  }(), ca = function() {
    function a(a, b, c) {
      f.logAction(f.LOG_MINOR, "RealtimeChannel()", "started; name \x3d " + b);
      aa.call(this, a, b, c);
      this.presence = new ja(this, c);
      this.connectionManager = a.connection.connectionManager;
      this.options = m.prototypicalClone(e, c);
      this.state = "initialized";
      this.subscriptions = new w;
      this.pendingEvents = []
    }
    var c = "object" == typeof C ? C : require("../nodejs/lib/protocol/clientmessage_types"), b = c.TAction, d = function() {
    }, e = {queueEvents:!0};
    m.inherits(a, aa);
    a.invalidStateError = {statusCode:400, code:90001, reason:"Channel operation failed (invalid channel state)"};
    a.prototype.publish = function(a, b, e) {
      f.logAction(f.LOG_MICRO, "RealtimeChannel.publish()", "name \x3d " + a);
      e = e || d;
      var l = this.connectionManager;
      B.activeState(l.state) ? (l = new c.TMessage, l.name = a, l.data = Data.toTData(b), "attached" == this.state ? (f.logAction(f.LOG_MICRO, "RealtimeChannel.publish()", "sending message"), a = new c.TChannelMessage, a.action = c.TAction.MESSAGE, a.channel = this.name, a.messages = [l], this.sendMessage(a, e)) : ("pending" != this.state && this.attach(), f.logAction(f.LOG_MICRO, "RealtimeChannel.publish()", "queueing message"), this.pendingEvents.push({message:l, listener:e}))) : e(l.getStateError())
    };
    a.prototype.onEvent = function(a) {
      f.logAction(f.LOG_MICRO, "RealtimeChannel.onEvent()", "received message");
      for(var b = this.subscriptions, c = 0;c < a.length;c++) {
        var d = a[c];
        b.emit(d.name, d)
      }
    };
    a.prototype.attach = function(a) {
      a = a || d;
      var b = this.connectionManager;
      B.activeState(b.state) ? "attached" == this.state ? a() : "failed" == this.state ? a(b.getStateError()) : (this.once(function(c) {
        switch(this.event) {
          case "attached":
            a();
            break;
          case "detached":
          ;
          case "failed":
            a(c || b.getStateError())
        }
      }), this.attachImpl()) : a(b.getStateError())
    };
    a.prototype.attachImpl = function(a) {
      f.logAction(f.LOG_MICRO, "RealtimeChannel.attachImpl()", "sending ATTACH message");
      this.state = "pending";
      var b = new c.TChannelMessage({action:c.TAction.ATTACH, channel:this.name});
      this.sendMessage(b, a || d)
    };
    a.prototype.detach = function(a) {
      a = a || d;
      var b = this.connectionManager;
      B.activeState(b.state) ? "detached" == this.state ? a() : (this.once(function(c) {
        switch(this.event) {
          case "detached":
            a();
            break;
          case "attached":
            a(UIMessages.FAIL_REASON_UNKNOWN);
            break;
          case "failed":
            a(c || b.getStateError())
        }
      }), this.detachImpl()) : a(b.getStateError())
    };
    a.prototype.detachImpl = function(a) {
      f.logAction(f.LOG_MICRO, "RealtimeChannel.attach()", "sending DETACH message");
      var b = new c.TChannelMessage({action:c.TAction.DETACH, channel:this.name});
      this.sendMessage(b, a || d)
    };
    a.prototype.subscribe = function() {
      var a = Array.prototype.slice.call(arguments);
      1 == a.length && "function" == typeof a[0] && a.unshift(null);
      var b = a[0], c = a[1], a = a[2] = a[2] || d, e = this.subscriptions;
      if(null === b || !m.isArray(b)) {
        e.on(b, c)
      }else {
        for(var f = 0;f < b.length;f++) {
          e.on(b[f], c)
        }
      }
      this.attach(a)
    };
    a.prototype.unsubscribe = function() {
      var a = Array.prototype.slice.call(arguments);
      1 == a.length && "function" == typeof a[0] && a.unshift(null);
      var b = a[0], a = a[1], c = this.subscriptions;
      if(null === b || !m.isArray(b)) {
        c.off(b, a)
      }else {
        for(var d = 0;d < b.length;d++) {
          c.off(b[d], a)
        }
      }
    };
    a.prototype.sendMessage = function(a, b) {
      this.connectionManager.send(a, this.options.queueEvents, b)
    };
    a.prototype.sendPresence = function(a, b) {
      var d = new c.TChannelMessage({action:c.TAction.PRESENCE, channel:this.name, presence:[a]});
      this.sendMessage(d, b)
    };
    a.prototype.onMessage = function(a) {
      switch(a.action) {
        case b.ATTACHED:
          this.setAttached(a);
          break;
        case b.DETACHED:
          this.setDetached(a);
          break;
        case b.PRESENCE:
          this.presence.setPresence(a.presence, !0);
          break;
        case b.MESSAGE:
          if(a = a.messages) {
            for(var c = Array(a.length), d = 0;d < c.length;d++) {
              var e = a[d];
              c[d] = new ga(e.channelSerial, e.timestamp, e.name, Data.fromTData(e.data))
            }
            this.onEvent(c)
          }
          break;
        default:
          f.logAction(f.LOG_ERROR, "RealtimeChannel.onMessage()", "Fatal protocol error: unrecognised action (" + a.action + ")"), this.connectionManager.abort(UIMessages.FAIL_REASON_FAILED)
      }
    };
    a.mergeTo = function(a, c) {
      var d = !1, e;
      if(a.channel == c.channel && (e = a.action) == c.action) {
        switch(e) {
          case b.MESSAGE:
            for(d = 0;d < c.messages.length;d++) {
              a.messages.push(c.messages[d])
            }
            d = !0;
            break;
          case b.PRESENCE:
            for(d = 0;d < c.presence.length;d++) {
              a.presence.push(c.presence[d])
            }
            d = !0
        }
      }
      return d
    };
    a.prototype.setAttached = function(a) {
      f.logAction(f.LOG_MINOR, "RealtimeChannel.setAttached", "activating channel; name \x3d " + this.name);
      this.state = "attached";
      a.presence && this.presence.setPresence(a.presence, !1);
      this.emit("attached");
      try {
        if(this.pendingEvents.length) {
          var b = new c.TChannelMessage({action:c.TAction.MESSAGE, channel:this.name, messages:[]}), d = new Z;
          f.logAction(f.LOG_MICRO, "RealtimeChannel.setAttached", "sending " + this.pendingEvents.length + " queued messages");
          for(a = 0;a < this.pendingEvents.length;a++) {
            var e = this.pendingEvents[a];
            b.messages.push(e.message);
            d.push(e.callback)
          }
          this.sendMessage(b, d)
        }
        this.presence.setAttached()
      }catch(h) {
        f.logAction(f.LOG_ERROR, "RealtimeChannel.setSubscribed()", "Unexpected exception sending pending messages: " + h.stack)
      }
    };
    a.prototype.setDetached = function(a) {
      a.code ? (this.state = "failed", this.emit("failed", {statusCode:a.statusCode, code:a.code, reason:a.reason})) : (this.state = "detached", this.emit("detached"))
    };
    a.prototype.setSuspended = function(a) {
      f.logAction(f.LOG_MINOR, "RealtimeChannel.setSuspended", "deactivating channel; name \x3d " + this.name);
      this.state = "detached";
      for(var b = 0;b < this.pendingEvents.length;b++) {
        try {
          this.pendingEvents[b].callback(a.defaultMessage)
        }catch(c) {
        }
      }
      this.pendingEvents = [];
      this.presence.setSuspended(a);
      this.emit("detached")
    };
    a.prototype.retryMessage = function(a) {
      switch(a.action) {
        case b.ATTACHED:
          this.attachImpl();
          break;
        case b.DETACHED:
          this.detachImpl();
          break;
        default:
          f.logAction(f.LOG_ERROR, "RealtimeChannel.retryMessage()", "Unable to retry action (" + a.action + "); ignoring")
      }
    };
    return a
  }(), ja = function() {
    function a(a, b) {
      w.call(this);
      this.channel = a;
      this.clientId = b.clientId;
      this.clients = {}
    }
    var c = "object" == typeof C ? C : require("../nodejs/lib/protocol/clientmessage_types"), b = c.TPresenceState, d = ["enter", "leave", "update"];
    m.inherits(a, w);
    a.prototype.enter = function(a, b) {
      if(!this.clientId) {
        throw Error("clientId must be specified to enter a presence channel");
      }
      this.enterClient(this.clientId, a, b)
    };
    a.prototype.enterClient = function(a, d, h) {
      f.logAction(f.LOG_MICRO, "Presence.enterClient()", "entering; channel \x3d " + this.channel.name + ", client \x3d " + a);
      this.clients[a] = d;
      a = new c.TPresence({state:b.ENTER, clientId:a, clientData:Data.toTData(d)});
      d = this.channel;
      switch(d.state) {
        case "attached":
          d.sendPresence(a, h);
          break;
        case "initialized":
          d.attach();
        case "pending":
          this.pendingPresence = {presence:a, callback:h};
          break;
        default:
          a = Error("Unable to enter presence channel (incompatible state)"), a.code = 90001, h(a)
      }
    };
    a.prototype.leave = function(a) {
      if(!this.clientId) {
        throw Error("clientId must have been specified to enter or leave a presence channel");
      }
      this.leaveClient(this.clientId, a)
    };
    a.prototype.leaveClient = function(a, d) {
      f.logAction(f.LOG_MICRO, "Presence.leaveClient()", "leaving; channel \x3d " + this.channel.name + ", client \x3d " + a);
      delete this.clients[a];
      var h = new c.TPresence({state:b.LEAVE, clientId:a}), p = this.channel;
      switch(p.state) {
        case "attached":
          p.sendPresence(h, d);
          break;
        case "pending":
          this.pendingPresence = {presence:h, callback:d};
          break;
        case "initialized":
          this.pendingPresence = null;
          h = Error("Unable to enter presence channel (incompatible state)");
          h.code = 90001;
          d(h);
          break;
        default:
          this.pendingPresence = null, d(F.failed)
      }
    };
    a.prototype.get = function(a) {
      return this.clients[a || this.clientId]
    };
    a.prototype.setPresence = function(a, c) {
      f.logAction(f.LOG_MICRO, "Presence.setPresence()", "received presence for " + a.length + " participants");
      for(var r = 0;r < a.length;r++) {
        var p = a[r], l = void 0, k = p.clientId;
        p.state == b.LEAVE ? delete this.clients[k] : l = this.clients[k] = Data.toTData(p.clientData);
        c && this.emit(d[p.state], k, l)
      }
    };
    a.prototype.setAttached = function() {
      this.pendingPresence && (f.logAction(f.LOG_MICRO, "Presence.setAttached", "sending queued presence; state \x3d " + this.state), this.channel.sendPresence(this.pendingPresence.presence, this.pendingPresence.callback), this.pendingPresence = null)
    };
    a.prototype.setSuspended = function(a) {
      this.pendingPresence && (this.pendingPresence.callback(F[a.state]), this.pendingPresence = null)
    };
    return a
  }();
  (function() {
    function a(a, b, c) {
      c.binary = !1;
      L.call(this, a, b, c);
      Ably._ = {}
    }
    m.inherits(a, L);
    a.isAvailable = function() {
      return!0
    };
    B.httpTransports.jsonp = B.transports.jsonp = a;
    var c = null;
    a.checkConnectivity = function(b) {
      c ? c.push(b) : (c = [b], new a.Request("http://live.cdn.ably-realtime.com/is-the-internet-up.js", null, null, !1, "isTheInternetUp", function(a, b) {
        for(var d = !a && b, h = 0;h < c.length;h++) {
          c[h](null, d)
        }
        c = null
      }))
    };
    a.tryConnect = function(b, c, d, k) {
      var p = new a(b, c, d), l = function(a) {
        k(a)
      };
      p.on("error", l);
      p.on("preconnect", function() {
        f.logAction(f.LOG_MINOR, "JSONPTransport.tryConnect()", "viable transport " + p);
        p.off("error", l);
        k(null, p)
      });
      p.connect()
    };
    a.prototype.toString = function() {
      return"JSONPTransport; uri\x3d" + this.baseUri + "; isConnected\x3d" + this.isConnected
    };
    a.prototype.request = function(b, c, d, f, k) {
      return new a.Request(b, c, d, f, !1, k)
    };
    var b = 0;
    a.Request = function(a, c, d, f, k, l) {
      var m = Ably._;
      this.callback = l;
      var u = this.requestId = b++, s = this.timer = setTimeout(f ? x.cometRecvTimeout : x.cometSendTimeout, function() {
        y.abort()
      });
      c = c || {};
      c.callback = "Ably._._" + u;
      d ? c.body = encodeURIComponent(d) : delete c.body;
      var t = document.createElement("script");
      t.async = !0;
      t.onerror = function() {
        y.abort()
      };
      t.src = L.paramStr(c, a);
      var y = this;
      Ably._["_" + u] = function(a) {
        clearTimeout(s);
        delete m["_" + u];
        y.aborted || (t.parentNode.removeChild(t), l(null, a))
      };
      a = document.getElementsByTagName("script")[0];
      a.parentNode.insertBefore(t, a);
      this.script = t
    };
    a.Request.prototype.abort = function() {
      clearTimeout(this.timer);
      this.aborted = !0;
      delete Ably._["_" + this.requestId];
      this.callback(Error("JSONPTransport: requestId " + this.requestId + " aborted"))
    };
    Http.Request = a.Request;
    return a
  })();
  (function() {
    function a(b, c, d) {
      d.binary = d.binary && a.binary;
      L.call(this, b, c, d)
    }
    var c = function() {
      var a = new XMLHttpRequest;
      return"withCredentials" in a ? a : "undefined" !== typeof XDomainRequest ? new XDomainRequest : null
    };
    m.inherits(a, L);
    a.isAvailable = function() {
      if(!c()) {
        return!1
      }
      a.binary = !1;
      return!0
    };
    a.checkConnectivity = function(b) {
      new a.Request("http://live.cdn.ably-realtime.com/is-the-internet-up.txt", null, null, !1, function(a, c) {
        b(null, !a && "yes" == c)
      })
    };
    a.tryConnect = function(b, c, d, g) {
      var k = new a(b, c, d), p = function(a) {
        g(a)
      };
      k.on("error", p);
      k.on("preconnect", function() {
        f.logAction(f.LOG_MINOR, "XHRTransport.tryConnect()", "viable transport " + k);
        k.off("error", p);
        g(null, k)
      });
      k.connect()
    };
    a.prototype.request = function(b, c, d, g, f) {
      return new a.Request(b, c, d, g, this.binary, f)
    };
    a.prototype.toString = function() {
      return"XHRTransport; uri\x3d" + this.baseUri + "; isConnected\x3d" + this.isConnected
    };
    a.Request = function(a, d, e, g, f, k) {
      a = L.paramStr(d, a);
      var l, m, w;
      e ? (d = "POST", l = 201) : (d = "GET", l = 200);
      var s = this.xhr = c();
      f && (s.responseType = "arraybuffer");
      var t = setTimeout(g ? x.cometRecvTimeout : x.cometSendTimeout, function() {
        w = !0;
        s.abort()
      });
      s.open(d, a, !0);
      s.setRequestHeader("Accept", f ? "application/x-thrift" : "application/json");
      s.onerror = function(a) {
        a.code = 8E4;
        k(a)
      };
      s.onabort = function() {
        m = Error(w ? "Request timed out" : "Request cancelled");
        m.statusCode = 404;
        m.code = 8E4;
        k(m)
      };
      s.onreadystatechange = function() {
        if(4 == s.readyState) {
          if(clearTimeout(t), m) {
            k(m)
          }else {
            if(s.status == l) {
              var a = null;
              f ? s.response && (a = new u, a.buf = s.response, a.view = new DataView(a.buf)) : a = s.responseText;
              k(null, a)
            }else {
              0 != s.status && (m = Error("Unexpected response: statusCode \x3d " + s.status), m.statusCode = s.status, m.code = 8E4, m.statusText = s.statusText, k(m))
            }
          }
        }
      };
      s.send(e)
    };
    a.Request.prototype.abort = function() {
      this.xhr && this.xhr.abort()
    };
    a.isAvailable() && (B.httpTransports.xhr = B.transports.xhr = a, Http.Request = a.Request);
    return a
  })();
  (function() {
    function a(a, c, d) {
      d.binary = !1;
      da.call(this, a, c, d)
    }
    var c = "object" == typeof window;
    m.inherits(a, da);
    a.isAvailable = function() {
      return c && T && 10 <= T.getFlashPlayerVersion().major && S
    };
    a.isAvailable() && (B.transports.flash_socket = a);
    a.tryConnect = function(b, c, d, g) {
      S.__initialize(x.flashTransport.swfLocation);
      x.flashTransport.policyUrl && S.loadFlashPolicyFile(x.flashTransport.policyUrl);
      var k = new a(b, c, d);
      errorCb = function(a) {
        g(a)
      };
      k.on("wserror", errorCb);
      k.on("wsopen", function() {
        f.logAction(f.LOG_MINOR, "FlashTransport.tryConnect()", "viable transport " + k);
        k.off("wserror", errorCb);
        g(null, k)
      });
      k.connect()
    };
    a.prototype.createWebSocket = function(a, c) {
      var d = 0;
      if(c) {
        for(var f in c) {
          a += (d++ ? "\x26" : "?") + f + "\x3d" + c[f]
        }
      }
      this.uri = a;
      d = this.params.options;
      return new S(a, [], d.proxyHost, d.proxyPort)
    };
    a.prototype.toString = function() {
      return"FlashTransport; uri\x3d" + this.uri
    };
    return a
  })();
  window.Ably = {Realtime:this.Realtime}
})();
